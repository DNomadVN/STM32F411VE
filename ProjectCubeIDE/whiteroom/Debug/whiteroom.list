
whiteroom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bad8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800bc78  0800bc78  0001bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c384  0800c384  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c384  0800c384  0001c384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c38c  0800c38c  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c38c  0800c38c  0001c38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c390  0800c390  0001c390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800c394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200002ac  0800c640  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800c640  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136eb  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9e  00000000  00000000  000339c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00036668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001873d  00000000  00000000  000388c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e3d  00000000  00000000  00051005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009378c  00000000  00000000  00064e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  000f85ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f80  00000000  00000000  000f8690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000d43  00000000  00000000  000fe610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002ac 	.word	0x200002ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc60 	.word	0x0800bc60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b0 	.word	0x200002b0
 80001dc:	0800bc60 	.word	0x0800bc60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <BH1750_Init>:
 * 			     the configuration information for the specified I2C.
 * @param Address Target BH1750 device address. The device 7 bits address value in datasheet must
 *                be shifted to the left before calling by I2C function.
 * @retval BH1750 Status
 */
BH1750_STATUS BH1750_Init(BH1750_HandleTypeDef *hbh1750, I2C_HandleTypeDef *hi2c, uint16_t Address) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]
    hbh1750->I2C_channel = hi2c;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]
	hbh1750->Address = Address;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	809a      	strh	r2, [r3, #4]
	if(BH1750_OK == BH1750_Reset(hbh1750))
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f811 	bl	800103e <BH1750_Reset>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d108      	bne.n	8001034 <BH1750_Init+0x38>
	{
		if(BH1750_OK == BH1750_SetMtreg(hbh1750, BH1750_DEFAULT_MTREG)) // Set default value;
 8001022:	2145      	movs	r1, #69	; 0x45
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f847 	bl	80010b8 <BH1750_SetMtreg>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <BH1750_Init+0x38>
			return BH1750_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <BH1750_Init+0x3a>
	}
	return BH1750_ERROR;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <BH1750_Reset>:
/* 
 * @brief Reset all registers to default value.
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_Reset(BH1750_HandleTypeDef *hbh1750) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af02      	add	r7, sp, #8
 8001044:	6078      	str	r0, [r7, #4]
    uint8_t tmp = BH1750_RESET;
 8001046:	2307      	movs	r3, #7
 8001048:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp, 1, 10))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	8899      	ldrh	r1, [r3, #4]
 8001052:	f107 020f 	add.w	r2, r7, #15
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	f002 feea 	bl	8003e34 <HAL_I2C_Master_Transmit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <BH1750_Reset+0x2c>
        return BH1750_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <BH1750_Reset+0x2e>
    return BH1750_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <BH1750_PowerState>:
 * @param PowerOn
 *          @arg 0: Power down, low current, no active state.
 *          @arg 1: Ready for measurement command. 
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_PowerState(BH1750_HandleTypeDef *hbh1750, uint8_t PowerOn) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    PowerOn = (PowerOn ? 1 : 0);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	70fb      	strb	r3, [r7, #3]
    if (HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &PowerOn, 1, 10))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8899      	ldrh	r1, [r3, #4]
 8001096:	1cfa      	adds	r2, r7, #3
 8001098:	230a      	movs	r3, #10
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f002 fec9 	bl	8003e34 <HAL_I2C_Master_Transmit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <BH1750_PowerState+0x38>
        return BH1750_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e000      	b.n	80010ae <BH1750_PowerState+0x3a>
    return BH1750_ERROR;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <BH1750_SetMtreg>:
 * @brief Adjust measurement result for influence of optical window. (sensor sensitivity adjusting) 
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @param Mtreg The modified value of measurement time register. (31 <= Mtreg <=254) (miliseconds)
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_SetMtreg(BH1750_HandleTypeDef *hbh1750, uint8_t Mtreg) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d902      	bls.n	80010d0 <BH1750_SetMtreg+0x18>
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d101      	bne.n	80010d4 <BH1750_SetMtreg+0x1c>
		return BH1750_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e039      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	BH1750_Mtreg = Mtreg;
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <BH1750_SetMtreg+0x98>)
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));     // High bit 01000_MT[7,6,5]
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));   // Low bit  011_MT[4,3,2,1,0] 
 80010e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp[0], 1, 10);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8899      	ldrh	r1, [r3, #4]
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	230a      	movs	r3, #10
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	f002 fe91 	bl	8003e34 <HAL_I2C_Master_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <BH1750_SetMtreg+0x68>
		return BH1750_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e013      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	retCode = HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp[1], 1, 10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8899      	ldrh	r1, [r3, #4]
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	230a      	movs	r3, #10
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	f002 fe7e 	bl	8003e34 <HAL_I2C_Master_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <BH1750_SetMtreg+0x8e>
		return BH1750_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	return BH1750_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000351 	.word	0x20000351

08001154 <BH1750_SetMode>:
 *              @arg ONETIME_L_RES_MODE:     Start measurement at 4lx resolution.
 *                                           Measurement Time is typically 16ms. 
 *                                           It is automatically set to Power Down mode after measurement.
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_SetMode(BH1750_HandleTypeDef *hbh1750, bh1750_mode Mode) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
    if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <BH1750_SetMode+0x24>
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <BH1750_SetMode+0x24>
 8001174:	2301      	movs	r3, #1
 8001176:	e019      	b.n	80011ac <BH1750_SetMode+0x58>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <BH1750_SetMode+0x32>
 8001182:	2301      	movs	r3, #1
 8001184:	e012      	b.n	80011ac <BH1750_SetMode+0x58>

	BH1750_Mode = Mode;
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <BH1750_SetMode+0x60>)
 800118a:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &Mode, 1, 10))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	8899      	ldrh	r1, [r3, #4]
 8001194:	1cfa      	adds	r2, r7, #3
 8001196:	230a      	movs	r3, #10
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	f002 fe4a 	bl	8003e34 <HAL_I2C_Master_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <BH1750_SetMode+0x56>
		return BH1750_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <BH1750_SetMode+0x58>

	return BH1750_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000350 	.word	0x20000350

080011b8 <BH1750_ReadLight>:
 * @brief Read the converted value and calculate the result.
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @param Result Pointer to your variable for getting result.
 * @retval BH1750 Status
 */
BH1750_STATUS BH1750_ReadLight(BH1750_HandleTypeDef *hbh1750, uint16_t *Result) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
 	uint16_t result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(hbh1750->I2C_channel, hbh1750->Address, tmp, 2, 10))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	8899      	ldrh	r1, [r3, #4]
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	230a      	movs	r3, #10
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2302      	movs	r3, #2
 80011d4:	f002 ff2c 	bl	8004030 <HAL_I2C_Master_Receive>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d14d      	bne.n	800127a <BH1750_ReadLight+0xc2>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011de:	7b3b      	ldrb	r3, [r7, #12]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7b7b      	ldrb	r3, [r7, #13]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	81fb      	strh	r3, [r7, #14]

		if(BH1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <BH1750_ReadLight+0xcc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b45      	cmp	r3, #69	; 0x45
 80011f4:	d015      	beq.n	8001222 <BH1750_ReadLight+0x6a>
		{
			result *= (float)((uint8_t)(BH1750_DEFAULT_MTREG) / (float)BH1750_Mtreg);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <BH1750_ReadLight+0xcc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800120c:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8001288 <BH1750_ReadLight+0xd0>
 8001210:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121c:	ee17 3a90 	vmov	r3, s15
 8001220:	81fb      	strh	r3, [r7, #14]
		}

		if(BH1750_Mode == ONETIME_H_RES_MODE2 || BH1750_Mode == CONTINUOUS_H_RES_MODE2)
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <BH1750_ReadLight+0xd4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b21      	cmp	r3, #33	; 0x21
 8001228:	d003      	beq.n	8001232 <BH1750_ReadLight+0x7a>
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <BH1750_ReadLight+0xd4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b11      	cmp	r3, #17
 8001230:	d111      	bne.n	8001256 <BH1750_ReadLight+0x9e>
		{
			result /= 2.0;
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f97d 	bl	8000534 <__aeabi_i2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001242:	f7ff fb0b 	bl	800085c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fcb3 	bl	8000bb8 <__aeabi_d2uiz>
 8001252:	4603      	mov	r3, r0
 8001254:	81fb      	strh	r3, [r7, #14]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001260:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001290 <BH1750_ReadLight+0xd8>
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126c:	ee17 3a90 	vmov	r3, s15
 8001270:	b29a      	uxth	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	801a      	strh	r2, [r3, #0]
		return BH1750_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <BH1750_ReadLight+0xc4>
	}
	return BH1750_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000351 	.word	0x20000351
 8001288:	428a0000 	.word	0x428a0000
 800128c:	20000350 	.word	0x20000350
 8001290:	3f99999a 	.word	0x3f99999a

08001294 <PCA9685_Init>:
uint32_t _oscillator_freq;

void PCA9685_Init(PCA9685_HandleTypeDef *hpca9685, 
									I2C_HandleTypeDef *hi2c,
									uint8_t addr,
									uint8_t prescale) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4613      	mov	r3, r2
 80012a8:	71bb      	strb	r3, [r7, #6]
	hpca9685->Address = addr;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	711a      	strb	r2, [r3, #4]
	hpca9685->hi2c = hi2c;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
	PCA9685_Reset(hpca9685);
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 f81a 	bl	80012f0 <PCA9685_Reset>
	if (prescale) {
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <PCA9685_Init+0x3a>
		PCA9685_SetExtClk(hpca9685, prescale);
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	4619      	mov	r1, r3
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f822 	bl	8001310 <PCA9685_SetExtClk>
 80012cc:	e004      	b.n	80012d8 <PCA9685_Init+0x44>
	} else {
		// set a default frequency
		PCA9685_SetPWMFreq(hpca9685, 1000);
 80012ce:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80012e8 <PCA9685_Init+0x54>
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f85e 	bl	8001394 <PCA9685_SetPWMFreq>
	}
	// set the default internal frequency
	PCA9685_SetOscillatorFrequency(hpca9685, FREQUENCY_OSCILLATOR);
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <PCA9685_Init+0x58>)
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f908 	bl	80014f0 <PCA9685_SetOscillatorFrequency>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	447a0000 	.word	0x447a0000
 80012ec:	017d7840 	.word	0x017d7840

080012f0 <PCA9685_Reset>:
									
void PCA9685_Reset(PCA9685_HandleTypeDef *hpca9685) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, MODE1_RESTART);
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f93a 	bl	8001576 <PCA9685_Write8>
	HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f002 f8ec 	bl	80034e0 <HAL_Delay>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <PCA9685_SetExtClk>:
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &sleep);
	uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
	PCA9685_Write8(hpca9685, PCA9685_MODE1, wakeup);
}

void PCA9685_SetExtClk(PCA9685_HandleTypeDef *hpca9685, uint8_t prescale) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	uint8_t oldmode;
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &oldmode);
 800131c:	f107 030e 	add.w	r3, r7, #14
 8001320:	461a      	mov	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f942 	bl	80015ae <PCA9685_Read8>
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001332:	b25b      	sxtb	r3, r3
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	b25b      	sxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	461a      	mov	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f917 	bl	8001576 <PCA9685_Write8>
	
	// This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
	// use the external clock.
	PCA9685_Write8(hpca9685, PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f90d 	bl	8001576 <PCA9685_Write8>
	
	PCA9685_Write8(hpca9685, PCA9685_PRESCALE, prescale); // set the prescaler
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	461a      	mov	r2, r3
 8001360:	21fe      	movs	r1, #254	; 0xfe
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f907 	bl	8001576 <PCA9685_Write8>
	
	HAL_Delay(5);
 8001368:	2005      	movs	r0, #5
 800136a:	f002 f8b9 	bl	80034e0 <HAL_Delay>
	// clear the SLEEP bit to start
	PCA9685_Write8(hpca9685, PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 8001376:	b25b      	sxtb	r3, r3
 8001378:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800137c:	b25b      	sxtb	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f8f6 	bl	8001576 <PCA9685_Write8>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <PCA9685_SetPWMFreq>:

void PCA9685_SetPWMFreq(PCA9685_HandleTypeDef *hpca9685, float freq) {
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	ed87 0a02 	vstr	s0, [r7, #8]
	// Range output modulation frequency is dependant on oscillator
	if (freq < 1) 		freq = 1;
 80013a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d502      	bpl.n	80013b8 <PCA9685_SetPWMFreq+0x24>
 80013b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013b6:	60bb      	str	r3, [r7, #8]
	if (freq > 3500)	freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
 80013b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013bc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80014cc <PCA9685_SetPWMFreq+0x138>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd01      	ble.n	80013ce <PCA9685_SetPWMFreq+0x3a>
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <PCA9685_SetPWMFreq+0x13c>)
 80013cc:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <PCA9685_SetPWMFreq+0x140>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f89e 	bl	8000514 <__aeabi_ui2d>
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f7ff f8bb 	bl	8000558 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <PCA9685_SetPWMFreq+0x144>)
 80013e8:	f7ff f90e 	bl	8000608 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7ff fa32 	bl	800085c <__aeabi_ddiv>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <PCA9685_SetPWMFreq+0x148>)
 8001406:	f7fe ff49 	bl	800029c <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <PCA9685_SetPWMFreq+0x14c>)
 8001418:	f7fe ff3e 	bl	8000298 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fbe8 	bl	8000bf8 <__aeabi_d2f>
 8001428:	4603      	mov	r3, r0
 800142a:	617b      	str	r3, [r7, #20]
	if (prescaleval < PCA9685_PRESCALE_MIN)
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	d501      	bpl.n	8001442 <PCA9685_SetPWMFreq+0xae>
    prescaleval = PCA9685_PRESCALE_MIN;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <PCA9685_SetPWMFreq+0x150>)
 8001440:	617b      	str	r3, [r7, #20]
	if (prescaleval > PCA9685_PRESCALE_MAX)
 8001442:	edd7 7a05 	vldr	s15, [r7, #20]
 8001446:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014e8 <PCA9685_SetPWMFreq+0x154>
 800144a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	dd01      	ble.n	8001458 <PCA9685_SetPWMFreq+0xc4>
    prescaleval = PCA9685_PRESCALE_MAX;
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <PCA9685_SetPWMFreq+0x158>)
 8001456:	617b      	str	r3, [r7, #20]
	uint8_t prescale = (uint8_t)prescaleval;
 8001458:	edd7 7a05 	vldr	s15, [r7, #20]
 800145c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001460:	edc7 7a01 	vstr	s15, [r7, #4]
 8001464:	793b      	ldrb	r3, [r7, #4]
 8001466:	74fb      	strb	r3, [r7, #19]
	
	uint8_t oldmode;
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &oldmode);
 8001468:	f107 0311 	add.w	r3, r7, #17
 800146c:	461a      	mov	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f89c 	bl	80015ae <PCA9685_Read8>
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 8001476:	7c7b      	ldrb	r3, [r7, #17]
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	b25b      	sxtb	r3, r3
 8001486:	74bb      	strb	r3, [r7, #18]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, newmode);          	// go to sleep
 8001488:	7cbb      	ldrb	r3, [r7, #18]
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f871 	bl	8001576 <PCA9685_Write8>
	PCA9685_Write8(hpca9685, PCA9685_PRESCALE, prescale); 		// set the prescaler
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	461a      	mov	r2, r3
 8001498:	21fe      	movs	r1, #254	; 0xfe
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f86b 	bl	8001576 <PCA9685_Write8>
	PCA9685_Write8(hpca9685, PCA9685_MODE1, oldmode);
 80014a0:	7c7b      	ldrb	r3, [r7, #17]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f865 	bl	8001576 <PCA9685_Write8>
	HAL_Delay(5);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f002 f817 	bl	80034e0 <HAL_Delay>
	// This sets the MODE1 register to turn on auto increment.
	PCA9685_Write8(hpca9685, PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
 80014b2:	7c7b      	ldrb	r3, [r7, #17]
 80014b4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f859 	bl	8001576 <PCA9685_Write8>
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bdb0      	pop	{r4, r5, r7, pc}
 80014cc:	455ac000 	.word	0x455ac000
 80014d0:	455ac000 	.word	0x455ac000
 80014d4:	20000354 	.word	0x20000354
 80014d8:	40b00000 	.word	0x40b00000
 80014dc:	3fe00000 	.word	0x3fe00000
 80014e0:	3ff00000 	.word	0x3ff00000
 80014e4:	40400000 	.word	0x40400000
 80014e8:	437f0000 	.word	0x437f0000
 80014ec:	437f0000 	.word	0x437f0000

080014f0 <PCA9685_SetOscillatorFrequency>:

void PCA9685_SetOscillatorFrequency(PCA9685_HandleTypeDef *hpca9685, uint32_t freq) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	_oscillator_freq = freq;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <PCA9685_SetOscillatorFrequency+0x1c>)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000354 	.word	0x20000354

08001510 <PCA9685_SetPWM>:

void PCA9685_SetPWM(PCA9685_HandleTypeDef *hpca9685, uint8_t num, uint16_t on, uint16_t off) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4603      	mov	r3, r0
 8001520:	72fb      	strb	r3, [r7, #11]
 8001522:	460b      	mov	r3, r1
 8001524:	813b      	strh	r3, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	80fb      	strh	r3, [r7, #6]
	uint8_t outputBuffer[5] = {PCA9685_LED0_ON_L + 4*num, on, (on >> 8), off, (off >> 8)};
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3306      	adds	r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	743b      	strb	r3, [r7, #16]
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	747b      	strb	r3, [r7, #17]
 800153c:	893b      	ldrh	r3, [r7, #8]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b29b      	uxth	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	74bb      	strb	r3, [r7, #18]
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	74fb      	strb	r3, [r7, #19]
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hpca9685->hi2c, hpca9685->Address, outputBuffer, 5, 1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	b299      	uxth	r1, r3
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	2301      	movs	r3, #1
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2305      	movs	r3, #5
 800156a:	f002 fc63 	bl	8003e34 <HAL_I2C_Master_Transmit>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <PCA9685_Write8>:

			
/******************* Low level I2C interface */
void PCA9685_Write8(PCA9685_HandleTypeDef *hpca9685, uint8_t addr, uint8_t d) {
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af04      	add	r7, sp, #16
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
 8001582:	4613      	mov	r3, r2
 8001584:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(hpca9685->hi2c, hpca9685->Address, addr, 1, &d, 1, 1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	791b      	ldrb	r3, [r3, #4]
 800158e:	b299      	uxth	r1, r3
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	b29a      	uxth	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	1cbb      	adds	r3, r7, #2
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	f002 ff6b 	bl	800447c <HAL_I2C_Mem_Write>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <PCA9685_Read8>:

void PCA9685_Read8(PCA9685_HandleTypeDef *hpca9685, uint8_t addr, uint8_t *data) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b088      	sub	sp, #32
 80015b2:	af04      	add	r7, sp, #16
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	460b      	mov	r3, r1
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(hpca9685->hi2c, hpca9685->Address, addr, 1, data, 1, 1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	b299      	uxth	r1, r3
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	f003 f84a 	bl	8004670 <HAL_I2C_Mem_Read>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <StepperInit>:
STEPPER_STATUS StepperInit(Stepper_HandleTypeDef *stepper,
		                   GPIO_TypeDef* port,
						   uint16_t pin_Dir,
						   uint16_t pin_Pulse,
						   uint8_t microstep,
						   uint16_t currentPos) {
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	80fb      	strh	r3, [r7, #6]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80bb      	strh	r3, [r7, #4]
	stepper->Port           = port;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	stepper->GPIO_Pin_Dir   = pin_Dir;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	88fa      	ldrh	r2, [r7, #6]
 8001604:	809a      	strh	r2, [r3, #4]
	stepper->GPIO_Pin_Pulse = pin_Pulse;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	80da      	strh	r2, [r3, #6]
	stepper->Microstep      = microstep;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	7e3a      	ldrb	r2, [r7, #24]
 8001610:	721a      	strb	r2, [r3, #8]
	stepper->CurrentPulse   = currentPos * FACTOR;
 8001612:	8bba      	ldrh	r2, [r7, #28]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
	stepper->TargetPulse    = currentPos * FACTOR;
 8001622:	8bba      	ldrh	r2, [r7, #28]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	015b      	lsls	r3, r3, #5
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	611a      	str	r2, [r3, #16]

	return STEPPER_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <setCurrentPos>:


STEPPER_STATUS setCurrentPos(Stepper_HandleTypeDef *stepper, uint16_t current) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
	stepper->CurrentPulse = current * FACTOR;
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]
	stepper->TargetPulse = current * FACTOR;
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
	return STEPPER_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <setTargetPos>:

STEPPER_STATUS setTargetPos(Stepper_HandleTypeDef *stepper, uint16_t target) {
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
	stepper->TargetPulse = target * FACTOR;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
	return STEPPER_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <setDirCCW>:

STEPPER_STATUS setDirCCW(Stepper_HandleTypeDef *stepper) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Dir, GPIO_PIN_SET);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	889b      	ldrh	r3, [r3, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f002 fa5e 	bl	8003b78 <HAL_GPIO_WritePin>
	return STEPPER_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <setDirCW>:

STEPPER_STATUS setDirCW(Stepper_HandleTypeDef *stepper) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Dir, GPIO_PIN_RESET);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	889b      	ldrh	r3, [r3, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	f002 fa4d 	bl	8003b78 <HAL_GPIO_WritePin>
	return STEPPER_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <runToTarget>:
   *  __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
   *  while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) < us);
   */
}

STEPPER_STATUS runToTarget(Stepper_HandleTypeDef *stepper) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	if (stepper->TargetPulse != stepper->CurrentPulse) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d046      	beq.n	800178a <runToTarget+0xa2>
		// convert Position in millimeters to pulses base on microstep
		
		if (stepper->TargetPulse > stepper->CurrentPulse) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d91f      	bls.n	8001748 <runToTarget+0x60>
			setDirCCW(stepper);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffcb 	bl	80016a4 <setDirCCW>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_SET);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	88db      	ldrh	r3, [r3, #6]
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	f002 fa2d 	bl	8003b78 <HAL_GPIO_WritePin>
			delay_us(TdelayON);
 800171e:	2032      	movs	r0, #50	; 0x32
 8001720:	f000 f9c4 	bl	8001aac <delay_us>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_RESET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	88db      	ldrh	r3, [r3, #6]
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f002 fa22 	bl	8003b78 <HAL_GPIO_WritePin>
			delay_us(TdelayOFF);
 8001734:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001738:	f000 f9b8 	bl	8001aac <delay_us>
			stepper->CurrentPulse++;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	e01e      	b.n	8001786 <runToTarget+0x9e>
		}
		else {
			setDirCW(stepper);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffbc 	bl	80016c6 <setDirCW>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_SET);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	88db      	ldrh	r3, [r3, #6]
 8001756:	2201      	movs	r2, #1
 8001758:	4619      	mov	r1, r3
 800175a:	f002 fa0d 	bl	8003b78 <HAL_GPIO_WritePin>
			delay_us(TdelayON);
 800175e:	2032      	movs	r0, #50	; 0x32
 8001760:	f000 f9a4 	bl	8001aac <delay_us>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_RESET);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	f002 fa02 	bl	8003b78 <HAL_GPIO_WritePin>
			delay_us(TdelayOFF);
 8001774:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001778:	f000 f998 	bl	8001aac <delay_us>
			stepper->CurrentPulse--;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]
		}
		return STEPPER_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <runToTarget+0xa4>
	}
	return STEPPER_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <TCA9548A_Init>:
 * 			     the configuration information for the specified I2C.
 * @param address Target BH1750 device address. The device 7 bits address value in datasheet must
 *                be shifted to the left before calling by I2C function.
 * @retval TCA9548A Status
 */
TCA9548A_STATUS TCA9548A_Init(TCA9548A_HandleTypeDef *htca9548a, I2C_HandleTypeDef *hi2c, uint16_t address) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
    htca9548a->I2C_channel = hi2c;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	601a      	str	r2, [r3, #0]
    htca9548a->Address = address;
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	711a      	strb	r2, [r3, #4]

    if (TCA9548A_OK == TCA9548A_DisableAllChannel(htca9548a)) {
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f831 	bl	8001818 <TCA9548A_DisableAllChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <TCA9548A_Init+0x2c>
        return TCA9548A_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <TCA9548A_Init+0x2e>
    }
    return TCA9548A_ERROR;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <TCA9548A_SelectSingleChannel>:
 * @brief Initialize
 * @param htca9548a Pointer to a TCA9548A_HandleTypeDef
 * @param channel From 0 to 7, is channel 0 to channel 7 on TCA9548A
 * @retval TCA9548A Status
 */
TCA9548A_STATUS TCA9548A_SelectSingleChannel(TCA9548A_HandleTypeDef *htca9548a, uint8_t channel) {
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af02      	add	r7, sp, #8
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
    if (channel > 7) {
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d901      	bls.n	80017e0 <TCA9548A_SelectSingleChannel+0x16>
        return TCA9548A_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e017      	b.n	8001810 <TCA9548A_SelectSingleChannel+0x46>
    }
    uint8_t tmp = (1 << channel);
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2201      	movs	r2, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(htca9548a->I2C_channel, htca9548a->Address, &tmp, 1, 10)) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f107 020f 	add.w	r2, r7, #15
 80017fa:	230a      	movs	r3, #10
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	f002 fb18 	bl	8003e34 <HAL_I2C_Master_Transmit>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <TCA9548A_SelectSingleChannel+0x44>
        return TCA9548A_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <TCA9548A_SelectSingleChannel+0x46>
    }
    return TCA9548A_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <TCA9548A_DisableAllChannel>:
    }
    return 0;
}


TCA9548A_STATUS TCA9548A_DisableAllChannel(TCA9548A_HandleTypeDef *htca9548a) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
    uint8_t tmp = 0x00;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(htca9548a->I2C_channel, htca9548a->Address, &tmp, 1, 10)) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	b299      	uxth	r1, r3
 800182e:	f107 020f 	add.w	r2, r7, #15
 8001832:	230a      	movs	r3, #10
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	f002 fafc 	bl	8003e34 <HAL_I2C_Master_Transmit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <TCA9548A_DisableAllChannel+0x2e>
        return TCA9548A_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <TCA9548A_DisableAllChannel+0x30>
    }
    return TCA9548A_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <userStepperInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Initialize Stepper, Sensor, TCA, PCA
void userStepperInit() {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	StepperInit(&Step0, GPIOA, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
 8001856:	2300      	movs	r3, #0
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2320      	movs	r3, #32
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	490e      	ldr	r1, [pc, #56]	; (80018a0 <userStepperInit+0x50>)
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <userStepperInit+0x54>)
 800186a:	f7ff febb 	bl	80015e4 <StepperInit>
	StepperInit(&Step1, GPIOC, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
 800186e:	2300      	movs	r3, #0
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2320      	movs	r3, #32
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <userStepperInit+0x58>)
 8001880:	480a      	ldr	r0, [pc, #40]	; (80018ac <userStepperInit+0x5c>)
 8001882:	f7ff feaf 	bl	80015e4 <StepperInit>
	StepperInit(&Step2, GPIOC, GPIO_PIN_7, GPIO_PIN_6, 32, 0);
 8001886:	2300      	movs	r3, #0
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2320      	movs	r3, #32
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	4905      	ldr	r1, [pc, #20]	; (80018a8 <userStepperInit+0x58>)
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <userStepperInit+0x60>)
 8001896:	f7ff fea5 	bl	80015e4 <StepperInit>
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020000 	.word	0x40020000
 80018a4:	200004f0 	.word	0x200004f0
 80018a8:	40020800 	.word	0x40020800
 80018ac:	20000448 	.word	0x20000448
 80018b0:	200004dc 	.word	0x200004dc

080018b4 <userSensorInit>:

void userSensorInit() {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	TCA9548A_Init(&i2cHub, &hi2c1, TCA_ADDRESS);
 80018ba:	22e0      	movs	r2, #224	; 0xe0
 80018bc:	4928      	ldr	r1, [pc, #160]	; (8001960 <userSensorInit+0xac>)
 80018be:	4829      	ldr	r0, [pc, #164]	; (8001964 <userSensorInit+0xb0>)
 80018c0:	f7ff ff68 	bl	8001794 <TCA9548A_Init>
	for (uint8_t i = 0; i < NUMBER_SENSORS / 2; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e042      	b.n	8001950 <userSensorInit+0x9c>
		TCA9548A_SelectSingleChannel(&i2cHub, i);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4825      	ldr	r0, [pc, #148]	; (8001964 <userSensorInit+0xb0>)
 80018d0:	f7ff ff7b 	bl	80017ca <TCA9548A_SelectSingleChannel>
		BH1750_Init(&sensor[2 * i], &hi2c1, BH1750_ADDRESS_LOW);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <userSensorInit+0xb4>)
 80018dc:	4413      	add	r3, r2
 80018de:	2246      	movs	r2, #70	; 0x46
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <userSensorInit+0xac>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fb8a 	bl	8000ffc <BH1750_Init>
		BH1750_Init(&sensor[2 * i + 1], &hi2c1, BH1750_ADDRESS_HIGH);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	3301      	adds	r3, #1
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <userSensorInit+0xb4>)
 80018f2:	4413      	add	r3, r2
 80018f4:	22b8      	movs	r2, #184	; 0xb8
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <userSensorInit+0xac>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb7f 	bl	8000ffc <BH1750_Init>
		BH1750_PowerState(&sensor[2 * i], 1);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <userSensorInit+0xb4>)
 8001906:	4413      	add	r3, r2
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fbb2 	bl	8001074 <BH1750_PowerState>
		BH1750_PowerState(&sensor[2 * i + 1], 1);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	3301      	adds	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <userSensorInit+0xb4>)
 800191a:	4413      	add	r3, r2
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fba8 	bl	8001074 <BH1750_PowerState>
		BH1750_SetMode(&sensor[2 * i], CONTINUOUS_H_RES_MODE);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <userSensorInit+0xb4>)
 800192c:	4413      	add	r3, r2
 800192e:	2110      	movs	r1, #16
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc0f 	bl	8001154 <BH1750_SetMode>
		BH1750_SetMode(&sensor[2 * i + 1], CONTINUOUS_H_RES_MODE);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	3301      	adds	r3, #1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <userSensorInit+0xb4>)
 8001940:	4413      	add	r3, r2
 8001942:	2110      	movs	r1, #16
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc05 	bl	8001154 <BH1750_SetMode>
	for (uint8_t i = 0; i < NUMBER_SENSORS / 2; i++) {
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	3301      	adds	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b05      	cmp	r3, #5
 8001954:	d9b9      	bls.n	80018ca <userSensorInit+0x16>
	}
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000390 	.word	0x20000390
 8001964:	2000060c 	.word	0x2000060c
 8001968:	20000504 	.word	0x20000504

0800196c <userPCAInit>:

void userPCAInit() {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	PCA9685_Init(&pcaHub, &hi2c2, PCA9685_I2C_ADDRESS, 0);
 8001970:	2300      	movs	r3, #0
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <userPCAInit+0x28>)
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <userPCAInit+0x2c>)
 8001978:	f7ff fc8c 	bl	8001294 <PCA9685_Init>
	PCA9685_SetOscillatorFrequency(&pcaHub, 27000000);
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <userPCAInit+0x30>)
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <userPCAInit+0x2c>)
 8001980:	f7ff fdb6 	bl	80014f0 <PCA9685_SetOscillatorFrequency>
	PCA9685_SetPWMFreq(&pcaHub, 1600);
 8001984:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80019a0 <userPCAInit+0x34>
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <userPCAInit+0x2c>)
 800198a:	f7ff fd03 	bl	8001394 <PCA9685_SetPWMFreq>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200003e4 	.word	0x200003e4
 8001998:	2000045c 	.word	0x2000045c
 800199c:	019bfcc0 	.word	0x019bfcc0
 80019a0:	44c80000 	.word	0x44c80000

080019a4 <ManualControl>:


// CHOOSE THE MANUAL CONTROL PROGRAM (It's still under UART interrupt function)
void ManualControl() {
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	switch (dataReceived[1]) {
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <ManualControl+0xa0>)
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	3b41      	subs	r3, #65	; 0x41
 80019ae:	2b13      	cmp	r3, #19
 80019b0:	d842      	bhi.n	8001a38 <ManualControl+0x94>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <ManualControl+0x14>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	08001a19 	.word	0x08001a19
 80019bc:	08001a39 	.word	0x08001a39
 80019c0:	08001a39 	.word	0x08001a39
 80019c4:	08001a39 	.word	0x08001a39
 80019c8:	08001a39 	.word	0x08001a39
 80019cc:	08001a39 	.word	0x08001a39
 80019d0:	08001a21 	.word	0x08001a21
 80019d4:	08001a39 	.word	0x08001a39
 80019d8:	08001a11 	.word	0x08001a11
 80019dc:	08001a39 	.word	0x08001a39
 80019e0:	08001a39 	.word	0x08001a39
 80019e4:	08001a29 	.word	0x08001a29
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a39 	.word	0x08001a39
 80019f0:	08001a39 	.word	0x08001a39
 80019f4:	08001a39 	.word	0x08001a39
 80019f8:	08001a39 	.word	0x08001a39
 80019fc:	08001a31 	.word	0x08001a31
 8001a00:	08001a39 	.word	0x08001a39
 8001a04:	08001a09 	.word	0x08001a09
	case 'T':
		program = TEST_UART;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <ManualControl+0xa4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
		break;
 8001a0e:	e013      	b.n	8001a38 <ManualControl+0x94>
	case 'I':
		program = SET_INIT_COOR;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <ManualControl+0xa4>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
		break;
 8001a16:	e00f      	b.n	8001a38 <ManualControl+0x94>
	case 'A':
		program = SET_TARGET_COOR;
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <ManualControl+0xa4>)
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	701a      	strb	r2, [r3, #0]
		break;
 8001a1e:	e00b      	b.n	8001a38 <ManualControl+0x94>
	case 'G':
		program = GET_SENSOR;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <ManualControl+0xa4>)
 8001a22:	2205      	movs	r2, #5
 8001a24:	701a      	strb	r2, [r3, #0]
		break;
 8001a26:	e007      	b.n	8001a38 <ManualControl+0x94>
	case 'L':
		program = CONTROL_LED;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <ManualControl+0xa4>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	701a      	strb	r2, [r3, #0]
		break;
 8001a2e:	e003      	b.n	8001a38 <ManualControl+0x94>
	case 'R':
		program = REINITSENSOR;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <ManualControl+0xa4>)
 8001a32:	2207      	movs	r2, #7
 8001a34:	701a      	strb	r2, [r3, #0]
		break;
 8001a36:	bf00      	nop
	}
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000043c 	.word	0x2000043c
 8001a48:	200002f8 	.word	0x200002f8

08001a4c <AutoControl>:

// CHOOSE THE AUTO CONTROL PROGRAM (It's still under UART interrupt function)
void AutoControl() {
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	program = AUTO_CONTROL;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <AutoControl+0x14>)
 8001a52:	2208      	movs	r2, #8
 8001a54:	701a      	strb	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	200002f8 	.word	0x200002f8

08001a64 <HAL_UART_RxCpltCallback>:

// Select PROGRAM in UART interrupt function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_UART_RxCpltCallback+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d110      	bne.n	8001a9a <HAL_UART_RxCpltCallback+0x36>
		switch (dataReceived[0]) {
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_UART_RxCpltCallback+0x44>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b41      	cmp	r3, #65	; 0x41
 8001a7e:	d004      	beq.n	8001a8a <HAL_UART_RxCpltCallback+0x26>
 8001a80:	2b4d      	cmp	r3, #77	; 0x4d
 8001a82:	d105      	bne.n	8001a90 <HAL_UART_RxCpltCallback+0x2c>
		case 'M':
		  ManualControl();
 8001a84:	f7ff ff8e 	bl	80019a4 <ManualControl>
		  break;
 8001a88:	e002      	b.n	8001a90 <HAL_UART_RxCpltCallback+0x2c>
		case 'A':
		  AutoControl();
 8001a8a:	f7ff ffdf 	bl	8001a4c <AutoControl>
		  break;
 8001a8e:	bf00      	nop
		}
		HAL_UART_Receive_IT(huart, dataReceived, SIZE_DATA);
 8001a90:	220b      	movs	r2, #11
 8001a92:	4905      	ldr	r1, [pc, #20]	; (8001aa8 <HAL_UART_RxCpltCallback+0x44>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fd06 	bl	80064a6 <HAL_UART_Receive_IT>
	}

}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200005ac 	.word	0x200005ac
 8001aa8:	2000043c 	.word	0x2000043c

08001aac <delay_us>:

// Additions function
void delay_us(uint16_t us)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <delay_us+0x30>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001abe:	bf00      	nop
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <delay_us+0x30>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d8f8      	bhi.n	8001ac0 <delay_us+0x14>
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	20000564 	.word	0x20000564

08001ae0 <DecryptData>:

void DecryptData() {
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	info[0] = (dataReceived[2] - '0') * 100 + (dataReceived[3] - '0') * 10 + (dataReceived[4]  - '0');
 8001ae4:	4bad      	ldr	r3, [pc, #692]	; (8001d9c <DecryptData+0x2bc>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	3b30      	subs	r3, #48	; 0x30
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	0091      	lsls	r1, r2, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4ba6      	ldr	r3, [pc, #664]	; (8001d9c <DecryptData+0x2bc>)
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	3b30      	subs	r3, #48	; 0x30
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	0089      	lsls	r1, r1, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4ba1      	ldr	r3, [pc, #644]	; (8001d9c <DecryptData+0x2bc>)
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b30      	subs	r3, #48	; 0x30
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <DecryptData+0x2c0>)
 8001b26:	801a      	strh	r2, [r3, #0]
	info[1] = (dataReceived[5] - '0') * 100 + (dataReceived[6] - '0') * 10 + (dataReceived[7]  - '0');
 8001b28:	4b9c      	ldr	r3, [pc, #624]	; (8001d9c <DecryptData+0x2bc>)
 8001b2a:	795b      	ldrb	r3, [r3, #5]
 8001b2c:	3b30      	subs	r3, #48	; 0x30
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	0091      	lsls	r1, r2, #2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b95      	ldr	r3, [pc, #596]	; (8001d9c <DecryptData+0x2bc>)
 8001b46:	799b      	ldrb	r3, [r3, #6]
 8001b48:	3b30      	subs	r3, #48	; 0x30
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	0089      	lsls	r1, r1, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b90      	ldr	r3, [pc, #576]	; (8001d9c <DecryptData+0x2bc>)
 8001b5c:	79db      	ldrb	r3, [r3, #7]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b30      	subs	r3, #48	; 0x30
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b8d      	ldr	r3, [pc, #564]	; (8001da0 <DecryptData+0x2c0>)
 8001b6a:	805a      	strh	r2, [r3, #2]
	info[2] = (dataReceived[8] - '0') * 100 + (dataReceived[9] - '0') * 10 + (dataReceived[10] - '0');
 8001b6c:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <DecryptData+0x2bc>)
 8001b6e:	7a1b      	ldrb	r3, [r3, #8]
 8001b70:	3b30      	subs	r3, #48	; 0x30
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	0091      	lsls	r1, r2, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <DecryptData+0x2bc>)
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	3b30      	subs	r3, #48	; 0x30
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	0089      	lsls	r1, r1, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <DecryptData+0x2bc>)
 8001ba0:	7a9b      	ldrb	r3, [r3, #10]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b30      	subs	r3, #48	; 0x30
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <DecryptData+0x2c0>)
 8001bae:	809a      	strh	r2, [r3, #4]
	info[3] = (dataReceived[11] - '0') * 100 + (dataReceived[12] - '0') * 10 + (dataReceived[13] - '0');
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <DecryptData+0x2bc>)
 8001bb2:	7adb      	ldrb	r3, [r3, #11]
 8001bb4:	3b30      	subs	r3, #48	; 0x30
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	0091      	lsls	r1, r2, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <DecryptData+0x2bc>)
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	3b30      	subs	r3, #48	; 0x30
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	0089      	lsls	r1, r1, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <DecryptData+0x2bc>)
 8001be4:	7b5b      	ldrb	r3, [r3, #13]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b30      	subs	r3, #48	; 0x30
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <DecryptData+0x2c0>)
 8001bf2:	80da      	strh	r2, [r3, #6]
	info[4] = (dataReceived[14] - '0') * 100 + (dataReceived[15] - '0') * 10 + (dataReceived[16] - '0');
 8001bf4:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <DecryptData+0x2bc>)
 8001bf6:	7b9b      	ldrb	r3, [r3, #14]
 8001bf8:	3b30      	subs	r3, #48	; 0x30
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	461a      	mov	r2, r3
 8001c04:	0091      	lsls	r1, r2, #2
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <DecryptData+0x2bc>)
 8001c12:	7bdb      	ldrb	r3, [r3, #15]
 8001c14:	3b30      	subs	r3, #48	; 0x30
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <DecryptData+0x2bc>)
 8001c28:	7c1b      	ldrb	r3, [r3, #16]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b30      	subs	r3, #48	; 0x30
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <DecryptData+0x2c0>)
 8001c36:	811a      	strh	r2, [r3, #8]
	info[5] = (dataReceived[17] - '0') * 100 + (dataReceived[18] - '0') * 10 + (dataReceived[19] - '0');
 8001c38:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <DecryptData+0x2bc>)
 8001c3a:	7c5b      	ldrb	r3, [r3, #17]
 8001c3c:	3b30      	subs	r3, #48	; 0x30
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	461a      	mov	r2, r3
 8001c48:	0091      	lsls	r1, r2, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <DecryptData+0x2bc>)
 8001c56:	7c9b      	ldrb	r3, [r3, #18]
 8001c58:	3b30      	subs	r3, #48	; 0x30
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	0089      	lsls	r1, r1, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <DecryptData+0x2bc>)
 8001c6c:	7cdb      	ldrb	r3, [r3, #19]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b30      	subs	r3, #48	; 0x30
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <DecryptData+0x2c0>)
 8001c7a:	815a      	strh	r2, [r3, #10]
	info[6] = (dataReceived[20] - '0') * 100 + (dataReceived[21] - '0') * 10 + (dataReceived[22] - '0');
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <DecryptData+0x2bc>)
 8001c7e:	7d1b      	ldrb	r3, [r3, #20]
 8001c80:	3b30      	subs	r3, #48	; 0x30
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	0091      	lsls	r1, r2, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	460b      	mov	r3, r1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <DecryptData+0x2bc>)
 8001c9a:	7d5b      	ldrb	r3, [r3, #21]
 8001c9c:	3b30      	subs	r3, #48	; 0x30
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <DecryptData+0x2bc>)
 8001cb0:	7d9b      	ldrb	r3, [r3, #22]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b30      	subs	r3, #48	; 0x30
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <DecryptData+0x2c0>)
 8001cbe:	819a      	strh	r2, [r3, #12]
	info[7] = (dataReceived[23] - '0') * 100 + (dataReceived[24] - '0') * 10 + (dataReceived[25] - '0');
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <DecryptData+0x2bc>)
 8001cc2:	7ddb      	ldrb	r3, [r3, #23]
 8001cc4:	3b30      	subs	r3, #48	; 0x30
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	0091      	lsls	r1, r2, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <DecryptData+0x2bc>)
 8001cde:	7e1b      	ldrb	r3, [r3, #24]
 8001ce0:	3b30      	subs	r3, #48	; 0x30
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	0089      	lsls	r1, r1, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <DecryptData+0x2bc>)
 8001cf4:	7e5b      	ldrb	r3, [r3, #25]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b30      	subs	r3, #48	; 0x30
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <DecryptData+0x2c0>)
 8001d02:	81da      	strh	r2, [r3, #14]
	info[8] = (dataReceived[26] - '0') * 100 + (dataReceived[27] - '0') * 10 + (dataReceived[28] - '0');
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <DecryptData+0x2bc>)
 8001d06:	7e9b      	ldrb	r3, [r3, #26]
 8001d08:	3b30      	subs	r3, #48	; 0x30
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	0091      	lsls	r1, r2, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <DecryptData+0x2bc>)
 8001d22:	7edb      	ldrb	r3, [r3, #27]
 8001d24:	3b30      	subs	r3, #48	; 0x30
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	0089      	lsls	r1, r1, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <DecryptData+0x2bc>)
 8001d38:	7f1b      	ldrb	r3, [r3, #28]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b30      	subs	r3, #48	; 0x30
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <DecryptData+0x2c0>)
 8001d46:	821a      	strh	r2, [r3, #16]
	info[9] = (dataReceived[29] - '0') * 100 + (dataReceived[30] - '0') * 10 + (dataReceived[31] - '0');
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <DecryptData+0x2bc>)
 8001d4a:	7f5b      	ldrb	r3, [r3, #29]
 8001d4c:	3b30      	subs	r3, #48	; 0x30
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	461a      	mov	r2, r3
 8001d58:	0091      	lsls	r1, r2, #2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <DecryptData+0x2bc>)
 8001d66:	7f9b      	ldrb	r3, [r3, #30]
 8001d68:	3b30      	subs	r3, #48	; 0x30
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	0089      	lsls	r1, r1, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <DecryptData+0x2bc>)
 8001d7c:	7fdb      	ldrb	r3, [r3, #31]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b30      	subs	r3, #48	; 0x30
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <DecryptData+0x2c0>)
 8001d8a:	825a      	strh	r2, [r3, #18]
	info[10] = (dataReceived[32] - '0') * 100 + (dataReceived[33] - '0') * 10 + (dataReceived[34] - '0');
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <DecryptData+0x2bc>)
 8001d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d92:	3b30      	subs	r3, #48	; 0x30
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	e004      	b.n	8001da4 <DecryptData+0x2c4>
 8001d9a:	bf00      	nop
 8001d9c:	2000043c 	.word	0x2000043c
 8001da0:	20000358 	.word	0x20000358
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	0091      	lsls	r1, r2, #2
 8001dac:	461a      	mov	r2, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <DecryptData+0x358>)
 8001db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dbc:	3b30      	subs	r3, #48	; 0x30
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	0089      	lsls	r1, r1, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <DecryptData+0x358>)
 8001dd0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b30      	subs	r3, #48	; 0x30
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <DecryptData+0x35c>)
 8001de0:	829a      	strh	r2, [r3, #20]
	info[11] = (dataReceived[35] - '0') * 100 + (dataReceived[36] - '0') * 10 + (dataReceived[37] - '0');
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <DecryptData+0x358>)
 8001de4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001de8:	3b30      	subs	r3, #48	; 0x30
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	461a      	mov	r2, r3
 8001df4:	0091      	lsls	r1, r2, #2
 8001df6:	461a      	mov	r2, r3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <DecryptData+0x358>)
 8001e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e06:	3b30      	subs	r3, #48	; 0x30
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	0089      	lsls	r1, r1, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <DecryptData+0x358>)
 8001e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b30      	subs	r3, #48	; 0x30
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <DecryptData+0x35c>)
 8001e2a:	82da      	strh	r2, [r3, #22]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000043c 	.word	0x2000043c
 8001e3c:	20000358 	.word	0x20000358

08001e40 <keepMotorSafe>:

// Hold 3 board to avoid collision
void keepMotorSafe() {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
	uint32_t X0, X1, X2;
	X0 = Step0.TargetPulse;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <keepMotorSafe+0xc0>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	60fb      	str	r3, [r7, #12]
	X1 = Step1.TargetPulse;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <keepMotorSafe+0xc4>)
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	60bb      	str	r3, [r7, #8]
	X2 = Step2.TargetPulse;
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <keepMotorSafe+0xc8>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	607b      	str	r3, [r7, #4]

	// Step 1
	if (X1 > (STEP1_MAX * FACTOR))			X1 = STEP1_MAX * FACTOR;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001e5e:	d902      	bls.n	8001e66 <keepMotorSafe+0x26>
 8001e60:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001e64:	60bb      	str	r3, [r7, #8]
	if (X1 < (STEP1_MIN * FACTOR))			X1 = STEP1_MIN * FACTOR;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 8001e6c:	d202      	bcs.n	8001e74 <keepMotorSafe+0x34>
 8001e6e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001e72:	60bb      	str	r3, [r7, #8]

	// Step 2
	if (X2 > (STEP2_MAX * FACTOR)) 			X2 = STEP2_MAX * FACTOR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <keepMotorSafe+0xcc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <keepMotorSafe+0x40>
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <keepMotorSafe+0xcc>)
 8001e7e:	607b      	str	r3, [r7, #4]
	if (X2 < (STEP2_MIN * FACTOR))			X2 = STEP2_MIN * FACTOR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f24a 529f 	movw	r2, #42399	; 0xa59f
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d802      	bhi.n	8001e90 <keepMotorSafe+0x50>
 8001e8a:	f24a 53a0 	movw	r3, #42400	; 0xa5a0
 8001e8e:	607b      	str	r3, [r7, #4]
	if (X2 < (X1 + SAFE_DISTANCE * FACTOR)) X2 = X1 + SAFE_DISTANCE * FACTOR;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001e96:	3320      	adds	r3, #32
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d204      	bcs.n	8001ea8 <keepMotorSafe+0x68>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 8001ea4:	3320      	adds	r3, #32
 8001ea6:	607b      	str	r3, [r7, #4]

	// Step0
	if (X0 > (STEP0_MAX * FACTOR)) 			X0 = STEP0_MAX * FACTOR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f64b 0260 	movw	r2, #47200	; 0xb860
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d902      	bls.n	8001eb8 <keepMotorSafe+0x78>
 8001eb2:	f64b 0360 	movw	r3, #47200	; 0xb860
 8001eb6:	60fb      	str	r3, [r7, #12]
	if (X0 < (STEP0_MIN * FACTOR)) 			X0 = STEP0_MIN * FACTOR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f242 225f 	movw	r2, #8799	; 0x225f
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d802      	bhi.n	8001ec8 <keepMotorSafe+0x88>
 8001ec2:	f242 2360 	movw	r3, #8800	; 0x2260
 8001ec6:	60fb      	str	r3, [r7, #12]
	if (X0 > (X1 - SAFE_DISTANCE * FACTOR)) X0 = X1 - SAFE_DISTANCE * FACTOR;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f5a3 4383 	sub.w	r3, r3, #16768	; 0x4180
 8001ece:	3b20      	subs	r3, #32
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d904      	bls.n	8001ee0 <keepMotorSafe+0xa0>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f5a3 4383 	sub.w	r3, r3, #16768	; 0x4180
 8001edc:	3b20      	subs	r3, #32
 8001ede:	60fb      	str	r3, [r7, #12]

	Step0.TargetPulse = X0;
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <keepMotorSafe+0xc0>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6113      	str	r3, [r2, #16]
	Step1.TargetPulse = X1;
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <keepMotorSafe+0xc4>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	6113      	str	r3, [r2, #16]
	Step2.TargetPulse = X2;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <keepMotorSafe+0xc8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6113      	str	r3, [r2, #16]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200004f0 	.word	0x200004f0
 8001f04:	20000448 	.word	0x20000448
 8001f08:	200004dc 	.word	0x200004dc
 8001f0c:	00013ba0 	.word	0x00013ba0

08001f10 <sendInfoPWM>:
	sprintf(result, "%d", num);
	result[3] = '\n';
	HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 1000);
}

void sendInfoPWM() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	uint16_t LEDOnTime;
	for (uint8_t channel = 0; channel < NUMBER_SENSORS; channel++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	e032      	b.n	8001f82 <sendInfoPWM+0x72>
		channelON[channel] = DELAY_LED - 1;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <sendInfoPWM+0x84>)
 8001f20:	f240 1199 	movw	r1, #409	; 0x199
 8001f24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		LEDOnTime = intensity[channel] * 4096 / 1000;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <sendInfoPWM+0x88>)
 8001f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f30:	031b      	lsls	r3, r3, #12
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <sendInfoPWM+0x8c>)
 8001f34:	fb82 1203 	smull	r1, r2, r2, r3
 8001f38:	1192      	asrs	r2, r2, #6
 8001f3a:	17db      	asrs	r3, r3, #31
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	80bb      	strh	r3, [r7, #4]
		channelOFF[channel]  = (LEDOnTime + DELAY_LED > 4096
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	f640 6266 	movw	r2, #3686	; 0xe66
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d904      	bls.n	8001f54 <sendInfoPWM+0x44>
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	f6a3 6366 	subw	r3, r3, #3686	; 0xe66
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	e003      	b.n	8001f5c <sendInfoPWM+0x4c>
 8001f54:	88bb      	ldrh	r3, [r7, #4]
 8001f56:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	4910      	ldr	r1, [pc, #64]	; (8001fa0 <sendInfoPWM+0x90>)
 8001f60:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
								? LEDOnTime + DELAY_LED - 4096
								: LEDOnTime + DELAY_LED - 1);
		PCA9685_SetPWM(&pcaHub, channel, channelON[channel], channelOFF[channel]);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <sendInfoPWM+0x84>)
 8001f68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <sendInfoPWM+0x90>)
 8001f70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f74:	79f9      	ldrb	r1, [r7, #7]
 8001f76:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <sendInfoPWM+0x94>)
 8001f78:	f7ff faca 	bl	8001510 <PCA9685_SetPWM>
	for (uint8_t channel = 0; channel < NUMBER_SENSORS; channel++) {
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b0b      	cmp	r3, #11
 8001f86:	d9c9      	bls.n	8001f1c <sendInfoPWM+0xc>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000360 	.word	0x20000360
 8001f98:	200005f0 	.word	0x200005f0
 8001f9c:	10624dd3 	.word	0x10624dd3
 8001fa0:	20000464 	.word	0x20000464
 8001fa4:	2000045c 	.word	0x2000045c

08001fa8 <TestUART>:

// THE MAIN PROGRAMS
void TestUART() { // DONE
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
 8001fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb0:	2237      	movs	r2, #55	; 0x37
 8001fb2:	4904      	ldr	r1, [pc, #16]	; (8001fc4 <TestUART+0x1c>)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <TestUART+0x20>)
 8001fb6:	f004 f9e4 	bl	8006382 <HAL_UART_Transmit>
	program = IDLE;
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <TestUART+0x24>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	200005ac 	.word	0x200005ac
 8001fcc:	200002f8 	.word	0x200002f8

08001fd0 <SetInitCoorStepper>:

void SetInitCoorStepper() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	DecryptData();
 8001fd4:	f7ff fd84 	bl	8001ae0 <DecryptData>
	setCurrentPos(&Step0, info[0]);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <SetInitCoorStepper+0x44>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <SetInitCoorStepper+0x48>)
 8001fe0:	f7ff fb2e 	bl	8001640 <setCurrentPos>
	setCurrentPos(&Step1, info[1]);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <SetInitCoorStepper+0x44>)
 8001fe6:	885b      	ldrh	r3, [r3, #2]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <SetInitCoorStepper+0x4c>)
 8001fec:	f7ff fb28 	bl	8001640 <setCurrentPos>
	setCurrentPos(&Step2, info[2]);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <SetInitCoorStepper+0x44>)
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480a      	ldr	r0, [pc, #40]	; (8002020 <SetInitCoorStepper+0x50>)
 8001ff8:	f7ff fb22 	bl	8001640 <setCurrentPos>
	HAL_UART_Transmit(&huart2, InitStepperMessage, sizeof(InitStepperMessage), 1000);
 8001ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002000:	222f      	movs	r2, #47	; 0x2f
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <SetInitCoorStepper+0x54>)
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <SetInitCoorStepper+0x58>)
 8002006:	f004 f9bc 	bl	8006382 <HAL_UART_Transmit>
	program = IDLE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <SetInitCoorStepper+0x5c>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000358 	.word	0x20000358
 8002018:	200004f0 	.word	0x200004f0
 800201c:	20000448 	.word	0x20000448
 8002020:	200004dc 	.word	0x200004dc
 8002024:	20000038 	.word	0x20000038
 8002028:	200005ac 	.word	0x200005ac
 800202c:	200002f8 	.word	0x200002f8

08002030 <SetTargetCoorStepper>:

void SetTargetCoorStepper() {
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
	DecryptData();
 8002036:	f7ff fd53 	bl	8001ae0 <DecryptData>
	setTargetPos(&Step0, info[0]);
 800203a:	4b71      	ldr	r3, [pc, #452]	; (8002200 <SetTargetCoorStepper+0x1d0>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	4870      	ldr	r0, [pc, #448]	; (8002204 <SetTargetCoorStepper+0x1d4>)
 8002042:	f7ff fb1a 	bl	800167a <setTargetPos>
	setTargetPos(&Step1, info[1]);
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <SetTargetCoorStepper+0x1d0>)
 8002048:	885b      	ldrh	r3, [r3, #2]
 800204a:	4619      	mov	r1, r3
 800204c:	486e      	ldr	r0, [pc, #440]	; (8002208 <SetTargetCoorStepper+0x1d8>)
 800204e:	f7ff fb14 	bl	800167a <setTargetPos>
	setTargetPos(&Step2, info[2]);
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <SetTargetCoorStepper+0x1d0>)
 8002054:	889b      	ldrh	r3, [r3, #4]
 8002056:	4619      	mov	r1, r3
 8002058:	486c      	ldr	r0, [pc, #432]	; (800220c <SetTargetCoorStepper+0x1dc>)
 800205a:	f7ff fb0e 	bl	800167a <setTargetPos>
	keepMotorSafe();
 800205e:	f7ff feef 	bl	8001e40 <keepMotorSafe>
	uint32_t locationStep0 = Step0.TargetPulse / FACTOR;
 8002062:	4b68      	ldr	r3, [pc, #416]	; (8002204 <SetTargetCoorStepper+0x1d4>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	09db      	lsrs	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
	uint32_t locationStep1 = Step1.TargetPulse / FACTOR;
 8002070:	4b65      	ldr	r3, [pc, #404]	; (8002208 <SetTargetCoorStepper+0x1d8>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a66      	ldr	r2, [pc, #408]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	09db      	lsrs	r3, r3, #7
 800207c:	61bb      	str	r3, [r7, #24]
	uint32_t locationStep2 = Step2.TargetPulse / FACTOR;
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <SetTargetCoorStepper+0x1dc>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4a63      	ldr	r2, [pc, #396]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	09db      	lsrs	r3, r3, #7
 800208a:	617b      	str	r3, [r7, #20]
	uint8_t locationMessage[20];
	locationMessage[0] = 'T';
 800208c:	2354      	movs	r3, #84	; 0x54
 800208e:	703b      	strb	r3, [r7, #0]
	locationMessage[1] = 'a';
 8002090:	2361      	movs	r3, #97	; 0x61
 8002092:	707b      	strb	r3, [r7, #1]
	locationMessage[2] = 'r';
 8002094:	2372      	movs	r3, #114	; 0x72
 8002096:	70bb      	strb	r3, [r7, #2]
	locationMessage[3] = 'g';
 8002098:	2367      	movs	r3, #103	; 0x67
 800209a:	70fb      	strb	r3, [r7, #3]
	locationMessage[4] = 'e';
 800209c:	2365      	movs	r3, #101	; 0x65
 800209e:	713b      	strb	r3, [r7, #4]
	locationMessage[5] = 't';
 80020a0:	2374      	movs	r3, #116	; 0x74
 80020a2:	717b      	strb	r3, [r7, #5]
	locationMessage[6] = ':';
 80020a4:	233a      	movs	r3, #58	; 0x3a
 80020a6:	71bb      	strb	r3, [r7, #6]
	locationMessage[7] = ' ';
 80020a8:	2320      	movs	r3, #32
 80020aa:	71fb      	strb	r3, [r7, #7]
	// Step0
	locationMessage[10] = locationStep0 % 10 + '0';
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80020b0:	fba3 2301 	umull	r2, r3, r3, r1
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	1aca      	subs	r2, r1, r3
 80020c0:	b2d3      	uxtb	r3, r2
 80020c2:	3330      	adds	r3, #48	; 0x30
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	72bb      	strb	r3, [r7, #10]
	locationMessage[9] = locationStep0 / 10 % 10 + '0';
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4a51      	ldr	r2, [pc, #324]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	08d9      	lsrs	r1, r3, #3
 80020d2:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80020d4:	fba3 2301 	umull	r2, r3, r3, r1
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	1aca      	subs	r2, r1, r3
 80020e4:	b2d3      	uxtb	r3, r2
 80020e6:	3330      	adds	r3, #48	; 0x30
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	727b      	strb	r3, [r7, #9]
	locationMessage[8] = locationStep0 / 100 % 10 + '0';
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4a49      	ldr	r2, [pc, #292]	; (8002214 <SetTargetCoorStepper+0x1e4>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	0959      	lsrs	r1, r3, #5
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80020f8:	fba3 2301 	umull	r2, r3, r3, r1
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	1aca      	subs	r2, r1, r3
 8002108:	b2d3      	uxtb	r3, r2
 800210a:	3330      	adds	r3, #48	; 0x30
 800210c:	b2db      	uxtb	r3, r3
 800210e:	723b      	strb	r3, [r7, #8]
	locationMessage[11] = ' ';
 8002110:	2320      	movs	r3, #32
 8002112:	72fb      	strb	r3, [r7, #11]
	// Step1
	locationMessage[14] = locationStep1 % 10 + '0';
 8002114:	69b9      	ldr	r1, [r7, #24]
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002118:	fba3 2301 	umull	r2, r3, r3, r1
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	1aca      	subs	r2, r1, r3
 8002128:	b2d3      	uxtb	r3, r2
 800212a:	3330      	adds	r3, #48	; 0x30
 800212c:	b2db      	uxtb	r3, r3
 800212e:	73bb      	strb	r3, [r7, #14]
	locationMessage[13] = locationStep1 / 10 % 10 + '0';
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4a37      	ldr	r2, [pc, #220]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	08d9      	lsrs	r1, r3, #3
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 800213c:	fba3 2301 	umull	r2, r3, r3, r1
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	1aca      	subs	r2, r1, r3
 800214c:	b2d3      	uxtb	r3, r2
 800214e:	3330      	adds	r3, #48	; 0x30
 8002150:	b2db      	uxtb	r3, r3
 8002152:	737b      	strb	r3, [r7, #13]
	locationMessage[12] = locationStep1 / 100 % 10 + '0';
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <SetTargetCoorStepper+0x1e4>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	0959      	lsrs	r1, r3, #5
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002160:	fba3 2301 	umull	r2, r3, r3, r1
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	1aca      	subs	r2, r1, r3
 8002170:	b2d3      	uxtb	r3, r2
 8002172:	3330      	adds	r3, #48	; 0x30
 8002174:	b2db      	uxtb	r3, r3
 8002176:	733b      	strb	r3, [r7, #12]
	locationMessage[15] = ' ';
 8002178:	2320      	movs	r3, #32
 800217a:	73fb      	strb	r3, [r7, #15]
	// Step2
	locationMessage[18] = locationStep2 % 10 + '0';
 800217c:	6979      	ldr	r1, [r7, #20]
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 8002180:	fba3 2301 	umull	r2, r3, r3, r1
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	1aca      	subs	r2, r1, r3
 8002190:	b2d3      	uxtb	r3, r2
 8002192:	3330      	adds	r3, #48	; 0x30
 8002194:	b2db      	uxtb	r3, r3
 8002196:	74bb      	strb	r3, [r7, #18]
	locationMessage[17] = locationStep2 / 10 % 10 + '0';
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	08d9      	lsrs	r1, r3, #3
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80021a4:	fba3 2301 	umull	r2, r3, r3, r1
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	1aca      	subs	r2, r1, r3
 80021b4:	b2d3      	uxtb	r3, r2
 80021b6:	3330      	adds	r3, #48	; 0x30
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	747b      	strb	r3, [r7, #17]
	locationMessage[16] = locationStep2 / 100 % 10 + '0';
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <SetTargetCoorStepper+0x1e4>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0959      	lsrs	r1, r3, #5
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <SetTargetCoorStepper+0x1e0>)
 80021c8:	fba3 2301 	umull	r2, r3, r3, r1
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	1aca      	subs	r2, r1, r3
 80021d8:	b2d3      	uxtb	r3, r2
 80021da:	3330      	adds	r3, #48	; 0x30
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	743b      	strb	r3, [r7, #16]
	locationMessage[19] = '\n';
 80021e0:	230a      	movs	r3, #10
 80021e2:	74fb      	strb	r3, [r7, #19]

	HAL_UART_Transmit(&huart2, locationMessage, sizeof(locationMessage), 1000);
 80021e4:	4639      	mov	r1, r7
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	2214      	movs	r2, #20
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <SetTargetCoorStepper+0x1e8>)
 80021ee:	f004 f8c8 	bl	8006382 <HAL_UART_Transmit>
	program = RUN_STEPPER;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <SetTargetCoorStepper+0x1ec>)
 80021f4:	2204      	movs	r2, #4
 80021f6:	701a      	strb	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000358 	.word	0x20000358
 8002204:	200004f0 	.word	0x200004f0
 8002208:	20000448 	.word	0x20000448
 800220c:	200004dc 	.word	0x200004dc
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	51eb851f 	.word	0x51eb851f
 8002218:	200005ac 	.word	0x200005ac
 800221c:	200002f8 	.word	0x200002f8

08002220 <RunStepper>:

void RunStepper() {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step0) == STEPPER_ERROR) flag = 1;
 800222a:	4814      	ldr	r0, [pc, #80]	; (800227c <RunStepper+0x5c>)
 800222c:	f7ff fa5c 	bl	80016e8 <runToTarget>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <RunStepper+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step1) == STEPPER_ERROR) flag = 1;
 800223a:	4811      	ldr	r0, [pc, #68]	; (8002280 <RunStepper+0x60>)
 800223c:	f7ff fa54 	bl	80016e8 <runToTarget>
 8002240:	4603      	mov	r3, r0
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <RunStepper+0x2a>
 8002246:	2301      	movs	r3, #1
 8002248:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step2) == STEPPER_ERROR) flag = 1;
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <RunStepper+0x64>)
 800224c:	f7ff fa4c 	bl	80016e8 <runToTarget>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <RunStepper+0x3a>
 8002256:	2301      	movs	r3, #1
 8002258:	71fb      	strb	r3, [r7, #7]
	if (flag == 0) {
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <RunStepper+0x54>
		HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
 8002260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002264:	2224      	movs	r2, #36	; 0x24
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <RunStepper+0x68>)
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <RunStepper+0x6c>)
 800226a:	f004 f88a 	bl	8006382 <HAL_UART_Transmit>
		program = IDLE;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <RunStepper+0x70>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
	}
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200004f0 	.word	0x200004f0
 8002280:	20000448 	.word	0x20000448
 8002284:	200004dc 	.word	0x200004dc
 8002288:	20000088 	.word	0x20000088
 800228c:	200005ac 	.word	0x200005ac
 8002290:	200002f8 	.word	0x200002f8

08002294 <GetSensor>:

void GetSensor() {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUMBER_SENSORS; i++) {
 800229a:	2300      	movs	r3, #0
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	e0b9      	b.n	8002414 <GetSensor+0x180>
		TCA9548A_SelectSingleChannel(&i2cHub, (int)(i / 2));
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	4863      	ldr	r0, [pc, #396]	; (8002438 <GetSensor+0x1a4>)
 80022aa:	f7ff fa8e 	bl	80017ca <TCA9548A_SelectSingleChannel>
		BH1750_ReadLight(&sensor[i], &dataSensor[i]);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4a62      	ldr	r2, [pc, #392]	; (800243c <GetSensor+0x1a8>)
 80022b4:	441a      	add	r2, r3
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4961      	ldr	r1, [pc, #388]	; (8002440 <GetSensor+0x1ac>)
 80022bc:	440b      	add	r3, r1
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7fe ff79 	bl	80011b8 <BH1750_ReadLight>

		dataSensorMessage[i*6 + 5] = (i < 3) ? ' ' : '\n';
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d801      	bhi.n	80022d0 <GetSensor+0x3c>
 80022cc:	2120      	movs	r1, #32
 80022ce:	e000      	b.n	80022d2 <GetSensor+0x3e>
 80022d0:	210a      	movs	r1, #10
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	3305      	adds	r3, #5
 80022de:	4a59      	ldr	r2, [pc, #356]	; (8002444 <GetSensor+0x1b0>)
 80022e0:	54d1      	strb	r1, [r2, r3]
		dataSensorMessage[i*6 + 4] = dataSensor[i] % 10 + '0';
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a56      	ldr	r2, [pc, #344]	; (8002440 <GetSensor+0x1ac>)
 80022e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <GetSensor+0x1b4>)
 80022ec:	fba3 1302 	umull	r1, r3, r3, r2
 80022f0:	08d9      	lsrs	r1, r3, #3
 80022f2:	460b      	mov	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	3304      	adds	r3, #4
 800230c:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8002310:	b2d1      	uxtb	r1, r2
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <GetSensor+0x1b0>)
 8002314:	54d1      	strb	r1, [r2, r3]
		dataSensorMessage[i*6 + 3] = dataSensor[i] / 10 % 10 + '0';
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <GetSensor+0x1ac>)
 800231a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800231e:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <GetSensor+0x1b4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b47      	ldr	r3, [pc, #284]	; (8002448 <GetSensor+0x1b4>)
 800232a:	fba3 1302 	umull	r1, r3, r3, r2
 800232e:	08d9      	lsrs	r1, r3, #3
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b29b      	uxth	r3, r3
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	3303      	adds	r3, #3
 800234a:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800234e:	b2d1      	uxtb	r1, r2
 8002350:	4a3c      	ldr	r2, [pc, #240]	; (8002444 <GetSensor+0x1b0>)
 8002352:	54d1      	strb	r1, [r2, r3]
		dataSensorMessage[i*6 + 2] = dataSensor[i] / 100 % 10 + '0';
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <GetSensor+0x1ac>)
 8002358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800235c:	4a3b      	ldr	r2, [pc, #236]	; (800244c <GetSensor+0x1b8>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <GetSensor+0x1b4>)
 8002368:	fba3 1302 	umull	r1, r3, r3, r2
 800236c:	08d9      	lsrs	r1, r3, #3
 800236e:	460b      	mov	r3, r1
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2d9      	uxtb	r1, r3
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	3302      	adds	r3, #2
 8002388:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <GetSensor+0x1b0>)
 8002390:	54d1      	strb	r1, [r2, r3]
		dataSensorMessage[i*6 + 1] = dataSensor[i] / 1000 % 10 + '0';
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	4a2a      	ldr	r2, [pc, #168]	; (8002440 <GetSensor+0x1ac>)
 8002396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800239a:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <GetSensor+0x1bc>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <GetSensor+0x1b4>)
 80023a6:	fba3 1302 	umull	r1, r3, r3, r2
 80023aa:	08d9      	lsrs	r1, r3, #3
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	3301      	adds	r3, #1
 80023c6:	f101 0230 	add.w	r2, r1, #48	; 0x30
 80023ca:	b2d1      	uxtb	r1, r2
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <GetSensor+0x1b0>)
 80023ce:	54d1      	strb	r1, [r2, r3]
		dataSensorMessage[i*6 + 0] = dataSensor[i] / 10000 % 10 + '0';
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <GetSensor+0x1ac>)
 80023d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <GetSensor+0x1c0>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	0b5b      	lsrs	r3, r3, #13
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <GetSensor+0x1b4>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	08d9      	lsrs	r1, r3, #3
 80023ea:	460b      	mov	r3, r1
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	461a      	mov	r2, r3
 8002404:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8002408:	b2d9      	uxtb	r1, r3
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <GetSensor+0x1b0>)
 800240c:	5499      	strb	r1, [r3, r2]
	for (uint8_t i = 0; i < NUMBER_SENSORS; i++) {
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	3301      	adds	r3, #1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b0b      	cmp	r3, #11
 8002418:	f67f af42 	bls.w	80022a0 <GetSensor+0xc>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)dataSensorMessage, sizeof(dataSensorMessage), 24);
 800241c:	2318      	movs	r3, #24
 800241e:	2248      	movs	r2, #72	; 0x48
 8002420:	4908      	ldr	r1, [pc, #32]	; (8002444 <GetSensor+0x1b0>)
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <GetSensor+0x1c4>)
 8002424:	f003 ffad 	bl	8006382 <HAL_UART_Transmit>
	program = IDLE;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <GetSensor+0x1c8>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000060c 	.word	0x2000060c
 800243c:	20000504 	.word	0x20000504
 8002440:	20000378 	.word	0x20000378
 8002444:	200002fc 	.word	0x200002fc
 8002448:	cccccccd 	.word	0xcccccccd
 800244c:	51eb851f 	.word	0x51eb851f
 8002450:	10624dd3 	.word	0x10624dd3
 8002454:	d1b71759 	.word	0xd1b71759
 8002458:	200005ac 	.word	0x200005ac
 800245c:	200002f8 	.word	0x200002f8

08002460 <ControlLED>:

void ControlLED() {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	DecryptData();
 8002466:	f7ff fb3b 	bl	8001ae0 <DecryptData>
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	e00a      	b.n	8002486 <ControlLED+0x26>
		intensity[i] = info[i];
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <ControlLED+0x4c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <ControlLED+0x50>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0b      	cmp	r3, #11
 800248a:	ddf1      	ble.n	8002470 <ControlLED+0x10>
	}
	sendInfoPWM();
 800248c:	f7ff fd40 	bl	8001f10 <sendInfoPWM>
	HAL_UART_Transmit(&huart2, controlLEDDone, sizeof(controlLEDDone), 10);
 8002490:	230a      	movs	r3, #10
 8002492:	221d      	movs	r2, #29
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <ControlLED+0x54>)
 8002496:	4808      	ldr	r0, [pc, #32]	; (80024b8 <ControlLED+0x58>)
 8002498:	f003 ff73 	bl	8006382 <HAL_UART_Transmit>
	program = IDLE;
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <ControlLED+0x5c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000358 	.word	0x20000358
 80024b0:	200005f0 	.word	0x200005f0
 80024b4:	200000ac 	.word	0x200000ac
 80024b8:	200005ac 	.word	0x200005ac
 80024bc:	200002f8 	.word	0x200002f8

080024c0 <calculateLedIntensity>:

void calculateLedIntensity(arm_matrix_instance_f32 *needAddValue,
						   arm_matrix_instance_f32 *ledValue) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	f5ad 6d9c 	sub.w	sp, sp, #1248	; 0x4e0
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	6018      	str	r0, [r3, #0]
 80024cc:	463b      	mov	r3, r7
 80024ce:	6019      	str	r1, [r3, #0]
	int wrongValue = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
	int wrongIndex[NUMBER_SENSORS];
	// Loai bo cac diem anh sang tu nhien lon hon 400
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80024dc:	e028      	b.n	8002530 <calculateLedIntensity+0x70>
		if (arrNeedAddValue[i] == 0) {
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <calculateLedIntensity+0x1e8>)
 80024e0:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d10e      	bne.n	8002514 <calculateLedIntensity+0x54>
			wrongValue++;
 80024f6:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80024fa:	3301      	adds	r3, #1
 80024fc:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
			wrongIndex[i] = 1;
 8002500:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800250a:	4413      	add	r3, r2
 800250c:	2201      	movs	r2, #1
 800250e:	f843 2c44 	str.w	r2, [r3, #-68]
 8002512:	e008      	b.n	8002526 <calculateLedIntensity+0x66>
		} else {
			wrongIndex[i] = 0;
 8002514:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800251e:	4413      	add	r3, r2
 8002520:	2200      	movs	r2, #0
 8002522:	f843 2c44 	str.w	r2, [r3, #-68]
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002526:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 800252a:	3301      	adds	r3, #1
 800252c:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8002530:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8002534:	2b0b      	cmp	r3, #11
 8002536:	ddd2      	ble.n	80024de <calculateLedIntensity+0x1e>
		}
	}
	do {
		float32_t copyArrFactor[NUMBER_SENSORS * NUMBER_SENSORS];
		memcpy(copyArrFactor, arrayFactor, NUMBER_SENSORS * NUMBER_SENSORS);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2290      	movs	r2, #144	; 0x90
 800253e:	495b      	ldr	r1, [pc, #364]	; (80026ac <calculateLedIntensity+0x1ec>)
 8002540:	4618      	mov	r0, r3
 8002542:	f004 ff5d 	bl	8007400 <memcpy>
		arm_matrix_instance_f32 copyMatrixFactor;
		arm_mat_init_f32(&copyMatrixFactor, NUMBER_SENSORS, 1, (float32_t *)copyArrFactor);
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	f207 4094 	addw	r0, r7, #1172	; 0x494
 800254e:	2201      	movs	r2, #1
 8002550:	210c      	movs	r1, #12
 8002552:	f004 ff27 	bl	80073a4 <arm_mat_init_f32>
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800255c:	e053      	b.n	8002606 <calculateLedIntensity+0x146>
			if (wrongIndex[i] == 1) {
 800255e:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002568:	4413      	add	r3, r2
 800256a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d144      	bne.n	80025fc <calculateLedIntensity+0x13c>
				for (int j = 0; j < NUMBER_SENSORS; j++) {
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8002578:	e026      	b.n	80025c8 <calculateLedIntensity+0x108>
					copyArrFactor[i * NUMBER_SENSORS + j] = 0.0;
 800257a:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	461a      	mov	r2, r3
 8002588:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800258c:	4413      	add	r3, r2
 800258e:	f107 020c 	add.w	r2, r7, #12
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
					copyArrFactor[j * NUMBER_SENSORS + i] = 0.0;
 800259c:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	461a      	mov	r2, r3
 80025aa:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80025ae:	4413      	add	r3, r2
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < NUMBER_SENSORS; j++) {
 80025be:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80025c2:	3301      	adds	r3, #1
 80025c4:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 80025c8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80025cc:	2b0b      	cmp	r3, #11
 80025ce:	ddd4      	ble.n	800257a <calculateLedIntensity+0xba>
				}
				copyArrFactor[i * (NUMBER_SENSORS + 1)] = 1.0;
 80025d0:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	f107 020c 	add.w	r2, r7, #12
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025ea:	601a      	str	r2, [r3, #0]
				arrNeedAddValue[i] =  0.0;
 80025ec:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <calculateLedIntensity+0x1e8>)
 80025ee:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 80025fc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8002600:	3301      	adds	r3, #1
 8002602:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8002606:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800260a:	2b0b      	cmp	r3, #11
 800260c:	dda7      	ble.n	800255e <calculateLedIntensity+0x9e>
			}
		}
		arm_matrix_instance_f32 inverseFactor;
		float32_t arrInverseFactor[NUMBER_SENSORS * NUMBER_SENSORS];
		arm_mat_init_f32(&inverseFactor, NUMBER_SENSORS, 1, (float32_t *)arrInverseFactor);
 800260e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002612:	f207 408c 	addw	r0, r7, #1164	; 0x48c
 8002616:	2201      	movs	r2, #1
 8002618:	210c      	movs	r1, #12
 800261a:	f004 fec3 	bl	80073a4 <arm_mat_init_f32>
		arm_mat_inverse_f32((const arm_matrix_instance_f32 *)copyArrFactor, &inverseFactor);
 800261e:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fd6b 	bl	8007104 <arm_mat_inverse_f32>
		arm_mat_mult_f32(&inverseFactor, needAddValue, ledValue);
 800262e:	463a      	mov	r2, r7
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	f207 408c 	addw	r0, r7, #1164	; 0x48c
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	f004 fcbd 	bl	8006fb8 <arm_mat_mult_f32>
		wrongValue = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800264a:	e01e      	b.n	800268a <calculateLedIntensity+0x1ca>
			if (arrLedValue[i] < 0) {
 800264c:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <calculateLedIntensity+0x1f0>)
 800264e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	d50d      	bpl.n	8002680 <calculateLedIntensity+0x1c0>
				wrongValue++;
 8002664:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8002668:	3301      	adds	r3, #1
 800266a:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
				wrongIndex[i] = 1;
 800266e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002678:	4413      	add	r3, r2
 800267a:	2201      	movs	r2, #1
 800267c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002680:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8002684:	3301      	adds	r3, #1
 8002686:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800268a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800268e:	2b0b      	cmp	r3, #11
 8002690:	dddc      	ble.n	800264c <calculateLedIntensity+0x18c>
			}
		}
	} while (program == AUTO_CONTROL);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <calculateLedIntensity+0x1f4>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b08      	cmp	r3, #8
 8002698:	f43f af4e 	beq.w	8002538 <calculateLedIntensity+0x78>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	f507 679c 	add.w	r7, r7, #1248	; 0x4e0
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2000047c 	.word	0x2000047c
 80026ac:	0800bc78 	.word	0x0800bc78
 80026b0:	200004ac 	.word	0x200004ac
 80026b4:	200002f8 	.word	0x200002f8

080026b8 <convertLumenToPWM>:

void convertLumenToPWM() {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	intensity[0] = arrLedValue[0] / MAX_LUMEN_LED0 * 1000 / EFFICIENCY;
 80026bc:	4bb6      	ldr	r3, [pc, #728]	; (8002998 <convertLumenToPWM+0x2e0>)
 80026be:	ed93 7a00 	vldr	s14, [r3]
 80026c2:	eddf 6ab6 	vldr	s13, [pc, #728]	; 800299c <convertLumenToPWM+0x2e4>
 80026c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ca:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80029a0 <convertLumenToPWM+0x2e8>
 80026ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d2:	ee17 0a90 	vmov	r0, s15
 80026d6:	f7fd ff3f 	bl	8000558 <__aeabi_f2d>
 80026da:	a3ad      	add	r3, pc, #692	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fe f8bc 	bl	800085c <__aeabi_ddiv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7fe fa64 	bl	8000bb8 <__aeabi_d2uiz>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4bab      	ldr	r3, [pc, #684]	; (80029a4 <convertLumenToPWM+0x2ec>)
 80026f6:	801a      	strh	r2, [r3, #0]
	intensity[1] = arrLedValue[1] / MAX_LUMEN_LED1 * 1000 / EFFICIENCY;
 80026f8:	4ba7      	ldr	r3, [pc, #668]	; (8002998 <convertLumenToPWM+0x2e0>)
 80026fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80026fe:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800299c <convertLumenToPWM+0x2e4>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80029a0 <convertLumenToPWM+0x2e8>
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff21 	bl	8000558 <__aeabi_f2d>
 8002716:	a39e      	add	r3, pc, #632	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f89e 	bl	800085c <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe fa46 	bl	8000bb8 <__aeabi_d2uiz>
 800272c:	4603      	mov	r3, r0
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b9c      	ldr	r3, [pc, #624]	; (80029a4 <convertLumenToPWM+0x2ec>)
 8002732:	805a      	strh	r2, [r3, #2]
	intensity[2] = arrLedValue[2] / MAX_LUMEN_LED2 * 1000 / EFFICIENCY;
 8002734:	4b98      	ldr	r3, [pc, #608]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002736:	ed93 7a02 	vldr	s14, [r3, #8]
 800273a:	eddf 6a98 	vldr	s13, [pc, #608]	; 800299c <convertLumenToPWM+0x2e4>
 800273e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002742:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	ee17 0a90 	vmov	r0, s15
 800274e:	f7fd ff03 	bl	8000558 <__aeabi_f2d>
 8002752:	a38f      	add	r3, pc, #572	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f880 	bl	800085c <__aeabi_ddiv>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa28 	bl	8000bb8 <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <convertLumenToPWM+0x2ec>)
 800276e:	809a      	strh	r2, [r3, #4]
	intensity[3] = arrLedValue[3] / MAX_LUMEN_LED3 * 1000 / EFFICIENCY;
 8002770:	4b89      	ldr	r3, [pc, #548]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002772:	ed93 7a03 	vldr	s14, [r3, #12]
 8002776:	eddf 6a89 	vldr	s13, [pc, #548]	; 800299c <convertLumenToPWM+0x2e4>
 800277a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800277e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002786:	ee17 0a90 	vmov	r0, s15
 800278a:	f7fd fee5 	bl	8000558 <__aeabi_f2d>
 800278e:	a380      	add	r3, pc, #512	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fe f862 	bl	800085c <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe fa0a 	bl	8000bb8 <__aeabi_d2uiz>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <convertLumenToPWM+0x2ec>)
 80027aa:	80da      	strh	r2, [r3, #6]
	intensity[4] = arrLedValue[4] / MAX_LUMEN_LED4 * 1000 / EFFICIENCY;
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <convertLumenToPWM+0x2e0>)
 80027ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80027b2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 800299c <convertLumenToPWM+0x2e4>
 80027b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ba:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80029a0 <convertLumenToPWM+0x2e8>
 80027be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c2:	ee17 0a90 	vmov	r0, s15
 80027c6:	f7fd fec7 	bl	8000558 <__aeabi_f2d>
 80027ca:	a371      	add	r3, pc, #452	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fe f844 	bl	800085c <__aeabi_ddiv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f9ec 	bl	8000bb8 <__aeabi_d2uiz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <convertLumenToPWM+0x2ec>)
 80027e6:	811a      	strh	r2, [r3, #8]
	intensity[5] = arrLedValue[5] / MAX_LUMEN_LED5 * 1000 / EFFICIENCY;
 80027e8:	4b6b      	ldr	r3, [pc, #428]	; (8002998 <convertLumenToPWM+0x2e0>)
 80027ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80027ee:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800299c <convertLumenToPWM+0x2e4>
 80027f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80029a0 <convertLumenToPWM+0x2e8>
 80027fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fe:	ee17 0a90 	vmov	r0, s15
 8002802:	f7fd fea9 	bl	8000558 <__aeabi_f2d>
 8002806:	a362      	add	r3, pc, #392	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f826 	bl	800085c <__aeabi_ddiv>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe f9ce 	bl	8000bb8 <__aeabi_d2uiz>
 800281c:	4603      	mov	r3, r0
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <convertLumenToPWM+0x2ec>)
 8002822:	815a      	strh	r2, [r3, #10]
	intensity[6] = arrLedValue[6] / MAX_LUMEN_LED6 * 1000 / EFFICIENCY;
 8002824:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002826:	ed93 7a06 	vldr	s14, [r3, #24]
 800282a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800299c <convertLumenToPWM+0x2e4>
 800282e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002832:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	ee17 0a90 	vmov	r0, s15
 800283e:	f7fd fe8b 	bl	8000558 <__aeabi_f2d>
 8002842:	a353      	add	r3, pc, #332	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fe f808 	bl	800085c <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9b0 	bl	8000bb8 <__aeabi_d2uiz>
 8002858:	4603      	mov	r3, r0
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <convertLumenToPWM+0x2ec>)
 800285e:	819a      	strh	r2, [r3, #12]
	intensity[7] = arrLedValue[7] / MAX_LUMEN_LED7 * 1000 / EFFICIENCY;
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002862:	ed93 7a07 	vldr	s14, [r3, #28]
 8002866:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800299c <convertLumenToPWM+0x2e4>
 800286a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800286e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	ee17 0a90 	vmov	r0, s15
 800287a:	f7fd fe6d 	bl	8000558 <__aeabi_f2d>
 800287e:	a344      	add	r3, pc, #272	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fd ffea 	bl	800085c <__aeabi_ddiv>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f992 	bl	8000bb8 <__aeabi_d2uiz>
 8002894:	4603      	mov	r3, r0
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <convertLumenToPWM+0x2ec>)
 800289a:	81da      	strh	r2, [r3, #14]
	intensity[8] = arrLedValue[8] / MAX_LUMEN_LED8 * 1000 / EFFICIENCY;
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <convertLumenToPWM+0x2e0>)
 800289e:	ed93 7a08 	vldr	s14, [r3, #32]
 80028a2:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800299c <convertLumenToPWM+0x2e4>
 80028a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028aa:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80029a0 <convertLumenToPWM+0x2e8>
 80028ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b2:	ee17 0a90 	vmov	r0, s15
 80028b6:	f7fd fe4f 	bl	8000558 <__aeabi_f2d>
 80028ba:	a335      	add	r3, pc, #212	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd ffcc 	bl	800085c <__aeabi_ddiv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f974 	bl	8000bb8 <__aeabi_d2uiz>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <convertLumenToPWM+0x2ec>)
 80028d6:	821a      	strh	r2, [r3, #16]
	intensity[9] = arrLedValue[9] / MAX_LUMEN_LED9 * 1000 / EFFICIENCY;
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <convertLumenToPWM+0x2e0>)
 80028da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028de:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800299c <convertLumenToPWM+0x2e4>
 80028e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80029a0 <convertLumenToPWM+0x2e8>
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	ee17 0a90 	vmov	r0, s15
 80028f2:	f7fd fe31 	bl	8000558 <__aeabi_f2d>
 80028f6:	a326      	add	r3, pc, #152	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd ffae 	bl	800085c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f956 	bl	8000bb8 <__aeabi_d2uiz>
 800290c:	4603      	mov	r3, r0
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <convertLumenToPWM+0x2ec>)
 8002912:	825a      	strh	r2, [r3, #18]
	intensity[10] = arrLedValue[10] / MAX_LUMEN_LED10 * 1000 / EFFICIENCY;
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002916:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800291a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800299c <convertLumenToPWM+0x2e4>
 800291e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002922:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292a:	ee17 0a90 	vmov	r0, s15
 800292e:	f7fd fe13 	bl	8000558 <__aeabi_f2d>
 8002932:	a317      	add	r3, pc, #92	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd ff90 	bl	800085c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f938 	bl	8000bb8 <__aeabi_d2uiz>
 8002948:	4603      	mov	r3, r0
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <convertLumenToPWM+0x2ec>)
 800294e:	829a      	strh	r2, [r3, #20]
	intensity[11] = arrLedValue[11] / MAX_LUMEN_LED11 * 1000 / EFFICIENCY;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <convertLumenToPWM+0x2e0>)
 8002952:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002956:	eddf 6a11 	vldr	s13, [pc, #68]	; 800299c <convertLumenToPWM+0x2e4>
 800295a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800295e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80029a0 <convertLumenToPWM+0x2e8>
 8002962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002966:	ee17 0a90 	vmov	r0, s15
 800296a:	f7fd fdf5 	bl	8000558 <__aeabi_f2d>
 800296e:	a308      	add	r3, pc, #32	; (adr r3, 8002990 <convertLumenToPWM+0x2d8>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd ff72 	bl	800085c <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f91a 	bl	8000bb8 <__aeabi_d2uiz>
 8002984:	4603      	mov	r3, r0
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <convertLumenToPWM+0x2ec>)
 800298a:	82da      	strh	r2, [r3, #22]
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	3d70a3d7 	.word	0x3d70a3d7
 8002994:	3fefd70a 	.word	0x3fefd70a
 8002998:	200004ac 	.word	0x200004ac
 800299c:	453b8000 	.word	0x453b8000
 80029a0:	447a0000 	.word	0x447a0000
 80029a4:	200005f0 	.word	0x200005f0

080029a8 <automation>:

void automation() {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b2:	e007      	b.n	80029c4 <automation+0x1c>
		intensity[i] = 0;
 80029b4:	4a46      	ldr	r2, [pc, #280]	; (8002ad0 <automation+0x128>)
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2100      	movs	r1, #0
 80029ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUMBER_SENSORS; i++) {
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	3301      	adds	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	2b0b      	cmp	r3, #11
 80029c8:	ddf4      	ble.n	80029b4 <automation+0xc>
	}
	sendInfoPWM();
 80029ca:	f7ff faa1 	bl	8001f10 <sendInfoPWM>
	arm_matrix_instance_f32 matrixFactor;
	arm_matrix_instance_f32 needAddValue;
	arm_matrix_instance_f32 lastLedSupplied;
	arm_matrix_instance_f32 ledValue;

	arm_mat_init_f32(&matrixFactor, NUMBER_SENSORS, NUMBER_SENSORS, (float32_t *)arrayFactor);
 80029ce:	f107 001c 	add.w	r0, r7, #28
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <automation+0x12c>)
 80029d4:	220c      	movs	r2, #12
 80029d6:	210c      	movs	r1, #12
 80029d8:	f004 fce4 	bl	80073a4 <arm_mat_init_f32>
	arm_mat_init_f32(&needAddValue, NUMBER_SENSORS, 1, (float32_t *)arrNeedAddValue);
 80029dc:	f107 0014 	add.w	r0, r7, #20
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <automation+0x130>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	210c      	movs	r1, #12
 80029e6:	f004 fcdd 	bl	80073a4 <arm_mat_init_f32>
	arm_mat_init_f32(&lastLedSupplied, NUMBER_SENSORS, 1, (float32_t *)arrLastLedSupplied);
 80029ea:	f107 000c 	add.w	r0, r7, #12
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <automation+0x134>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	210c      	movs	r1, #12
 80029f4:	f004 fcd6 	bl	80073a4 <arm_mat_init_f32>
	arm_mat_init_f32(&ledValue, NUMBER_SENSORS, 1, (float32_t *)arrLedValue);
 80029f8:	1d38      	adds	r0, r7, #4
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <automation+0x138>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	210c      	movs	r1, #12
 8002a00:	f004 fcd0 	bl	80073a4 <arm_mat_init_f32>

	while (program == AUTO_CONTROL) {
 8002a04:	e05b      	b.n	8002abe <automation+0x116>
		// GET INPUT
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	e042      	b.n	8002a92 <automation+0xea>
			float32_t natureValue = (dataSensor[i] > arrLastLedSupplied[i])
 8002a0c:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <automation+0x13c>)
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <automation+0x134>)
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	edd3 7a00 	vldr	s15, [r3]
									? dataSensor[i] - arrLastLedSupplied[i] : 0;
 8002a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	dd10      	ble.n	8002a54 <automation+0xac>
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <automation+0x13c>)
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a42:	4a26      	ldr	r2, [pc, #152]	; (8002adc <automation+0x134>)
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a52:	e001      	b.n	8002a58 <automation+0xb0>
 8002a54:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002ae8 <automation+0x140>
			float32_t natureValue = (dataSensor[i] > arrLastLedSupplied[i])
 8002a58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			arrNeedAddValue[i] = (DESIRE_LUX > natureValue)
									? DESIRE_LUX - natureValue : 0;
 8002a5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a60:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002aec <automation+0x144>
 8002a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	d506      	bpl.n	8002a7c <automation+0xd4>
 8002a6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002aec <automation+0x144>
 8002a72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7a:	e001      	b.n	8002a80 <automation+0xd8>
 8002a7c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8002ae8 <automation+0x140>
			arrNeedAddValue[i] = (DESIRE_LUX > natureValue)
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <automation+0x130>)
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < NUMBER_SENSORS; i++) {
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	3301      	adds	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a94:	2b0b      	cmp	r3, #11
 8002a96:	ddb9      	ble.n	8002a0c <automation+0x64>
		}

		calculateLedIntensity(&needAddValue, &ledValue);
 8002a98:	1d3a      	adds	r2, r7, #4
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fd0d 	bl	80024c0 <calculateLedIntensity>
		arm_mat_mult_f32(&matrixFactor, &ledValue, &lastLedSupplied);
 8002aa6:	f107 020c 	add.w	r2, r7, #12
 8002aaa:	1d39      	adds	r1, r7, #4
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fa81 	bl	8006fb8 <arm_mat_mult_f32>
		convertLumenToPWM();
 8002ab6:	f7ff fdff 	bl	80026b8 <convertLumenToPWM>
		sendInfoPWM();
 8002aba:	f7ff fa29 	bl	8001f10 <sendInfoPWM>
	while (program == AUTO_CONTROL) {
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <automation+0x148>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d09f      	beq.n	8002a06 <automation+0x5e>

	}
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200005f0 	.word	0x200005f0
 8002ad4:	0800bc78 	.word	0x0800bc78
 8002ad8:	2000047c 	.word	0x2000047c
 8002adc:	200002c8 	.word	0x200002c8
 8002ae0:	200004ac 	.word	0x200004ac
 8002ae4:	20000378 	.word	0x20000378
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	43c80000 	.word	0x43c80000
 8002af0:	200002f8 	.word	0x200002f8

08002af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af8:	f000 fc80 	bl	80033fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002afc:	f000 f86c 	bl	8002bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b00:	f000 f9a4 	bl	8002e4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b04:	f000 f8d0 	bl	8002ca8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b08:	f000 f8fc 	bl	8002d04 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002b0c:	f000 f928 	bl	8002d60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002b10:	f000 f972 	bl	8002df8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002b14:	482a      	ldr	r0, [pc, #168]	; (8002bc0 <main+0xcc>)
 8002b16:	f003 f941 	bl	8005d9c <HAL_TIM_Base_Start>

  HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	2237      	movs	r2, #55	; 0x37
 8002b20:	4928      	ldr	r1, [pc, #160]	; (8002bc4 <main+0xd0>)
 8002b22:	4829      	ldr	r0, [pc, #164]	; (8002bc8 <main+0xd4>)
 8002b24:	f003 fc2d 	bl	8006382 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, dataReceived, SIZE_DATA);
 8002b28:	220b      	movs	r2, #11
 8002b2a:	4928      	ldr	r1, [pc, #160]	; (8002bcc <main+0xd8>)
 8002b2c:	4826      	ldr	r0, [pc, #152]	; (8002bc8 <main+0xd4>)
 8002b2e:	f003 fcba 	bl	80064a6 <HAL_UART_Receive_IT>

  // User Init
  userStepperInit();
 8002b32:	f7fe fe8d 	bl	8001850 <userStepperInit>
  userSensorInit();
 8002b36:	f7fe febd 	bl	80018b4 <userSensorInit>
  userPCAInit();
 8002b3a:	f7fe ff17 	bl	800196c <userPCAInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (program == TEST_UART) {
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <main+0xdc>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <main+0x58>
		  TestUART();
 8002b46:	f7ff fa2f 	bl	8001fa8 <TestUART>
 8002b4a:	e7f8      	b.n	8002b3e <main+0x4a>
	  } else if (program == SET_INIT_COOR) {
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <main+0xdc>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d102      	bne.n	8002b5a <main+0x66>
		  SetInitCoorStepper();
 8002b54:	f7ff fa3c 	bl	8001fd0 <SetInitCoorStepper>
 8002b58:	e7f1      	b.n	8002b3e <main+0x4a>
	  } else if (program == SET_TARGET_COOR) {
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <main+0xdc>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d102      	bne.n	8002b68 <main+0x74>
		  SetTargetCoorStepper();
 8002b62:	f7ff fa65 	bl	8002030 <SetTargetCoorStepper>
 8002b66:	e7ea      	b.n	8002b3e <main+0x4a>
	  } else if (program == RUN_STEPPER) {
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <main+0xdc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d102      	bne.n	8002b76 <main+0x82>
		  RunStepper();
 8002b70:	f7ff fb56 	bl	8002220 <RunStepper>
 8002b74:	e7e3      	b.n	8002b3e <main+0x4a>
	  } else if (program == GET_SENSOR) {
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <main+0xdc>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d102      	bne.n	8002b84 <main+0x90>
		  GetSensor();
 8002b7e:	f7ff fb89 	bl	8002294 <GetSensor>
 8002b82:	e7dc      	b.n	8002b3e <main+0x4a>
	  } else if (program == CONTROL_LED) {
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <main+0xdc>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d102      	bne.n	8002b92 <main+0x9e>
		  ControlLED();
 8002b8c:	f7ff fc68 	bl	8002460 <ControlLED>
 8002b90:	e7d5      	b.n	8002b3e <main+0x4a>
	  } else if (program == REINITSENSOR) {
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <main+0xdc>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d10b      	bne.n	8002bb2 <main+0xbe>
		  HAL_UART_Transmit(&huart2, ReInitSensorMessage, sizeof(ReInitSensorMessage), 10);
 8002b9a:	230a      	movs	r3, #10
 8002b9c:	221e      	movs	r2, #30
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <main+0xe0>)
 8002ba0:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <main+0xd4>)
 8002ba2:	f003 fbee 	bl	8006382 <HAL_UART_Transmit>
		  userSensorInit();
 8002ba6:	f7fe fe85 	bl	80018b4 <userSensorInit>
		  program = IDLE;
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <main+0xdc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e7c5      	b.n	8002b3e <main+0x4a>
	  } else if (program == AUTO_CONTROL) {
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <main+0xdc>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d1c1      	bne.n	8002b3e <main+0x4a>
		  automation();
 8002bba:	f7ff fef5 	bl	80029a8 <automation>
	  if (program == TEST_UART) {
 8002bbe:	e7be      	b.n	8002b3e <main+0x4a>
 8002bc0:	20000564 	.word	0x20000564
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	200005ac 	.word	0x200005ac
 8002bcc:	2000043c 	.word	0x2000043c
 8002bd0:	200002f8 	.word	0x200002f8
 8002bd4:	20000068 	.word	0x20000068

08002bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b094      	sub	sp, #80	; 0x50
 8002bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bde:	f107 0320 	add.w	r3, r7, #32
 8002be2:	2230      	movs	r2, #48	; 0x30
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fc18 	bl	800741c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <SystemClock_Config+0xc8>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <SystemClock_Config+0xc8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <SystemClock_Config+0xc8>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <SystemClock_Config+0xcc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <SystemClock_Config+0xcc>)
 8002c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <SystemClock_Config+0xcc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002c4c:	2332      	movs	r3, #50	; 0x32
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c50:	2302      	movs	r3, #2
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c54:	2304      	movs	r3, #4
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c58:	f107 0320 	add.w	r3, r7, #32
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fbd9 	bl	8005414 <HAL_RCC_OscConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c68:	f000 f968 	bl	8002f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fe3c 	bl	8005904 <HAL_RCC_ClockConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002c92:	f000 f953 	bl	8002f3c <Error_Handler>
  }
}
 8002c96:	bf00      	nop
 8002c98:	3750      	adds	r7, #80	; 0x50
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000

08002ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <MX_I2C1_Init+0x54>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_I2C1_Init+0x58>)
 8002cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <MX_I2C1_Init+0x50>)
 8002ce6:	f000 ff61 	bl	8003bac <HAL_I2C_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cf0:	f000 f924 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000390 	.word	0x20000390
 8002cfc:	40005400 	.word	0x40005400
 8002d00:	000186a0 	.word	0x000186a0

08002d04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <MX_I2C2_Init+0x54>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_I2C2_Init+0x58>)
 8002d12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <MX_I2C2_Init+0x50>)
 8002d42:	f000 ff33 	bl	8003bac <HAL_I2C_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d4c:	f000 f8f6 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200003e4 	.word	0x200003e4
 8002d58:	40005800 	.word	0x40005800
 8002d5c:	000186a0 	.word	0x000186a0

08002d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	463b      	mov	r3, r7
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002d86:	2231      	movs	r2, #49	; 0x31
 8002d88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF - 1;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002d92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002da6:	f002 ffa9 	bl	8005cfc <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002db0:	f000 f8c4 	bl	8002f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dba:	f107 0308 	add.w	r3, r7, #8
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002dc2:	f003 f845 	bl	8005e50 <HAL_TIM_ConfigClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dcc:	f000 f8b6 	bl	8002f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_TIM2_Init+0x94>)
 8002dde:	f003 fa15 	bl	800620c <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002de8:	f000 f8a8 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000564 	.word	0x20000564

08002df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <MX_USART2_UART_Init+0x50>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e30:	f003 fa5a 	bl	80062e8 <HAL_UART_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e3a:	f000 f87f 	bl	8002f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200005ac 	.word	0x200005ac
 8002e48:	40004400 	.word	0x40004400

08002e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_GPIO_Init+0xe4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002ed8:	4816      	ldr	r0, [pc, #88]	; (8002f34 <MX_GPIO_Init+0xe8>)
 8002eda:	f000 fe4d 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002ee4:	4814      	ldr	r0, [pc, #80]	; (8002f38 <MX_GPIO_Init+0xec>)
 8002ee6:	f000 fe47 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002eea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	480c      	ldr	r0, [pc, #48]	; (8002f34 <MX_GPIO_Init+0xe8>)
 8002f04:	f000 fcb4 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_GPIO_Init+0xec>)
 8002f22:	f000 fca5 	bl	8003870 <HAL_GPIO_Init>

}
 8002f26:	bf00      	nop
 8002f28:	3728      	adds	r7, #40	; 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020000 	.word	0x40020000

08002f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f40:	b672      	cpsid	i
}
 8002f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <Error_Handler+0x8>
	...

08002f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <HAL_I2C_MspInit+0x108>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d12c      	bne.n	8003014 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a38      	ldr	r2, [pc, #224]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd6:	23c0      	movs	r3, #192	; 0xc0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fda:	2312      	movs	r3, #18
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	4619      	mov	r1, r3
 8002ff0:	482d      	ldr	r0, [pc, #180]	; (80030a8 <HAL_I2C_MspInit+0x110>)
 8002ff2:	f000 fc3d 	bl	8003870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003012:	e041      	b.n	8003098 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_I2C_MspInit+0x114>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d13c      	bne.n	8003098 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800303a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003040:	2312      	movs	r3, #18
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003044:	2301      	movs	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003048:	2303      	movs	r3, #3
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800304c:	2304      	movs	r3, #4
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	4619      	mov	r1, r3
 8003056:	4814      	ldr	r0, [pc, #80]	; (80030a8 <HAL_I2C_MspInit+0x110>)
 8003058:	f000 fc0a 	bl	8003870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800305c:	2308      	movs	r3, #8
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003060:	2312      	movs	r3, #18
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003068:	2303      	movs	r3, #3
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800306c:	2309      	movs	r3, #9
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	4619      	mov	r1, r3
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <HAL_I2C_MspInit+0x110>)
 8003078:	f000 fbfa 	bl	8003870 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 8003086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_I2C_MspInit+0x10c>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	3730      	adds	r7, #48	; 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40005400 	.word	0x40005400
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40005800 	.word	0x40005800

080030b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d10d      	bne.n	80030de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_TIM_Base_MspInit+0x3c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <HAL_TIM_Base_MspInit+0x3c>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_TIM_Base_MspInit+0x3c>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_UART_MspInit+0x94>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d133      	bne.n	800317a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <HAL_UART_MspInit+0x98>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_UART_MspInit+0x98>)
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_UART_MspInit+0x98>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_UART_MspInit+0x98>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_UART_MspInit+0x98>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_UART_MspInit+0x98>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800314a:	230c      	movs	r3, #12
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800315a:	2307      	movs	r3, #7
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	4809      	ldr	r0, [pc, #36]	; (800318c <HAL_UART_MspInit+0x9c>)
 8003166:	f000 fb83 	bl	8003870 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	2026      	movs	r0, #38	; 0x26
 8003170:	f000 fab5 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003174:	2026      	movs	r0, #38	; 0x26
 8003176:	f000 face 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40004400 	.word	0x40004400
 8003188:	40023800 	.word	0x40023800
 800318c:	40020000 	.word	0x40020000

08003190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003194:	e7fe      	b.n	8003194 <NMI_Handler+0x4>

08003196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319a:	e7fe      	b.n	800319a <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <MemManage_Handler+0x4>

080031a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a6:	e7fe      	b.n	80031a6 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <UsageFault_Handler+0x4>

080031ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031dc:	f000 f960 	bl	80034a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <USART2_IRQHandler+0x10>)
 80031ea:	f003 f98d 	bl	8006508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200005ac 	.word	0x200005ac

080031f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	return 1;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_kill>:

int _kill(int pid, int sig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003212:	f004 f8cb 	bl	80073ac <__errno>
 8003216:	4603      	mov	r3, r0
 8003218:	2216      	movs	r2, #22
 800321a:	601a      	str	r2, [r3, #0]
	return -1;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <_exit>:

void _exit (int status)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffe7 	bl	8003208 <_kill>
	while (1) {}		/* Make sure we hang here */
 800323a:	e7fe      	b.n	800323a <_exit+0x12>

0800323c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e00a      	b.n	8003264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800324e:	f3af 8000 	nop.w
 8003252:	4601      	mov	r1, r0
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	60ba      	str	r2, [r7, #8]
 800325a:	b2ca      	uxtb	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	dbf0      	blt.n	800324e <_read+0x12>
	}

return len;
 800326c:	687b      	ldr	r3, [r7, #4]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e009      	b.n	800329c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf1      	blt.n	8003288 <_write+0x12>
	}
	return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:

int _close(int file)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d6:	605a      	str	r2, [r3, #4]
	return 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_isatty>:

int _isatty(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	return 1;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003348:	f004 f830 	bl	80073ac <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	220c      	movs	r2, #12
 8003350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20020000 	.word	0x20020000
 8003378:	00000400 	.word	0x00000400
 800337c:	20000344 	.word	0x20000344
 8003380:	20000628 	.word	0x20000628

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033d2:	f7ff ffd7 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f003 ffef 	bl	80073b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7ff fb8b 	bl	8002af4 <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 80033ec:	0800c394 	.word	0x0800c394
  ldr r2, =_sbss
 80033f0:	200002ac 	.word	0x200002ac
  ldr r4, =_ebss
 80033f4:	20000628 	.word	0x20000628

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_Init+0x40>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_Init+0x40>)
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_Init+0x40>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 f94f 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	2000      	movs	r0, #0
 800342c:	f000 f808 	bl	8003440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fd8a 	bl	8002f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_InitTick+0x54>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_InitTick+0x58>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	fbb3 f3f1 	udiv	r3, r3, r1
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f967 	bl	8003732 <HAL_SYSTICK_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00e      	b.n	800348c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d80a      	bhi.n	800348a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003474:	2200      	movs	r2, #0
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f000 f92f 	bl	80036de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <HAL_InitTick+0x5c>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200000cc 	.word	0x200000cc
 8003498:	200000d4 	.word	0x200000d4
 800349c:	200000d0 	.word	0x200000d0

080034a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_IncTick+0x20>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_IncTick+0x24>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_IncTick+0x24>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200000d4 	.word	0x200000d4
 80034c4:	20000614 	.word	0x20000614

080034c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return uwTick;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_GetTick+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000614 	.word	0x20000614

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ffee 	bl	80034c8 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffde 	bl	80034c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200000d4 	.word	0x200000d4

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff feb6 	bl	80034c8 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d008      	beq.n	800377c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e052      	b.n	8003822 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0216 	bic.w	r2, r2, #22
 800378a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800379a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_DMA_Abort+0x62>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037cc:	e013      	b.n	80037f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ce:	f7ff fe7b 	bl	80034c8 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d90c      	bls.n	80037f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2203      	movs	r2, #3
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e015      	b.n	8003822 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e4      	bne.n	80037ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	223f      	movs	r2, #63	; 0x3f
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d004      	beq.n	8003848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e00c      	b.n	8003862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2205      	movs	r2, #5
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e159      	b.n	8003b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f040 8148 	bne.w	8003b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d005      	beq.n	80038c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d130      	bne.n	8003924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 0201 	and.w	r2, r3, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d017      	beq.n	8003960 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d123      	bne.n	80039b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	08da      	lsrs	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3208      	adds	r2, #8
 8003974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a2 	beq.w	8003b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_GPIO_Init+0x2e8>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_GPIO_Init+0x2e8>)
 8003a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a04:	6453      	str	r3, [r2, #68]	; 0x44
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_GPIO_Init+0x2e8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a12:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <HAL_GPIO_Init+0x2ec>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a49      	ldr	r2, [pc, #292]	; (8003b60 <HAL_GPIO_Init+0x2f0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d019      	beq.n	8003a72 <HAL_GPIO_Init+0x202>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_GPIO_Init+0x2f4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0x1fe>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a47      	ldr	r2, [pc, #284]	; (8003b68 <HAL_GPIO_Init+0x2f8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00d      	beq.n	8003a6a <HAL_GPIO_Init+0x1fa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a46      	ldr	r2, [pc, #280]	; (8003b6c <HAL_GPIO_Init+0x2fc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_GPIO_Init+0x1f6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a45      	ldr	r2, [pc, #276]	; (8003b70 <HAL_GPIO_Init+0x300>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_GPIO_Init+0x1f2>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	e008      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a62:	2307      	movs	r3, #7
 8003a64:	e006      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a66:	2303      	movs	r3, #3
 8003a68:	e004      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_GPIO_Init+0x204>
 8003a72:	2300      	movs	r3, #0
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f002 0203 	and.w	r2, r2, #3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	4093      	lsls	r3, r2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a84:	4935      	ldr	r1, [pc, #212]	; (8003b5c <HAL_GPIO_Init+0x2ec>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003abc:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f aea2 	bls.w	800388c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b94:	e003      	b.n	8003b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	041a      	lsls	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e12b      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff f9e0 	bl	8002f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c10:	f002 f84c 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a81      	ldr	r2, [pc, #516]	; (8003e20 <HAL_I2C_Init+0x274>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d807      	bhi.n	8003c30 <HAL_I2C_Init+0x84>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a80      	ldr	r2, [pc, #512]	; (8003e24 <HAL_I2C_Init+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e006      	b.n	8003c3e <HAL_I2C_Init+0x92>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a7d      	ldr	r2, [pc, #500]	; (8003e28 <HAL_I2C_Init+0x27c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bf94      	ite	ls
 8003c38:	2301      	movls	r3, #1
 8003c3a:	2300      	movhi	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0e7      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a78      	ldr	r2, [pc, #480]	; (8003e2c <HAL_I2C_Init+0x280>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a6a      	ldr	r2, [pc, #424]	; (8003e20 <HAL_I2C_Init+0x274>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d802      	bhi.n	8003c80 <HAL_I2C_Init+0xd4>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	e009      	b.n	8003c94 <HAL_I2C_Init+0xe8>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	4a69      	ldr	r2, [pc, #420]	; (8003e30 <HAL_I2C_Init+0x284>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	3301      	adds	r3, #1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	495c      	ldr	r1, [pc, #368]	; (8003e20 <HAL_I2C_Init+0x274>)
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d819      	bhi.n	8003ce8 <HAL_I2C_Init+0x13c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e59      	subs	r1, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc2:	1c59      	adds	r1, r3, #1
 8003cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc8:	400b      	ands	r3, r1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_I2C_Init+0x138>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e59      	subs	r1, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	e051      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e04f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <HAL_I2C_Init+0x168>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e012      	b.n	8003d3a <HAL_I2C_Init+0x18e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x196>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e022      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <HAL_I2C_Init+0x1bc>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1e58      	subs	r0, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	440b      	add	r3, r1
 8003d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6911      	ldr	r1, [r2, #16]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68d2      	ldr	r2, [r2, #12]
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	000186a0 	.word	0x000186a0
 8003e24:	001e847f 	.word	0x001e847f
 8003e28:	003d08ff 	.word	0x003d08ff
 8003e2c:	431bde83 	.word	0x431bde83
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
 8003e44:	4613      	mov	r3, r2
 8003e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff fb3e 	bl	80034c8 <HAL_GetTick>
 8003e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	f040 80e0 	bne.w	800401c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	4970      	ldr	r1, [pc, #448]	; (8004028 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f001 f8f6 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	e0d3      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x50>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0cc      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d007      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2221      	movs	r2, #33	; 0x21
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	893a      	ldrh	r2, [r7, #8]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_I2C_Master_Transmit+0x1f8>)
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eec:	8979      	ldrh	r1, [r7, #10]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fde2 	bl	8004abc <I2C_MasterRequestWrite>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08d      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f18:	e066      	b.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	6a39      	ldr	r1, [r7, #32]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f001 f970 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d11b      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x188>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6a39      	ldr	r1, [r7, #32]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f001 f960 	bl	8005286 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e01a      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d194      	bne.n	8003f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	00100002 	.word	0x00100002
 800402c:	ffff0000 	.word	0xffff0000

08004030 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	; 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	461a      	mov	r2, r3
 800403c:	460b      	mov	r3, r1
 800403e:	817b      	strh	r3, [r7, #10]
 8004040:	4613      	mov	r3, r2
 8004042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004044:	f7ff fa40 	bl	80034c8 <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	f040 820b 	bne.w	800446e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	497c      	ldr	r1, [pc, #496]	; (8004254 <HAL_I2C_Master_Receive+0x224>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fff8 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	e1fe      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2C_Master_Receive+0x50>
 800407c:	2302      	movs	r3, #2
 800407e:	e1f7      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d007      	beq.n	80040a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2222      	movs	r2, #34	; 0x22
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2210      	movs	r2, #16
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	893a      	ldrh	r2, [r7, #8]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_I2C_Master_Receive+0x228>)
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fd66 	bl	8004bc0 <I2C_MasterRequestRead>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1b8      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e18c      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	2b01      	cmp	r3, #1
 8004134:	d11b      	bne.n	800416e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e16c      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b02      	cmp	r3, #2
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	e14c      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041d4:	e138      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	2b03      	cmp	r3, #3
 80041dc:	f200 80f1 	bhi.w	80043c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d123      	bne.n	8004230 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f001 f88b 	bl	8005308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e139      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800422e:	e10b      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	2b02      	cmp	r3, #2
 8004236:	d14e      	bne.n	80042d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	4906      	ldr	r1, [pc, #24]	; (800425c <HAL_I2C_Master_Receive+0x22c>)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 ff08 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e10e      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
 8004252:	bf00      	nop
 8004254:	00100002 	.word	0x00100002
 8004258:	ffff0000 	.word	0xffff0000
 800425c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d4:	e0b8      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	4966      	ldr	r1, [pc, #408]	; (8004478 <HAL_I2C_Master_Receive+0x448>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 feb9 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0bf      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	2200      	movs	r2, #0
 800433a:	494f      	ldr	r1, [pc, #316]	; (8004478 <HAL_I2C_Master_Receive+0x448>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fe8b 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e091      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c0:	e042      	b.n	8004448 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 ff9e 	bl	8005308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e04c      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d118      	bne.n	8004448 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f aec2 	bne.w	80041d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3728      	adds	r7, #40	; 0x28
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	00010004 	.word	0x00010004

0800447c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004496:	f7ff f817 	bl	80034c8 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	f040 80d9 	bne.w	800465c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2319      	movs	r3, #25
 80044b0:	2201      	movs	r2, #1
 80044b2:	496d      	ldr	r1, [pc, #436]	; (8004668 <HAL_I2C_Mem_Write+0x1ec>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fdcf 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	e0cc      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Mem_Write+0x56>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0c5      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d007      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2221      	movs	r2, #33	; 0x21
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a3a      	ldr	r2, [r7, #32]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a4d      	ldr	r2, [pc, #308]	; (800466c <HAL_I2C_Mem_Write+0x1f0>)
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800453a:	88f8      	ldrh	r0, [r7, #6]
 800453c:	893a      	ldrh	r2, [r7, #8]
 800453e:	8979      	ldrh	r1, [r7, #10]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fc06 	bl	8004d5c <I2C_RequestMemoryWrite>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d052      	beq.n	80045fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e081      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fe50 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2b04      	cmp	r3, #4
 8004570:	d107      	bne.n	8004582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06b      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d11b      	bne.n	80045fc <HAL_I2C_Mem_Write+0x180>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1aa      	bne.n	800455a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fe3c 	bl	8005286 <I2C_WaitOnBTFFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e016      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	e000      	b.n	800465e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	00100002 	.word	0x00100002
 800466c:	ffff0000 	.word	0xffff0000

08004670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	461a      	mov	r2, r3
 800467e:	4603      	mov	r3, r0
 8004680:	817b      	strh	r3, [r7, #10]
 8004682:	460b      	mov	r3, r1
 8004684:	813b      	strh	r3, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800468a:	f7fe ff1d 	bl	80034c8 <HAL_GetTick>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b20      	cmp	r3, #32
 800469a:	f040 8208 	bne.w	8004aae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2319      	movs	r3, #25
 80046a4:	2201      	movs	r2, #1
 80046a6:	497b      	ldr	r1, [pc, #492]	; (8004894 <HAL_I2C_Mem_Read+0x224>)
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fcd5 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
 80046b6:	e1fb      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Mem_Read+0x56>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e1f4      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d007      	beq.n	80046ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800471c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a5b      	ldr	r2, [pc, #364]	; (8004898 <HAL_I2C_Mem_Read+0x228>)
 800472c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800472e:	88f8      	ldrh	r0, [r7, #6]
 8004730:	893a      	ldrh	r2, [r7, #8]
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4603      	mov	r3, r0
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fba2 	bl	8004e88 <I2C_RequestMemoryRead>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e1b0      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e184      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b01      	cmp	r3, #1
 8004784:	d11b      	bne.n	80047be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e164      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d11b      	bne.n	80047fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	e144      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004814:	e138      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	2b03      	cmp	r3, #3
 800481c:	f200 80f1 	bhi.w	8004a02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004824:	2b01      	cmp	r3, #1
 8004826:	d123      	bne.n	8004870 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fd6b 	bl	8005308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e139      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800486e:	e10b      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	2b02      	cmp	r3, #2
 8004876:	d14e      	bne.n	8004916 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2200      	movs	r2, #0
 8004880:	4906      	ldr	r1, [pc, #24]	; (800489c <HAL_I2C_Mem_Read+0x22c>)
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fbe8 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e10e      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
 8004892:	bf00      	nop
 8004894:	00100002 	.word	0x00100002
 8004898:	ffff0000 	.word	0xffff0000
 800489c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004914:	e0b8      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2200      	movs	r2, #0
 800491e:	4966      	ldr	r1, [pc, #408]	; (8004ab8 <HAL_I2C_Mem_Read+0x448>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fb99 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0bf      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2200      	movs	r2, #0
 800497a:	494f      	ldr	r1, [pc, #316]	; (8004ab8 <HAL_I2C_Mem_Read+0x448>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fb6b 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e091      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a00:	e042      	b.n	8004a88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fc7e 	bl	8005308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e04c      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d118      	bne.n	8004a88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f aec2 	bne.w	8004816 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3728      	adds	r7, #40	; 0x28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	00010004 	.word	0x00010004

08004abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d006      	beq.n	8004ae6 <I2C_MasterRequestWrite+0x2a>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d003      	beq.n	8004ae6 <I2C_MasterRequestWrite+0x2a>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae4:	d108      	bne.n	8004af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e00b      	b.n	8004b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	2b12      	cmp	r3, #18
 8004afe:	d107      	bne.n	8004b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa9b 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d103      	bne.n	8004b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e035      	b.n	8004bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b4c:	d108      	bne.n	8004b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b5c:	611a      	str	r2, [r3, #16]
 8004b5e:	e01b      	b.n	8004b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b60:	897b      	ldrh	r3, [r7, #10]
 8004b62:	11db      	asrs	r3, r3, #7
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0306 	and.w	r3, r3, #6
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f063 030f 	orn	r3, r3, #15
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	490e      	ldr	r1, [pc, #56]	; (8004bb8 <I2C_MasterRequestWrite+0xfc>)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fac1 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e010      	b.n	8004bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4907      	ldr	r1, [pc, #28]	; (8004bbc <I2C_MasterRequestWrite+0x100>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fab1 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	00010008 	.word	0x00010008
 8004bbc:	00010002 	.word	0x00010002

08004bc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004be4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d006      	beq.n	8004bfa <I2C_MasterRequestRead+0x3a>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d003      	beq.n	8004bfa <I2C_MasterRequestRead+0x3a>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf8:	d108      	bne.n	8004c0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e00b      	b.n	8004c24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	2b11      	cmp	r3, #17
 8004c12:	d107      	bne.n	8004c24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fa11 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d103      	bne.n	8004c54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e079      	b.n	8004d4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c60:	d108      	bne.n	8004c74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	e05f      	b.n	8004d34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c74:	897b      	ldrh	r3, [r7, #10]
 8004c76:	11db      	asrs	r3, r3, #7
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f003 0306 	and.w	r3, r3, #6
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f063 030f 	orn	r3, r3, #15
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4930      	ldr	r1, [pc, #192]	; (8004d54 <I2C_MasterRequestRead+0x194>)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fa37 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e054      	b.n	8004d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4929      	ldr	r1, [pc, #164]	; (8004d58 <I2C_MasterRequestRead+0x198>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fa27 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e044      	b.n	8004d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f9af 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0e:	d103      	bne.n	8004d18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e017      	b.n	8004d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d1c:	897b      	ldrh	r3, [r7, #10]
 8004d1e:	11db      	asrs	r3, r3, #7
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f063 030e 	orn	r3, r3, #14
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4907      	ldr	r1, [pc, #28]	; (8004d58 <I2C_MasterRequestRead+0x198>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f9e3 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	00010008 	.word	0x00010008
 8004d58:	00010002 	.word	0x00010002

08004d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	817b      	strh	r3, [r7, #10]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	813b      	strh	r3, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f960 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dac:	d103      	bne.n	8004db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e05f      	b.n	8004e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	492d      	ldr	r1, [pc, #180]	; (8004e84 <I2C_RequestMemoryWrite+0x128>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f998 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e04c      	b.n	8004e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	6a39      	ldr	r1, [r7, #32]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fa02 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d107      	bne.n	8004e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e02b      	b.n	8004e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e28:	893b      	ldrh	r3, [r7, #8]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	611a      	str	r2, [r3, #16]
 8004e32:	e021      	b.n	8004e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f9dc 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e005      	b.n	8004e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e6e:	893b      	ldrh	r3, [r7, #8]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	00010002 	.word	0x00010002

08004e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f8c2 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d103      	bne.n	8004ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0aa      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	4952      	ldr	r1, [pc, #328]	; (8005054 <I2C_RequestMemoryRead+0x1cc>)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f8fa 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e097      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	6a39      	ldr	r1, [r7, #32]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f964 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d107      	bne.n	8004f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e076      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f64:	893b      	ldrh	r3, [r7, #8]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	611a      	str	r2, [r3, #16]
 8004f6e:	e021      	b.n	8004fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	6a39      	ldr	r1, [r7, #32]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f93e 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d107      	bne.n	8004fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e050      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004faa:	893b      	ldrh	r3, [r7, #8]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	6a39      	ldr	r1, [r7, #32]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f923 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00d      	beq.n	8004fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d107      	bne.n	8004fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e035      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f82b 	bl	8005058 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	d103      	bne.n	8005020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e013      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	4906      	ldr	r1, [pc, #24]	; (8005054 <I2C_RequestMemoryRead+0x1cc>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f863 	bl	8005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	00010002 	.word	0x00010002

08005058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005068:	e025      	b.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d021      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fe fa29 	bl	80034c8 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d116      	bne.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e023      	b.n	80050fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10d      	bne.n	80050dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	43da      	mvns	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	e00c      	b.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d0b6      	beq.n	800506a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005114:	e051      	b.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d123      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800513e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f043 0204 	orr.w	r2, r3, #4
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e046      	b.n	80051fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d021      	beq.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fe f9a7 	bl	80034c8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e020      	b.n	80051fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10c      	bne.n	80051de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	43da      	mvns	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	e00b      	b.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d18d      	bne.n	8005116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005210:	e02d      	b.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f8ce 	bl	80053b4 <I2C_IsAcknowledgeFailed>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e02d      	b.n	800527e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d021      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fe f94d 	bl	80034c8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d116      	bne.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e007      	b.n	800527e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d1ca      	bne.n	8005212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005292:	e02d      	b.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f88d 	bl	80053b4 <I2C_IsAcknowledgeFailed>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e02d      	b.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d021      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe f90c 	bl	80034c8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d116      	bne.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d1ca      	bne.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005314:	e042      	b.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b10      	cmp	r3, #16
 8005322:	d119      	bne.n	8005358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0210 	mvn.w	r2, #16
 800532c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e029      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005358:	f7fe f8b6 	bl	80034c8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d116      	bne.n	800539c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e007      	b.n	80053ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d1b5      	bne.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d11b      	bne.n	8005404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e264      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d075      	beq.n	800551e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005432:	4ba3      	ldr	r3, [pc, #652]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b04      	cmp	r3, #4
 800543c:	d00c      	beq.n	8005458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543e:	4ba0      	ldr	r3, [pc, #640]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005446:	2b08      	cmp	r3, #8
 8005448:	d112      	bne.n	8005470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544a:	4b9d      	ldr	r3, [pc, #628]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005456:	d10b      	bne.n	8005470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	4b99      	ldr	r3, [pc, #612]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d05b      	beq.n	800551c <HAL_RCC_OscConfig+0x108>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d157      	bne.n	800551c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e23f      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x74>
 800547a:	4b91      	ldr	r3, [pc, #580]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a90      	ldr	r2, [pc, #576]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e01d      	b.n	80054c4 <HAL_RCC_OscConfig+0xb0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x98>
 8005492:	4b8b      	ldr	r3, [pc, #556]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a8a      	ldr	r2, [pc, #552]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a87      	ldr	r2, [pc, #540]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e00b      	b.n	80054c4 <HAL_RCC_OscConfig+0xb0>
 80054ac:	4b84      	ldr	r3, [pc, #528]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a83      	ldr	r2, [pc, #524]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b81      	ldr	r3, [pc, #516]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a80      	ldr	r2, [pc, #512]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd fffc 	bl	80034c8 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d4:	f7fd fff8 	bl	80034c8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	; 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e204      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b76      	ldr	r3, [pc, #472]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0xc0>
 80054f2:	e014      	b.n	800551e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fd ffe8 	bl	80034c8 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054fc:	f7fd ffe4 	bl	80034c8 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e1f0      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550e:	4b6c      	ldr	r3, [pc, #432]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0xe8>
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d063      	beq.n	80055f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005536:	4b62      	ldr	r3, [pc, #392]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553e:	2b08      	cmp	r3, #8
 8005540:	d11c      	bne.n	800557c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005542:	4b5f      	ldr	r3, [pc, #380]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554e:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_RCC_OscConfig+0x152>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e1c4      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005566:	4b56      	ldr	r3, [pc, #344]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4952      	ldr	r1, [pc, #328]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800557a:	e03a      	b.n	80055f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005584:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <HAL_RCC_OscConfig+0x2b0>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558a:	f7fd ff9d 	bl	80034c8 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005592:	f7fd ff99 	bl	80034c8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1a5      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a4:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b0:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4940      	ldr	r1, [pc, #256]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]
 80055c4:	e015      	b.n	80055f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCC_OscConfig+0x2b0>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fd ff7c 	bl	80034c8 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d4:	f7fd ff78 	bl	80034c8 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e184      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d030      	beq.n	8005660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d016      	beq.n	8005634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005606:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <HAL_RCC_OscConfig+0x2b4>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fd ff5c 	bl	80034c8 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005614:	f7fd ff58 	bl	80034c8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e164      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x200>
 8005632:	e015      	b.n	8005660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_RCC_OscConfig+0x2b4>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fd ff45 	bl	80034c8 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005642:	f7fd ff41 	bl	80034c8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e14d      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80a0 	beq.w	80057ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568c:	6413      	str	r3, [r2, #64]	; 0x40
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x2b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d121      	bne.n	80056ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <HAL_RCC_OscConfig+0x2b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a07      	ldr	r2, [pc, #28]	; (80056cc <HAL_RCC_OscConfig+0x2b8>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b6:	f7fd ff07 	bl	80034c8 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	e011      	b.n	80056e2 <HAL_RCC_OscConfig+0x2ce>
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	42470000 	.word	0x42470000
 80056c8:	42470e80 	.word	0x42470e80
 80056cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d0:	f7fd fefa 	bl	80034c8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e106      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b85      	ldr	r3, [pc, #532]	; (80058f8 <HAL_RCC_OscConfig+0x4e4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d106      	bne.n	8005704 <HAL_RCC_OscConfig+0x2f0>
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	4a80      	ldr	r2, [pc, #512]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
 8005702:	e01c      	b.n	800573e <HAL_RCC_OscConfig+0x32a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b05      	cmp	r3, #5
 800570a:	d10c      	bne.n	8005726 <HAL_RCC_OscConfig+0x312>
 800570c:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	4a7a      	ldr	r2, [pc, #488]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	6713      	str	r3, [r2, #112]	; 0x70
 8005718:	4b78      	ldr	r3, [pc, #480]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a77      	ldr	r2, [pc, #476]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
 8005724:	e00b      	b.n	800573e <HAL_RCC_OscConfig+0x32a>
 8005726:	4b75      	ldr	r3, [pc, #468]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	4a74      	ldr	r2, [pc, #464]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6713      	str	r3, [r2, #112]	; 0x70
 8005732:	4b72      	ldr	r3, [pc, #456]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a71      	ldr	r2, [pc, #452]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d015      	beq.n	8005772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005746:	f7fd febf 	bl	80034c8 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fd febb 	bl	80034c8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0c5      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	4b65      	ldr	r3, [pc, #404]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ee      	beq.n	800574e <HAL_RCC_OscConfig+0x33a>
 8005770:	e014      	b.n	800579c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005772:	f7fd fea9 	bl	80034c8 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fd fea5 	bl	80034c8 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0af      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005790:	4b5a      	ldr	r3, [pc, #360]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ee      	bne.n	800577a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d105      	bne.n	80057ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4a55      	ldr	r2, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80057a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 809b 	beq.w	80058ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057b8:	4b50      	ldr	r3, [pc, #320]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d05c      	beq.n	800587e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d141      	bne.n	8005850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057cc:	4b4c      	ldr	r3, [pc, #304]	; (8005900 <HAL_RCC_OscConfig+0x4ec>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd fe79 	bl	80034c8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057da:	f7fd fe75 	bl	80034c8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e081      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ec:	4b43      	ldr	r3, [pc, #268]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	019b      	lsls	r3, r3, #6
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	3b01      	subs	r3, #1
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	4937      	ldr	r1, [pc, #220]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005822:	4b37      	ldr	r3, [pc, #220]	; (8005900 <HAL_RCC_OscConfig+0x4ec>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fd fe4e 	bl	80034c8 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005830:	f7fd fe4a 	bl	80034c8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e056      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005842:	4b2e      	ldr	r3, [pc, #184]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x41c>
 800584e:	e04e      	b.n	80058ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HAL_RCC_OscConfig+0x4ec>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fd fe37 	bl	80034c8 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585e:	f7fd fe33 	bl	80034c8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e03f      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCC_OscConfig+0x44a>
 800587c:	e037      	b.n	80058ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e032      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <HAL_RCC_OscConfig+0x4e8>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d028      	beq.n	80058ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d121      	bne.n	80058ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d11a      	bne.n	80058ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058ba:	4013      	ands	r3, r2
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d111      	bne.n	80058ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	3b01      	subs	r3, #1
 80058d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d001      	beq.n	80058ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40007000 	.word	0x40007000
 80058fc:	40023800 	.word	0x40023800
 8005900:	42470060 	.word	0x42470060

08005904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0cc      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d90c      	bls.n	8005940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b63      	ldr	r3, [pc, #396]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0b8      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a58      	ldr	r2, [pc, #352]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005970:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a52      	ldr	r2, [pc, #328]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800597a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597c:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	494d      	ldr	r1, [pc, #308]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d044      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d119      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e07f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d003      	beq.n	80059c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e06f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e067      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4934      	ldr	r1, [pc, #208]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f4:	f7fd fd68 	bl	80034c8 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fd fd64 	bl	80034c8 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e04f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d20c      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e032      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a8a:	f000 f821 	bl	8005ad0 <HAL_RCC_GetSysClockFreq>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	490a      	ldr	r1, [pc, #40]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a9c:	5ccb      	ldrb	r3, [r1, r3]
 8005a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fd fcc8 	bl	8003440 <HAL_InitTick>

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023c00 	.word	0x40023c00
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	0800beb8 	.word	0x0800beb8
 8005ac8:	200000cc 	.word	0x200000cc
 8005acc:	200000d0 	.word	0x200000d0

08005ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	607b      	str	r3, [r7, #4]
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae8:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 030c 	and.w	r3, r3, #12
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d00d      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x40>
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	f200 80bd 	bhi.w	8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x34>
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d003      	beq.n	8005b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b02:	e0b7      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b06:	60bb      	str	r3, [r7, #8]
       break;
 8005b08:	e0b7      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b0a:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b0c:	60bb      	str	r3, [r7, #8]
      break;
 8005b0e:	e0b4      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b10:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04d      	beq.n	8005bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b26:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	ea02 0800 	and.w	r8, r2, r0
 8005b3e:	ea03 0901 	and.w	r9, r3, r1
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	014b      	lsls	r3, r1, #5
 8005b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b54:	0142      	lsls	r2, r0, #5
 8005b56:	4610      	mov	r0, r2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8005b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	018b      	lsls	r3, r1, #6
 8005b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b70:	0182      	lsls	r2, r0, #6
 8005b72:	1a12      	subs	r2, r2, r0
 8005b74:	eb63 0301 	sbc.w	r3, r3, r1
 8005b78:	f04f 0000 	mov.w	r0, #0
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	00d9      	lsls	r1, r3, #3
 8005b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b86:	00d0      	lsls	r0, r2, #3
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	eb12 0208 	adds.w	r2, r2, r8
 8005b90:	eb43 0309 	adc.w	r3, r3, r9
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	0259      	lsls	r1, r3, #9
 8005b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ba2:	0250      	lsls	r0, r2, #9
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	f7fb f870 	bl	8000c98 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e04a      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc2:	4b31      	ldr	r3, [pc, #196]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bd2:	f04f 0100 	mov.w	r1, #0
 8005bd6:	ea02 0400 	and.w	r4, r2, r0
 8005bda:	ea03 0501 	and.w	r5, r3, r1
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	014b      	lsls	r3, r1, #5
 8005bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bf0:	0142      	lsls	r2, r0, #5
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	1b00      	subs	r0, r0, r4
 8005bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	018b      	lsls	r3, r1, #6
 8005c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c0a:	0182      	lsls	r2, r0, #6
 8005c0c:	1a12      	subs	r2, r2, r0
 8005c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f04f 0100 	mov.w	r1, #0
 8005c1a:	00d9      	lsls	r1, r3, #3
 8005c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c20:	00d0      	lsls	r0, r2, #3
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	1912      	adds	r2, r2, r4
 8005c28:	eb45 0303 	adc.w	r3, r5, r3
 8005c2c:	f04f 0000 	mov.w	r0, #0
 8005c30:	f04f 0100 	mov.w	r1, #0
 8005c34:	0299      	lsls	r1, r3, #10
 8005c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c3a:	0290      	lsls	r0, r2, #10
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	f7fb f824 	bl	8000c98 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	60bb      	str	r3, [r7, #8]
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c76:	60bb      	str	r3, [r7, #8]
      break;
 8005c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00f42400 	.word	0x00f42400
 8005c90:	007a1200 	.word	0x007a1200

08005c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	200000cc 	.word	0x200000cc

08005cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cb0:	f7ff fff0 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0a9b      	lsrs	r3, r3, #10
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	; (8005cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800bec8 	.word	0x0800bec8

08005cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cd8:	f7ff ffdc 	bl	8005c94 <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	0800bec8 	.word	0x0800bec8

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fd f9c4 	bl	80030b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 f94c 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e03c      	b.n	8005e2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_TIM_Base_Start+0xa0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d018      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d013      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1a      	ldr	r2, [pc, #104]	; (8005e40 <HAL_TIM_Base_Start+0xa4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00e      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <HAL_TIM_Base_Start+0xa8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <HAL_TIM_Base_Start+0xac>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIM_Base_Start+0x5c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <HAL_TIM_Base_Start+0xb0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d111      	bne.n	8005e1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d010      	beq.n	8005e2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e007      	b.n	8005e2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40014000 	.word	0x40014000

08005e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_ConfigClockSource+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0b3      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x180>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea0:	d03e      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0xd0>
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea6:	f200 8087 	bhi.w	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eae:	f000 8085 	beq.w	8005fbc <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	d87f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005eb8:	2b70      	cmp	r3, #112	; 0x70
 8005eba:	d01a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0xa2>
 8005ebc:	2b70      	cmp	r3, #112	; 0x70
 8005ebe:	d87b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ec0:	2b60      	cmp	r3, #96	; 0x60
 8005ec2:	d050      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x116>
 8005ec4:	2b60      	cmp	r3, #96	; 0x60
 8005ec6:	d877      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ec8:	2b50      	cmp	r3, #80	; 0x50
 8005eca:	d03c      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xf6>
 8005ecc:	2b50      	cmp	r3, #80	; 0x50
 8005ece:	d873      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d058      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x136>
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d86f      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ed8:	2b30      	cmp	r3, #48	; 0x30
 8005eda:	d064      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x156>
 8005edc:	2b30      	cmp	r3, #48	; 0x30
 8005ede:	d86b      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d060      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x156>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d867      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x156>
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d05a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005ef0:	e062      	b.n	8005fb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f000 f963 	bl	80061cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
      break;
 8005f1e:	e04e      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6899      	ldr	r1, [r3, #8]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f000 f94c 	bl	80061cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f42:	609a      	str	r2, [r3, #8]
      break;
 8005f44:	e03b      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 f8c0 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2150      	movs	r1, #80	; 0x50
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f919 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e02b      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 f8df 	bl	8006136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2160      	movs	r1, #96	; 0x60
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f909 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e01b      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f000 f8a0 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2140      	movs	r1, #64	; 0x40
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 f8f9 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e00b      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f000 f8f0 	bl	8006196 <TIM_ITRx_SetConfig>
        break;
 8005fb6:	e002      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fb8:	bf00      	nop
 8005fba:	e000      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a34      	ldr	r2, [pc, #208]	; (80060bc <TIM_Base_SetConfig+0xe4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <TIM_Base_SetConfig+0xe8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <TIM_Base_SetConfig+0xec>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <TIM_Base_SetConfig+0xf0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a25      	ldr	r2, [pc, #148]	; (80060bc <TIM_Base_SetConfig+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01b      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d017      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <TIM_Base_SetConfig+0xe8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <TIM_Base_SetConfig+0xec>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00f      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <TIM_Base_SetConfig+0xf0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <TIM_Base_SetConfig+0xf4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <TIM_Base_SetConfig+0xf8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <TIM_Base_SetConfig+0xfc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d108      	bne.n	8006074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <TIM_Base_SetConfig+0xe4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	615a      	str	r2, [r3, #20]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 030a 	bic.w	r3, r3, #10
 8006114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006136:	b480      	push	{r7}
 8006138:	b087      	sub	sp, #28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0210 	bic.w	r2, r3, #16
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f043 0307 	orr.w	r3, r3, #7
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	021a      	lsls	r2, r3, #8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006220:	2302      	movs	r3, #2
 8006222:	e050      	b.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d013      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10c      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40014000 	.word	0x40014000

080062e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03f      	b.n	800637a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fc feee 	bl	80030f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc7b 	bl	8006c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b08a      	sub	sp, #40	; 0x28
 8006386:	af02      	add	r7, sp, #8
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d17c      	bne.n	800649c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Transmit+0x2c>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e075      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Transmit+0x3e>
 80063bc:	2302      	movs	r3, #2
 80063be:	e06e      	b.n	800649e <HAL_UART_Transmit+0x11c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	; 0x21
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d6:	f7fd f877 	bl	80034c8 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f0:	d108      	bne.n	8006404 <HAL_UART_Transmit+0x82>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e003      	b.n	800640c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006414:	e02a      	b.n	800646c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fa3d 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e036      	b.n	800649e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3302      	adds	r3, #2
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e007      	b.n	800645e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	3301      	adds	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cf      	bne.n	8006416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fa0d 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d11d      	bne.n	80064fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Receive_IT+0x26>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e016      	b.n	80064fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_UART_Receive_IT+0x38>
 80064da:	2302      	movs	r3, #2
 80064dc:	e00f      	b.n	80064fe <HAL_UART_Receive_IT+0x58>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa1e 	bl	8006934 <UART_Start_Receive_IT>
 80064f8:	4603      	mov	r3, r0
 80064fa:	e000      	b.n	80064fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064fc:	2302      	movs	r3, #2
  }
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800652c:	2300      	movs	r3, #0
 800652e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_UART_IRQHandler+0x52>
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fad1 	bl	8006afa <UART_Receive_IT>
      return;
 8006558:	e17c      	b.n	8006854 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80b1 	beq.w	80066c4 <HAL_UART_IRQHandler+0x1bc>
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_UART_IRQHandler+0x70>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80a6 	beq.w	80066c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <HAL_UART_IRQHandler+0x90>
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f043 0201 	orr.w	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_UART_IRQHandler+0xb0>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	f043 0202 	orr.w	r2, r3, #2
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_UART_IRQHandler+0xd0>
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	f043 0204 	orr.w	r2, r3, #4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00f      	beq.n	8006602 <HAL_UART_IRQHandler+0xfa>
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <HAL_UART_IRQHandler+0xee>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 811f 	beq.w	800684a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_UART_IRQHandler+0x11e>
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa6a 	bl	8006afa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_UART_IRQHandler+0x146>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d031      	beq.n	80066b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9aa 	bl	80069a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d123      	bne.n	80066aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006670:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	2b00      	cmp	r3, #0
 8006678:	d013      	beq.n	80066a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	4a77      	ldr	r2, [pc, #476]	; (800685c <HAL_UART_IRQHandler+0x354>)
 8006680:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd f8cf 	bl	800382a <HAL_DMA_Abort_IT>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	e00e      	b.n	80066c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8e6 	bl	8006874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e00a      	b.n	80066c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8e2 	bl	8006874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b0:	e006      	b.n	80066c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8de 	bl	8006874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066be:	e0c4      	b.n	800684a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	bf00      	nop
    return;
 80066c2:	e0c2      	b.n	800684a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f040 80a2 	bne.w	8006812 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 809c 	beq.w	8006812 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8096 	beq.w	8006812 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d14f      	bne.n	80067aa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006714:	8a3b      	ldrh	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8099 	beq.w	800684e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006720:	8a3a      	ldrh	r2, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	f080 8093 	bcs.w	800684e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8a3a      	ldrh	r2, [r7, #16]
 800672c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006738:	d02b      	beq.n	8006792 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006748:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006768:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0210 	bic.w	r2, r2, #16
 8006786:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	4618      	mov	r0, r3
 800678e:	f7fc ffdc 	bl	800374a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800679a:	b29b      	uxth	r3, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f870 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067a8:	e051      	b.n	800684e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d047      	beq.n	8006852 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80067c2:	8a7b      	ldrh	r3, [r7, #18]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d044      	beq.n	8006852 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067d6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0210 	bic.w	r2, r2, #16
 8006804:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006806:	8a7b      	ldrh	r3, [r7, #18]
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f83c 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006810:	e01f      	b.n	8006852 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_UART_IRQHandler+0x326>
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8ff 	bl	8006a2a <UART_Transmit_IT>
    return;
 800682c:	e012      	b.n	8006854 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <HAL_UART_IRQHandler+0x34c>
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f941 	bl	8006aca <UART_EndTransmit_IT>
    return;
 8006848:	e004      	b.n	8006854 <HAL_UART_IRQHandler+0x34c>
    return;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <HAL_UART_IRQHandler+0x34c>
      return;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_UART_IRQHandler+0x34c>
      return;
 8006852:	bf00      	nop
  }
}
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	08006a03 	.word	0x08006a03

08006860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b0:	e02c      	b.n	800690c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d028      	beq.n	800690c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068c0:	f7fc fe02 	bl	80034c8 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d21d      	bcs.n	800690c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e00f      	b.n	800692c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	429a      	cmp	r2, r3
 8006928:	d0c3      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2222      	movs	r2, #34	; 0x22
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006978:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0220 	orr.w	r2, r2, #32
 8006998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0201 	bic.w	r2, r2, #1
 80069ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0210 	bic.w	r2, r2, #16
 80069e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff ff29 	bl	8006874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b21      	cmp	r3, #33	; 0x21
 8006a3c:	d13e      	bne.n	8006abc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d114      	bne.n	8006a72 <UART_Transmit_IT+0x48>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	1c9a      	adds	r2, r3, #2
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	621a      	str	r2, [r3, #32]
 8006a70:	e008      	b.n	8006a84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6211      	str	r1, [r2, #32]
 8006a7c:	781a      	ldrb	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4619      	mov	r1, r3
 8006a92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10f      	bne.n	8006ab8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e000      	b.n	8006abe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006abc:	2302      	movs	r3, #2
  }
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff feb8 	bl	8006860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b22      	cmp	r3, #34	; 0x22
 8006b0c:	f040 8087 	bne.w	8006c1e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b18:	d117      	bne.n	8006b4a <UART_Receive_IT+0x50>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d113      	bne.n	8006b4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
 8006b48:	e026      	b.n	8006b98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5c:	d007      	beq.n	8006b6e <UART_Receive_IT+0x74>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <UART_Receive_IT+0x82>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e008      	b.n	8006b8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d136      	bne.n	8006c1a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0220 	bic.w	r2, r2, #32
 8006bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10e      	bne.n	8006c0a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0210 	bic.w	r2, r2, #16
 8006bfa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fe40 	bl	8006888 <HAL_UARTEx_RxEventCallback>
 8006c08:	e002      	b.n	8006c10 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa ff2a 	bl	8001a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e002      	b.n	8006c20 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006c1e:	2302      	movs	r3, #2
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	b09f      	sub	sp, #124	; 0x7c
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3e:	68d9      	ldr	r1, [r3, #12]
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	ea40 0301 	orr.w	r3, r0, r1
 8006c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c6c:	f021 010c 	bic.w	r1, r1, #12
 8006c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c76:	430b      	orrs	r3, r1
 8006c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c86:	6999      	ldr	r1, [r3, #24]
 8006c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	ea40 0301 	orr.w	r3, r0, r1
 8006c90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4bc5      	ldr	r3, [pc, #788]	; (8006fac <UART_SetConfig+0x384>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d004      	beq.n	8006ca6 <UART_SetConfig+0x7e>
 8006c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4bc3      	ldr	r3, [pc, #780]	; (8006fb0 <UART_SetConfig+0x388>)
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d103      	bne.n	8006cae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca6:	f7ff f815 	bl	8005cd4 <HAL_RCC_GetPCLK2Freq>
 8006caa:	6778      	str	r0, [r7, #116]	; 0x74
 8006cac:	e002      	b.n	8006cb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cae:	f7fe fffd 	bl	8005cac <HAL_RCC_GetPCLK1Freq>
 8006cb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbc:	f040 80b6 	bne.w	8006e2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cc2:	461c      	mov	r4, r3
 8006cc4:	f04f 0500 	mov.w	r5, #0
 8006cc8:	4622      	mov	r2, r4
 8006cca:	462b      	mov	r3, r5
 8006ccc:	1891      	adds	r1, r2, r2
 8006cce:	6439      	str	r1, [r7, #64]	; 0x40
 8006cd0:	415b      	adcs	r3, r3
 8006cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cd8:	1912      	adds	r2, r2, r4
 8006cda:	eb45 0303 	adc.w	r3, r5, r3
 8006cde:	f04f 0000 	mov.w	r0, #0
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	00d9      	lsls	r1, r3, #3
 8006ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cec:	00d0      	lsls	r0, r2, #3
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	1911      	adds	r1, r2, r4
 8006cf4:	6639      	str	r1, [r7, #96]	; 0x60
 8006cf6:	416b      	adcs	r3, r5
 8006cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	1891      	adds	r1, r2, r2
 8006d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d08:	415b      	adcs	r3, r3
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d14:	f7f9 ffc0 	bl	8000c98 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4ba5      	ldr	r3, [pc, #660]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	011e      	lsls	r6, r3, #4
 8006d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d28:	461c      	mov	r4, r3
 8006d2a:	f04f 0500 	mov.w	r5, #0
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	1891      	adds	r1, r2, r2
 8006d34:	6339      	str	r1, [r7, #48]	; 0x30
 8006d36:	415b      	adcs	r3, r3
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d3e:	1912      	adds	r2, r2, r4
 8006d40:	eb45 0303 	adc.w	r3, r5, r3
 8006d44:	f04f 0000 	mov.w	r0, #0
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	00d9      	lsls	r1, r3, #3
 8006d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d52:	00d0      	lsls	r0, r2, #3
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	1911      	adds	r1, r2, r4
 8006d5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d5c:	416b      	adcs	r3, r5
 8006d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	1891      	adds	r1, r2, r2
 8006d6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d6e:	415b      	adcs	r3, r3
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d7a:	f7f9 ff8d 	bl	8000c98 <__aeabi_uldivmod>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4b8c      	ldr	r3, [pc, #560]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006d84:	fba3 1302 	umull	r1, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	2164      	movs	r1, #100	; 0x64
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	3332      	adds	r3, #50	; 0x32
 8006d96:	4a87      	ldr	r2, [pc, #540]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006da4:	441e      	add	r6, r3
 8006da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da8:	4618      	mov	r0, r3
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	1894      	adds	r4, r2, r2
 8006db4:	623c      	str	r4, [r7, #32]
 8006db6:	415b      	adcs	r3, r3
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dbe:	1812      	adds	r2, r2, r0
 8006dc0:	eb41 0303 	adc.w	r3, r1, r3
 8006dc4:	f04f 0400 	mov.w	r4, #0
 8006dc8:	f04f 0500 	mov.w	r5, #0
 8006dcc:	00dd      	lsls	r5, r3, #3
 8006dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dd2:	00d4      	lsls	r4, r2, #3
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	1814      	adds	r4, r2, r0
 8006dda:	653c      	str	r4, [r7, #80]	; 0x50
 8006ddc:	414b      	adcs	r3, r1
 8006dde:	657b      	str	r3, [r7, #84]	; 0x54
 8006de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	461a      	mov	r2, r3
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	61b9      	str	r1, [r7, #24]
 8006dee:	415b      	adcs	r3, r3
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006dfa:	f7f9 ff4d 	bl	8000c98 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4b6c      	ldr	r3, [pc, #432]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006e04:	fba3 1302 	umull	r1, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	2164      	movs	r1, #100	; 0x64
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	3332      	adds	r3, #50	; 0x32
 8006e16:	4a67      	ldr	r2, [pc, #412]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 0207 	and.w	r2, r3, #7
 8006e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4432      	add	r2, r6
 8006e28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e2a:	e0b9      	b.n	8006fa0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e2e:	461c      	mov	r4, r3
 8006e30:	f04f 0500 	mov.w	r5, #0
 8006e34:	4622      	mov	r2, r4
 8006e36:	462b      	mov	r3, r5
 8006e38:	1891      	adds	r1, r2, r2
 8006e3a:	6139      	str	r1, [r7, #16]
 8006e3c:	415b      	adcs	r3, r3
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e44:	1912      	adds	r2, r2, r4
 8006e46:	eb45 0303 	adc.w	r3, r5, r3
 8006e4a:	f04f 0000 	mov.w	r0, #0
 8006e4e:	f04f 0100 	mov.w	r1, #0
 8006e52:	00d9      	lsls	r1, r3, #3
 8006e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e58:	00d0      	lsls	r0, r2, #3
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	eb12 0804 	adds.w	r8, r2, r4
 8006e62:	eb43 0905 	adc.w	r9, r3, r5
 8006e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f04f 0100 	mov.w	r1, #0
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	008b      	lsls	r3, r1, #2
 8006e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e7e:	0082      	lsls	r2, r0, #2
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 ff08 	bl	8000c98 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4b49      	ldr	r3, [pc, #292]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	011e      	lsls	r6, r3, #4
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f04f 0100 	mov.w	r1, #0
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	1894      	adds	r4, r2, r2
 8006ea4:	60bc      	str	r4, [r7, #8]
 8006ea6:	415b      	adcs	r3, r3
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eae:	1812      	adds	r2, r2, r0
 8006eb0:	eb41 0303 	adc.w	r3, r1, r3
 8006eb4:	f04f 0400 	mov.w	r4, #0
 8006eb8:	f04f 0500 	mov.w	r5, #0
 8006ebc:	00dd      	lsls	r5, r3, #3
 8006ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ec2:	00d4      	lsls	r4, r2, #3
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	1814      	adds	r4, r2, r0
 8006eca:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ecc:	414b      	adcs	r3, r1
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f04f 0100 	mov.w	r1, #0
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	008b      	lsls	r3, r1, #2
 8006ee4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ee8:	0082      	lsls	r2, r0, #2
 8006eea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006eee:	f7f9 fed3 	bl	8000c98 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4b2f      	ldr	r3, [pc, #188]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	2164      	movs	r1, #100	; 0x64
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	3332      	adds	r3, #50	; 0x32
 8006f0a:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f16:	441e      	add	r6, r3
 8006f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f04f 0100 	mov.w	r1, #0
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	1894      	adds	r4, r2, r2
 8006f26:	603c      	str	r4, [r7, #0]
 8006f28:	415b      	adcs	r3, r3
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f30:	1812      	adds	r2, r2, r0
 8006f32:	eb41 0303 	adc.w	r3, r1, r3
 8006f36:	f04f 0400 	mov.w	r4, #0
 8006f3a:	f04f 0500 	mov.w	r5, #0
 8006f3e:	00dd      	lsls	r5, r3, #3
 8006f40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f44:	00d4      	lsls	r4, r2, #3
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	eb12 0a00 	adds.w	sl, r2, r0
 8006f4e:	eb43 0b01 	adc.w	fp, r3, r1
 8006f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f04f 0100 	mov.w	r1, #0
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	008b      	lsls	r3, r1, #2
 8006f66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f6a:	0082      	lsls	r2, r0, #2
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	4659      	mov	r1, fp
 8006f70:	f7f9 fe92 	bl	8000c98 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	2164      	movs	r1, #100	; 0x64
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	3332      	adds	r3, #50	; 0x32
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <UART_SetConfig+0x38c>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4432      	add	r2, r6
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	377c      	adds	r7, #124	; 0x7c
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006faa:	bf00      	nop
 8006fac:	40011000 	.word	0x40011000
 8006fb0:	40011400 	.word	0x40011400
 8006fb4:	51eb851f 	.word	0x51eb851f

08006fb8 <arm_mat_mult_f32>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	8843      	ldrh	r3, [r0, #2]
 8006fbe:	880d      	ldrh	r5, [r1, #0]
 8006fc0:	8804      	ldrh	r4, [r0, #0]
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	429d      	cmp	r5, r3
 8006fc6:	9403      	str	r4, [sp, #12]
 8006fc8:	f040 8094 	bne.w	80070f4 <arm_mat_mult_f32+0x13c>
 8006fcc:	8813      	ldrh	r3, [r2, #0]
 8006fce:	4626      	mov	r6, r4
 8006fd0:	42b3      	cmp	r3, r6
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	f040 808e 	bne.w	80070f4 <arm_mat_mult_f32+0x13c>
 8006fd8:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8006fdc:	8863      	ldrh	r3, [r4, #2]
 8006fde:	4543      	cmp	r3, r8
 8006fe0:	f040 8088 	bne.w	80070f4 <arm_mat_mult_f32+0x13c>
 8006fe4:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 8006fe8:	f005 0303 	and.w	r3, r5, #3
 8006fec:	461a      	mov	r2, r3
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006ff4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8006ff8:	6860      	ldr	r0, [r4, #4]
 8006ffa:	9004      	str	r0, [sp, #16]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3301      	adds	r3, #1
 8007000:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8007004:	3a01      	subs	r2, #1
 8007006:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800700a:	fb03 fb0b 	mul.w	fp, r3, fp
 800700e:	00ab      	lsls	r3, r5, #2
 8007010:	b292      	uxth	r2, r2
 8007012:	9305      	str	r3, [sp, #20]
 8007014:	2300      	movs	r3, #0
 8007016:	3201      	adds	r2, #1
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	460b      	mov	r3, r1
 800701c:	684c      	ldr	r4, [r1, #4]
 800701e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8007022:	4651      	mov	r1, sl
 8007024:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8007028:	469a      	mov	sl, r3
 800702a:	9b04      	ldr	r3, [sp, #16]
 800702c:	9a02      	ldr	r2, [sp, #8]
 800702e:	2600      	movs	r6, #0
 8007030:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8007034:	f10c 0510 	add.w	r5, ip, #16
 8007038:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007100 <arm_mat_mult_f32+0x148>
 800703c:	2900      	cmp	r1, #0
 800703e:	d057      	beq.n	80070f0 <arm_mat_mult_f32+0x138>
 8007040:	f10e 0210 	add.w	r2, lr, #16
 8007044:	4623      	mov	r3, r4
 8007046:	ed93 5a00 	vldr	s10, [r3]
 800704a:	ed52 5a04 	vldr	s11, [r2, #-16]
 800704e:	ed12 7a03 	vldr	s14, [r2, #-12]
 8007052:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007056:	ed12 6a01 	vldr	s12, [r2, #-4]
 800705a:	4403      	add	r3, r0
 800705c:	ee65 5a25 	vmul.f32	s11, s10, s11
 8007060:	ed93 5a00 	vldr	s10, [r3]
 8007064:	4403      	add	r3, r0
 8007066:	ee27 7a05 	vmul.f32	s14, s14, s10
 800706a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800706e:	ed93 5a00 	vldr	s10, [r3]
 8007072:	4403      	add	r3, r0
 8007074:	ee77 5a27 	vadd.f32	s11, s14, s15
 8007078:	ee65 7a26 	vmul.f32	s15, s10, s13
 800707c:	edd3 6a00 	vldr	s13, [r3]
 8007080:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8007084:	3210      	adds	r2, #16
 8007086:	ee66 7a26 	vmul.f32	s15, s12, s13
 800708a:	42aa      	cmp	r2, r5
 800708c:	4403      	add	r3, r0
 800708e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007092:	d1d8      	bne.n	8007046 <arm_mat_mult_f32+0x8e>
 8007094:	445c      	add	r4, fp
 8007096:	4663      	mov	r3, ip
 8007098:	9a01      	ldr	r2, [sp, #4]
 800709a:	b162      	cbz	r2, 80070b6 <arm_mat_mult_f32+0xfe>
 800709c:	eb03 0209 	add.w	r2, r3, r9
 80070a0:	ecf3 6a01 	vldmia	r3!, {s13}
 80070a4:	ed94 7a00 	vldr	s14, [r4]
 80070a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80070ac:	4293      	cmp	r3, r2
 80070ae:	4404      	add	r4, r0
 80070b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070b4:	d1f4      	bne.n	80070a0 <arm_mat_mult_f32+0xe8>
 80070b6:	ece7 7a01 	vstmia	r7!, {s15}
 80070ba:	3601      	adds	r6, #1
 80070bc:	b2b6      	uxth	r6, r6
 80070be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80070c2:	45b0      	cmp	r8, r6
 80070c4:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80070c8:	d1b6      	bne.n	8007038 <arm_mat_mult_f32+0x80>
 80070ca:	9a03      	ldr	r2, [sp, #12]
 80070cc:	9c05      	ldr	r4, [sp, #20]
 80070ce:	3a01      	subs	r2, #1
 80070d0:	b292      	uxth	r2, r2
 80070d2:	4615      	mov	r5, r2
 80070d4:	9203      	str	r2, [sp, #12]
 80070d6:	9a02      	ldr	r2, [sp, #8]
 80070d8:	4442      	add	r2, r8
 80070da:	b292      	uxth	r2, r2
 80070dc:	44a6      	add	lr, r4
 80070de:	44a4      	add	ip, r4
 80070e0:	9202      	str	r2, [sp, #8]
 80070e2:	461c      	mov	r4, r3
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	d1a0      	bne.n	800702a <arm_mat_mult_f32+0x72>
 80070e8:	4628      	mov	r0, r5
 80070ea:	b007      	add	sp, #28
 80070ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	4673      	mov	r3, lr
 80070f2:	e7d1      	b.n	8007098 <arm_mat_mult_f32+0xe0>
 80070f4:	f06f 0002 	mvn.w	r0, #2
 80070f8:	b007      	add	sp, #28
 80070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fe:	bf00      	nop
 8007100:	00000000 	.word	0x00000000

08007104 <arm_mat_inverse_f32>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	8804      	ldrh	r4, [r0, #0]
 800710a:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 800710e:	454c      	cmp	r4, r9
 8007110:	b08b      	sub	sp, #44	; 0x2c
 8007112:	f040 8118 	bne.w	8007346 <arm_mat_inverse_f32+0x242>
 8007116:	880a      	ldrh	r2, [r1, #0]
 8007118:	884b      	ldrh	r3, [r1, #2]
 800711a:	4293      	cmp	r3, r2
 800711c:	f040 8113 	bne.w	8007346 <arm_mat_inverse_f32+0x242>
 8007120:	429c      	cmp	r4, r3
 8007122:	f040 8110 	bne.w	8007346 <arm_mat_inverse_f32+0x242>
 8007126:	684b      	ldr	r3, [r1, #4]
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	6843      	ldr	r3, [r0, #4]
 800712c:	9009      	str	r0, [sp, #36]	; 0x24
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	b32c      	cbz	r4, 800717e <arm_mat_inverse_f32+0x7a>
 8007132:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
 8007136:	3e01      	subs	r6, #1
 8007138:	2700      	movs	r7, #0
 800713a:	f104 38ff 	add.w	r8, r4, #4294967295
 800713e:	46a3      	mov	fp, r4
 8007140:	00b6      	lsls	r6, r6, #2
 8007142:	9d07      	ldr	r5, [sp, #28]
 8007144:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8007148:	463c      	mov	r4, r7
 800714a:	e004      	b.n	8007156 <arm_mat_inverse_f32+0x52>
 800714c:	f000 f966 	bl	800741c <memset>
 8007150:	4435      	add	r5, r6
 8007152:	3401      	adds	r4, #1
 8007154:	3e04      	subs	r6, #4
 8007156:	463a      	mov	r2, r7
 8007158:	2100      	movs	r1, #0
 800715a:	4628      	mov	r0, r5
 800715c:	b114      	cbz	r4, 8007164 <arm_mat_inverse_f32+0x60>
 800715e:	f000 f95d 	bl	800741c <memset>
 8007162:	443d      	add	r5, r7
 8007164:	f8c5 a000 	str.w	sl, [r5]
 8007168:	45a0      	cmp	r8, r4
 800716a:	f105 0504 	add.w	r5, r5, #4
 800716e:	f107 0704 	add.w	r7, r7, #4
 8007172:	4632      	mov	r2, r6
 8007174:	f04f 0100 	mov.w	r1, #0
 8007178:	4628      	mov	r0, r5
 800717a:	d1e7      	bne.n	800714c <arm_mat_inverse_f32+0x48>
 800717c:	465c      	mov	r4, fp
 800717e:	f1b9 0f00 	cmp.w	r9, #0
 8007182:	f000 80d7 	beq.w	8007334 <arm_mat_inverse_f32+0x230>
 8007186:	00a3      	lsls	r3, r4, #2
 8007188:	ea4f 0889 	mov.w	r8, r9, lsl #2
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2700      	movs	r7, #0
 8007190:	f108 0204 	add.w	r2, r8, #4
 8007194:	469c      	mov	ip, r3
 8007196:	9e02      	ldr	r6, [sp, #8]
 8007198:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800719c:	9208      	str	r2, [sp, #32]
 800719e:	1e63      	subs	r3, r4, #1
 80071a0:	9706      	str	r7, [sp, #24]
 80071a2:	9303      	str	r3, [sp, #12]
 80071a4:	464d      	mov	r5, r9
 80071a6:	42bc      	cmp	r4, r7
 80071a8:	edd6 6a00 	vldr	s13, [r6]
 80071ac:	f000 80c2 	beq.w	8007334 <arm_mat_inverse_f32+0x230>
 80071b0:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80073a0 <arm_mat_inverse_f32+0x29c>
 80071b4:	463a      	mov	r2, r7
 80071b6:	4633      	mov	r3, r6
 80071b8:	edd3 7a00 	vldr	s15, [r3]
 80071bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c4:	bfd8      	it	le
 80071c6:	eef1 7a67 	vnegle.f32	s15, s15
 80071ca:	eef4 7a47 	vcmp.f32	s15, s14
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	f102 0201 	add.w	r2, r2, #1
 80071d6:	bfc8      	it	gt
 80071d8:	eeb0 7a67 	vmovgt.f32	s14, s15
 80071dc:	4294      	cmp	r4, r2
 80071de:	4443      	add	r3, r8
 80071e0:	d1ea      	bne.n	80071b8 <arm_mat_inverse_f32+0xb4>
 80071e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	f000 80a3 	beq.w	8007334 <arm_mat_inverse_f32+0x230>
 80071ee:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80071f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f6:	bfd4      	ite	le
 80071f8:	eef1 7a66 	vnegle.f32	s15, s13
 80071fc:	eef0 7a66 	vmovgt.f32	s15, s13
 8007200:	eeb4 7a67 	vcmp.f32	s14, s15
 8007204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007208:	d010      	beq.n	800722c <arm_mat_inverse_f32+0x128>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	b173      	cbz	r3, 800722c <arm_mat_inverse_f32+0x128>
 800720e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007216:	eef1 7a66 	vneg.f32	s15, s13
 800721a:	bfc8      	it	gt
 800721c:	eef0 7a66 	vmovgt.f32	s15, s13
 8007220:	eeb4 7a67 	vcmp.f32	s14, s15
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	f000 8092 	beq.w	8007350 <arm_mat_inverse_f32+0x24c>
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	b933      	cbnz	r3, 800723e <arm_mat_inverse_f32+0x13a>
 8007230:	eef5 6a40 	vcmp.f32	s13, #0.0
 8007234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007238:	d07c      	beq.n	8007334 <arm_mat_inverse_f32+0x230>
 800723a:	2300      	movs	r3, #0
 800723c:	9306      	str	r3, [sp, #24]
 800723e:	eb0e 0308 	add.w	r3, lr, r8
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	462a      	mov	r2, r5
 8007246:	4633      	mov	r3, r6
 8007248:	ed93 7a00 	vldr	s14, [r3]
 800724c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007250:	3a01      	subs	r2, #1
 8007252:	ece3 7a01 	vstmia	r3!, {s15}
 8007256:	d1f7      	bne.n	8007248 <arm_mat_inverse_f32+0x144>
 8007258:	4649      	mov	r1, r9
 800725a:	4673      	mov	r3, lr
 800725c:	ed93 7a00 	vldr	s14, [r3]
 8007260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007264:	3901      	subs	r1, #1
 8007266:	ece3 7a01 	vstmia	r3!, {s15}
 800726a:	d1f7      	bne.n	800725c <arm_mat_inverse_f32+0x158>
 800726c:	00bb      	lsls	r3, r7, #2
 800726e:	9807      	ldr	r0, [sp, #28]
 8007270:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007274:	f8cd 8014 	str.w	r8, [sp, #20]
 8007278:	4698      	mov	r8, r3
 800727a:	42b9      	cmp	r1, r7
 800727c:	f000 808c 	beq.w	8007398 <arm_mat_inverse_f32+0x294>
 8007280:	eddb 6a00 	vldr	s13, [fp]
 8007284:	462a      	mov	r2, r5
 8007286:	46b2      	mov	sl, r6
 8007288:	465b      	mov	r3, fp
 800728a:	ecfa 7a01 	vldmia	sl!, {s15}
 800728e:	ed93 7a00 	vldr	s14, [r3]
 8007292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007296:	3a01      	subs	r2, #1
 8007298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800729c:	ece3 7a01 	vstmia	r3!, {s15}
 80072a0:	d1f3      	bne.n	800728a <arm_mat_inverse_f32+0x186>
 80072a2:	44e3      	add	fp, ip
 80072a4:	464a      	mov	r2, r9
 80072a6:	46f2      	mov	sl, lr
 80072a8:	4603      	mov	r3, r0
 80072aa:	ecfa 7a01 	vldmia	sl!, {s15}
 80072ae:	ed93 7a00 	vldr	s14, [r3]
 80072b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072b6:	3a01      	subs	r2, #1
 80072b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072bc:	ece3 7a01 	vstmia	r3!, {s15}
 80072c0:	d1f3      	bne.n	80072aa <arm_mat_inverse_f32+0x1a6>
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	4418      	add	r0, r3
 80072c6:	3101      	adds	r1, #1
 80072c8:	428c      	cmp	r4, r1
 80072ca:	44c3      	add	fp, r8
 80072cc:	d1d5      	bne.n	800727a <arm_mat_inverse_f32+0x176>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80072d4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	9302      	str	r3, [sp, #8]
 80072dc:	9b08      	ldr	r3, [sp, #32]
 80072de:	441e      	add	r6, r3
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	3d01      	subs	r5, #1
 80072e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80072e8:	f107 0701 	add.w	r7, r7, #1
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	f1ac 0c04 	sub.w	ip, ip, #4
 80072f2:	f47f af58 	bne.w	80071a6 <arm_mat_inverse_f32+0xa2>
 80072f6:	9b06      	ldr	r3, [sp, #24]
 80072f8:	bb0b      	cbnz	r3, 800733e <arm_mat_inverse_f32+0x23a>
 80072fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80072fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007302:	d11c      	bne.n	800733e <arm_mat_inverse_f32+0x23a>
 8007304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	edd3 7a00 	vldr	s15, [r3]
 800730c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	fb09 f404 	mul.w	r4, r9, r4
 8007318:	bf08      	it	eq
 800731a:	3304      	addeq	r3, #4
 800731c:	d007      	beq.n	800732e <arm_mat_inverse_f32+0x22a>
 800731e:	e00e      	b.n	800733e <arm_mat_inverse_f32+0x23a>
 8007320:	ecf3 7a01 	vldmia	r3!, {s15}
 8007324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732c:	d130      	bne.n	8007390 <arm_mat_inverse_f32+0x28c>
 800732e:	3501      	adds	r5, #1
 8007330:	42a5      	cmp	r5, r4
 8007332:	d1f5      	bne.n	8007320 <arm_mat_inverse_f32+0x21c>
 8007334:	f06f 0004 	mvn.w	r0, #4
 8007338:	b00b      	add	sp, #44	; 0x2c
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	4628      	mov	r0, r5
 8007340:	b00b      	add	sp, #44	; 0x2c
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	f06f 0002 	mvn.w	r0, #2
 800734a:	b00b      	add	sp, #44	; 0x2c
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	4629      	mov	r1, r5
 8007354:	4632      	mov	r2, r6
 8007356:	6810      	ldr	r0, [r2, #0]
 8007358:	f8d3 a000 	ldr.w	sl, [r3]
 800735c:	f842 ab04 	str.w	sl, [r2], #4
 8007360:	3901      	subs	r1, #1
 8007362:	f843 0b04 	str.w	r0, [r3], #4
 8007366:	d1f6      	bne.n	8007356 <arm_mat_inverse_f32+0x252>
 8007368:	eb08 030e 	add.w	r3, r8, lr
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	4619      	mov	r1, r3
 8007370:	464a      	mov	r2, r9
 8007372:	4673      	mov	r3, lr
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	f8d3 a000 	ldr.w	sl, [r3]
 800737a:	f841 ab04 	str.w	sl, [r1], #4
 800737e:	3a01      	subs	r2, #1
 8007380:	f843 0b04 	str.w	r0, [r3], #4
 8007384:	d1f6      	bne.n	8007374 <arm_mat_inverse_f32+0x270>
 8007386:	2301      	movs	r3, #1
 8007388:	edd6 6a00 	vldr	s13, [r6]
 800738c:	9306      	str	r3, [sp, #24]
 800738e:	e759      	b.n	8007244 <arm_mat_inverse_f32+0x140>
 8007390:	2000      	movs	r0, #0
 8007392:	b00b      	add	sp, #44	; 0x2c
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	44e3      	add	fp, ip
 800739c:	4418      	add	r0, r3
 800739e:	e792      	b.n	80072c6 <arm_mat_inverse_f32+0x1c2>
 80073a0:	00000000 	.word	0x00000000

080073a4 <arm_mat_init_f32>:
 80073a4:	8001      	strh	r1, [r0, #0]
 80073a6:	8042      	strh	r2, [r0, #2]
 80073a8:	6043      	str	r3, [r0, #4]
 80073aa:	4770      	bx	lr

080073ac <__errno>:
 80073ac:	4b01      	ldr	r3, [pc, #4]	; (80073b4 <__errno+0x8>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	200000d8 	.word	0x200000d8

080073b8 <__libc_init_array>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4d0d      	ldr	r5, [pc, #52]	; (80073f0 <__libc_init_array+0x38>)
 80073bc:	4c0d      	ldr	r4, [pc, #52]	; (80073f4 <__libc_init_array+0x3c>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	2600      	movs	r6, #0
 80073c4:	42a6      	cmp	r6, r4
 80073c6:	d109      	bne.n	80073dc <__libc_init_array+0x24>
 80073c8:	4d0b      	ldr	r5, [pc, #44]	; (80073f8 <__libc_init_array+0x40>)
 80073ca:	4c0c      	ldr	r4, [pc, #48]	; (80073fc <__libc_init_array+0x44>)
 80073cc:	f004 fc48 	bl	800bc60 <_init>
 80073d0:	1b64      	subs	r4, r4, r5
 80073d2:	10a4      	asrs	r4, r4, #2
 80073d4:	2600      	movs	r6, #0
 80073d6:	42a6      	cmp	r6, r4
 80073d8:	d105      	bne.n	80073e6 <__libc_init_array+0x2e>
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e0:	4798      	blx	r3
 80073e2:	3601      	adds	r6, #1
 80073e4:	e7ee      	b.n	80073c4 <__libc_init_array+0xc>
 80073e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ea:	4798      	blx	r3
 80073ec:	3601      	adds	r6, #1
 80073ee:	e7f2      	b.n	80073d6 <__libc_init_array+0x1e>
 80073f0:	0800c38c 	.word	0x0800c38c
 80073f4:	0800c38c 	.word	0x0800c38c
 80073f8:	0800c38c 	.word	0x0800c38c
 80073fc:	0800c390 	.word	0x0800c390

08007400 <memcpy>:
 8007400:	440a      	add	r2, r1
 8007402:	4291      	cmp	r1, r2
 8007404:	f100 33ff 	add.w	r3, r0, #4294967295
 8007408:	d100      	bne.n	800740c <memcpy+0xc>
 800740a:	4770      	bx	lr
 800740c:	b510      	push	{r4, lr}
 800740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007416:	4291      	cmp	r1, r2
 8007418:	d1f9      	bne.n	800740e <memcpy+0xe>
 800741a:	bd10      	pop	{r4, pc}

0800741c <memset>:
 800741c:	4402      	add	r2, r0
 800741e:	4603      	mov	r3, r0
 8007420:	4293      	cmp	r3, r2
 8007422:	d100      	bne.n	8007426 <memset+0xa>
 8007424:	4770      	bx	lr
 8007426:	f803 1b01 	strb.w	r1, [r3], #1
 800742a:	e7f9      	b.n	8007420 <memset+0x4>

0800742c <__cvt>:
 800742c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	ec55 4b10 	vmov	r4, r5, d0
 8007434:	2d00      	cmp	r5, #0
 8007436:	460e      	mov	r6, r1
 8007438:	4619      	mov	r1, r3
 800743a:	462b      	mov	r3, r5
 800743c:	bfbb      	ittet	lt
 800743e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007442:	461d      	movlt	r5, r3
 8007444:	2300      	movge	r3, #0
 8007446:	232d      	movlt	r3, #45	; 0x2d
 8007448:	700b      	strb	r3, [r1, #0]
 800744a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007450:	4691      	mov	r9, r2
 8007452:	f023 0820 	bic.w	r8, r3, #32
 8007456:	bfbc      	itt	lt
 8007458:	4622      	movlt	r2, r4
 800745a:	4614      	movlt	r4, r2
 800745c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007460:	d005      	beq.n	800746e <__cvt+0x42>
 8007462:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007466:	d100      	bne.n	800746a <__cvt+0x3e>
 8007468:	3601      	adds	r6, #1
 800746a:	2102      	movs	r1, #2
 800746c:	e000      	b.n	8007470 <__cvt+0x44>
 800746e:	2103      	movs	r1, #3
 8007470:	ab03      	add	r3, sp, #12
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	ab02      	add	r3, sp, #8
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	ec45 4b10 	vmov	d0, r4, r5
 800747c:	4653      	mov	r3, sl
 800747e:	4632      	mov	r2, r6
 8007480:	f001 fdb6 	bl	8008ff0 <_dtoa_r>
 8007484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007488:	4607      	mov	r7, r0
 800748a:	d102      	bne.n	8007492 <__cvt+0x66>
 800748c:	f019 0f01 	tst.w	r9, #1
 8007490:	d022      	beq.n	80074d8 <__cvt+0xac>
 8007492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007496:	eb07 0906 	add.w	r9, r7, r6
 800749a:	d110      	bne.n	80074be <__cvt+0x92>
 800749c:	783b      	ldrb	r3, [r7, #0]
 800749e:	2b30      	cmp	r3, #48	; 0x30
 80074a0:	d10a      	bne.n	80074b8 <__cvt+0x8c>
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 fb15 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ae:	b918      	cbnz	r0, 80074b8 <__cvt+0x8c>
 80074b0:	f1c6 0601 	rsb	r6, r6, #1
 80074b4:	f8ca 6000 	str.w	r6, [sl]
 80074b8:	f8da 3000 	ldr.w	r3, [sl]
 80074bc:	4499      	add	r9, r3
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f9 fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ca:	b108      	cbz	r0, 80074d0 <__cvt+0xa4>
 80074cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80074d0:	2230      	movs	r2, #48	; 0x30
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	454b      	cmp	r3, r9
 80074d6:	d307      	bcc.n	80074e8 <__cvt+0xbc>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074dc:	1bdb      	subs	r3, r3, r7
 80074de:	4638      	mov	r0, r7
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	b004      	add	sp, #16
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	1c59      	adds	r1, r3, #1
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	e7f0      	b.n	80074d2 <__cvt+0xa6>

080074f0 <__exponent>:
 80074f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f2:	4603      	mov	r3, r0
 80074f4:	2900      	cmp	r1, #0
 80074f6:	bfb8      	it	lt
 80074f8:	4249      	neglt	r1, r1
 80074fa:	f803 2b02 	strb.w	r2, [r3], #2
 80074fe:	bfb4      	ite	lt
 8007500:	222d      	movlt	r2, #45	; 0x2d
 8007502:	222b      	movge	r2, #43	; 0x2b
 8007504:	2909      	cmp	r1, #9
 8007506:	7042      	strb	r2, [r0, #1]
 8007508:	dd2a      	ble.n	8007560 <__exponent+0x70>
 800750a:	f10d 0407 	add.w	r4, sp, #7
 800750e:	46a4      	mov	ip, r4
 8007510:	270a      	movs	r7, #10
 8007512:	46a6      	mov	lr, r4
 8007514:	460a      	mov	r2, r1
 8007516:	fb91 f6f7 	sdiv	r6, r1, r7
 800751a:	fb07 1516 	mls	r5, r7, r6, r1
 800751e:	3530      	adds	r5, #48	; 0x30
 8007520:	2a63      	cmp	r2, #99	; 0x63
 8007522:	f104 34ff 	add.w	r4, r4, #4294967295
 8007526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800752a:	4631      	mov	r1, r6
 800752c:	dcf1      	bgt.n	8007512 <__exponent+0x22>
 800752e:	3130      	adds	r1, #48	; 0x30
 8007530:	f1ae 0502 	sub.w	r5, lr, #2
 8007534:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007538:	1c44      	adds	r4, r0, #1
 800753a:	4629      	mov	r1, r5
 800753c:	4561      	cmp	r1, ip
 800753e:	d30a      	bcc.n	8007556 <__exponent+0x66>
 8007540:	f10d 0209 	add.w	r2, sp, #9
 8007544:	eba2 020e 	sub.w	r2, r2, lr
 8007548:	4565      	cmp	r5, ip
 800754a:	bf88      	it	hi
 800754c:	2200      	movhi	r2, #0
 800754e:	4413      	add	r3, r2
 8007550:	1a18      	subs	r0, r3, r0
 8007552:	b003      	add	sp, #12
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800755e:	e7ed      	b.n	800753c <__exponent+0x4c>
 8007560:	2330      	movs	r3, #48	; 0x30
 8007562:	3130      	adds	r1, #48	; 0x30
 8007564:	7083      	strb	r3, [r0, #2]
 8007566:	70c1      	strb	r1, [r0, #3]
 8007568:	1d03      	adds	r3, r0, #4
 800756a:	e7f1      	b.n	8007550 <__exponent+0x60>

0800756c <_printf_float>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	ed2d 8b02 	vpush	{d8}
 8007574:	b08d      	sub	sp, #52	; 0x34
 8007576:	460c      	mov	r4, r1
 8007578:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800757c:	4616      	mov	r6, r2
 800757e:	461f      	mov	r7, r3
 8007580:	4605      	mov	r5, r0
 8007582:	f002 fe91 	bl	800a2a8 <_localeconv_r>
 8007586:	f8d0 a000 	ldr.w	sl, [r0]
 800758a:	4650      	mov	r0, sl
 800758c:	f7f8 fe28 	bl	80001e0 <strlen>
 8007590:	2300      	movs	r3, #0
 8007592:	930a      	str	r3, [sp, #40]	; 0x28
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	9305      	str	r3, [sp, #20]
 8007598:	f8d8 3000 	ldr.w	r3, [r8]
 800759c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075a0:	3307      	adds	r3, #7
 80075a2:	f023 0307 	bic.w	r3, r3, #7
 80075a6:	f103 0208 	add.w	r2, r3, #8
 80075aa:	f8c8 2000 	str.w	r2, [r8]
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80075c4:	ee08 0a10 	vmov	s16, r0
 80075c8:	4b9f      	ldr	r3, [pc, #636]	; (8007848 <_printf_float+0x2dc>)
 80075ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	f7f9 fab3 	bl	8000b3c <__aeabi_dcmpun>
 80075d6:	bb88      	cbnz	r0, 800763c <_printf_float+0xd0>
 80075d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075dc:	4b9a      	ldr	r3, [pc, #616]	; (8007848 <_printf_float+0x2dc>)
 80075de:	f04f 32ff 	mov.w	r2, #4294967295
 80075e2:	f7f9 fa8d 	bl	8000b00 <__aeabi_dcmple>
 80075e6:	bb48      	cbnz	r0, 800763c <_printf_float+0xd0>
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 fa7c 	bl	8000aec <__aeabi_dcmplt>
 80075f4:	b110      	cbz	r0, 80075fc <_printf_float+0x90>
 80075f6:	232d      	movs	r3, #45	; 0x2d
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fc:	4b93      	ldr	r3, [pc, #588]	; (800784c <_printf_float+0x2e0>)
 80075fe:	4894      	ldr	r0, [pc, #592]	; (8007850 <_printf_float+0x2e4>)
 8007600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007604:	bf94      	ite	ls
 8007606:	4698      	movls	r8, r3
 8007608:	4680      	movhi	r8, r0
 800760a:	2303      	movs	r3, #3
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	f023 0204 	bic.w	r2, r3, #4
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	9700      	str	r7, [sp, #0]
 800761c:	4633      	mov	r3, r6
 800761e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007620:	4621      	mov	r1, r4
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f9d8 	bl	80079d8 <_printf_common>
 8007628:	3001      	adds	r0, #1
 800762a:	f040 8090 	bne.w	800774e <_printf_float+0x1e2>
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	b00d      	add	sp, #52	; 0x34
 8007634:	ecbd 8b02 	vpop	{d8}
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f9 fa7a 	bl	8000b3c <__aeabi_dcmpun>
 8007648:	b140      	cbz	r0, 800765c <_printf_float+0xf0>
 800764a:	464b      	mov	r3, r9
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfbc      	itt	lt
 8007650:	232d      	movlt	r3, #45	; 0x2d
 8007652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007656:	487f      	ldr	r0, [pc, #508]	; (8007854 <_printf_float+0x2e8>)
 8007658:	4b7f      	ldr	r3, [pc, #508]	; (8007858 <_printf_float+0x2ec>)
 800765a:	e7d1      	b.n	8007600 <_printf_float+0x94>
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007662:	9206      	str	r2, [sp, #24]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	d13f      	bne.n	80076e8 <_printf_float+0x17c>
 8007668:	2306      	movs	r3, #6
 800766a:	6063      	str	r3, [r4, #4]
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	6861      	ldr	r1, [r4, #4]
 8007670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007674:	2300      	movs	r3, #0
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	ab0a      	add	r3, sp, #40	; 0x28
 800767a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800767e:	ab09      	add	r3, sp, #36	; 0x24
 8007680:	ec49 8b10 	vmov	d0, r8, r9
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6022      	str	r2, [r4, #0]
 8007688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800768c:	4628      	mov	r0, r5
 800768e:	f7ff fecd 	bl	800742c <__cvt>
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007696:	2b47      	cmp	r3, #71	; 0x47
 8007698:	4680      	mov	r8, r0
 800769a:	d108      	bne.n	80076ae <_printf_float+0x142>
 800769c:	1cc8      	adds	r0, r1, #3
 800769e:	db02      	blt.n	80076a6 <_printf_float+0x13a>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	4299      	cmp	r1, r3
 80076a4:	dd41      	ble.n	800772a <_printf_float+0x1be>
 80076a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80076aa:	fa5f fb8b 	uxtb.w	fp, fp
 80076ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076b2:	d820      	bhi.n	80076f6 <_printf_float+0x18a>
 80076b4:	3901      	subs	r1, #1
 80076b6:	465a      	mov	r2, fp
 80076b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076bc:	9109      	str	r1, [sp, #36]	; 0x24
 80076be:	f7ff ff17 	bl	80074f0 <__exponent>
 80076c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c4:	1813      	adds	r3, r2, r0
 80076c6:	2a01      	cmp	r2, #1
 80076c8:	4681      	mov	r9, r0
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	dc02      	bgt.n	80076d4 <_printf_float+0x168>
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	07d2      	lsls	r2, r2, #31
 80076d2:	d501      	bpl.n	80076d8 <_printf_float+0x16c>
 80076d4:	3301      	adds	r3, #1
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d09c      	beq.n	800761a <_printf_float+0xae>
 80076e0:	232d      	movs	r3, #45	; 0x2d
 80076e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e6:	e798      	b.n	800761a <_printf_float+0xae>
 80076e8:	9a06      	ldr	r2, [sp, #24]
 80076ea:	2a47      	cmp	r2, #71	; 0x47
 80076ec:	d1be      	bne.n	800766c <_printf_float+0x100>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1bc      	bne.n	800766c <_printf_float+0x100>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e7b9      	b.n	800766a <_printf_float+0xfe>
 80076f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076fa:	d118      	bne.n	800772e <_printf_float+0x1c2>
 80076fc:	2900      	cmp	r1, #0
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	dd0b      	ble.n	800771a <_printf_float+0x1ae>
 8007702:	6121      	str	r1, [r4, #16]
 8007704:	b913      	cbnz	r3, 800770c <_printf_float+0x1a0>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	07d0      	lsls	r0, r2, #31
 800770a:	d502      	bpl.n	8007712 <_printf_float+0x1a6>
 800770c:	3301      	adds	r3, #1
 800770e:	440b      	add	r3, r1
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	65a1      	str	r1, [r4, #88]	; 0x58
 8007714:	f04f 0900 	mov.w	r9, #0
 8007718:	e7de      	b.n	80076d8 <_printf_float+0x16c>
 800771a:	b913      	cbnz	r3, 8007722 <_printf_float+0x1b6>
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	07d2      	lsls	r2, r2, #31
 8007720:	d501      	bpl.n	8007726 <_printf_float+0x1ba>
 8007722:	3302      	adds	r3, #2
 8007724:	e7f4      	b.n	8007710 <_printf_float+0x1a4>
 8007726:	2301      	movs	r3, #1
 8007728:	e7f2      	b.n	8007710 <_printf_float+0x1a4>
 800772a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	4299      	cmp	r1, r3
 8007732:	db05      	blt.n	8007740 <_printf_float+0x1d4>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	6121      	str	r1, [r4, #16]
 8007738:	07d8      	lsls	r0, r3, #31
 800773a:	d5ea      	bpl.n	8007712 <_printf_float+0x1a6>
 800773c:	1c4b      	adds	r3, r1, #1
 800773e:	e7e7      	b.n	8007710 <_printf_float+0x1a4>
 8007740:	2900      	cmp	r1, #0
 8007742:	bfd4      	ite	le
 8007744:	f1c1 0202 	rsble	r2, r1, #2
 8007748:	2201      	movgt	r2, #1
 800774a:	4413      	add	r3, r2
 800774c:	e7e0      	b.n	8007710 <_printf_float+0x1a4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	055a      	lsls	r2, r3, #21
 8007752:	d407      	bmi.n	8007764 <_printf_float+0x1f8>
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	4642      	mov	r2, r8
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	d12c      	bne.n	80077bc <_printf_float+0x250>
 8007762:	e764      	b.n	800762e <_printf_float+0xc2>
 8007764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007768:	f240 80e0 	bls.w	800792c <_printf_float+0x3c0>
 800776c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	f7f9 f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007778:	2800      	cmp	r0, #0
 800777a:	d034      	beq.n	80077e6 <_printf_float+0x27a>
 800777c:	4a37      	ldr	r2, [pc, #220]	; (800785c <_printf_float+0x2f0>)
 800777e:	2301      	movs	r3, #1
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af51 	beq.w	800762e <_printf_float+0xc2>
 800778c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007790:	429a      	cmp	r2, r3
 8007792:	db02      	blt.n	800779a <_printf_float+0x22e>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	07d8      	lsls	r0, r3, #31
 8007798:	d510      	bpl.n	80077bc <_printf_float+0x250>
 800779a:	ee18 3a10 	vmov	r3, s16
 800779e:	4652      	mov	r2, sl
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f af41 	beq.w	800762e <_printf_float+0xc2>
 80077ac:	f04f 0800 	mov.w	r8, #0
 80077b0:	f104 091a 	add.w	r9, r4, #26
 80077b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4543      	cmp	r3, r8
 80077ba:	dc09      	bgt.n	80077d0 <_printf_float+0x264>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	079b      	lsls	r3, r3, #30
 80077c0:	f100 8105 	bmi.w	80079ce <_printf_float+0x462>
 80077c4:	68e0      	ldr	r0, [r4, #12]
 80077c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c8:	4298      	cmp	r0, r3
 80077ca:	bfb8      	it	lt
 80077cc:	4618      	movlt	r0, r3
 80077ce:	e730      	b.n	8007632 <_printf_float+0xc6>
 80077d0:	2301      	movs	r3, #1
 80077d2:	464a      	mov	r2, r9
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af27 	beq.w	800762e <_printf_float+0xc2>
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	e7e6      	b.n	80077b4 <_printf_float+0x248>
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dc39      	bgt.n	8007860 <_printf_float+0x2f4>
 80077ec:	4a1b      	ldr	r2, [pc, #108]	; (800785c <_printf_float+0x2f0>)
 80077ee:	2301      	movs	r3, #1
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af19 	beq.w	800762e <_printf_float+0xc2>
 80077fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007800:	4313      	orrs	r3, r2
 8007802:	d102      	bne.n	800780a <_printf_float+0x29e>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07d9      	lsls	r1, r3, #31
 8007808:	d5d8      	bpl.n	80077bc <_printf_float+0x250>
 800780a:	ee18 3a10 	vmov	r3, s16
 800780e:	4652      	mov	r2, sl
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af09 	beq.w	800762e <_printf_float+0xc2>
 800781c:	f04f 0900 	mov.w	r9, #0
 8007820:	f104 0a1a 	add.w	sl, r4, #26
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	425b      	negs	r3, r3
 8007828:	454b      	cmp	r3, r9
 800782a:	dc01      	bgt.n	8007830 <_printf_float+0x2c4>
 800782c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782e:	e792      	b.n	8007756 <_printf_float+0x1ea>
 8007830:	2301      	movs	r3, #1
 8007832:	4652      	mov	r2, sl
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f aef7 	beq.w	800762e <_printf_float+0xc2>
 8007840:	f109 0901 	add.w	r9, r9, #1
 8007844:	e7ee      	b.n	8007824 <_printf_float+0x2b8>
 8007846:	bf00      	nop
 8007848:	7fefffff 	.word	0x7fefffff
 800784c:	0800bed4 	.word	0x0800bed4
 8007850:	0800bed8 	.word	0x0800bed8
 8007854:	0800bee0 	.word	0x0800bee0
 8007858:	0800bedc 	.word	0x0800bedc
 800785c:	0800bee4 	.word	0x0800bee4
 8007860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007864:	429a      	cmp	r2, r3
 8007866:	bfa8      	it	ge
 8007868:	461a      	movge	r2, r3
 800786a:	2a00      	cmp	r2, #0
 800786c:	4691      	mov	r9, r2
 800786e:	dc37      	bgt.n	80078e0 <_printf_float+0x374>
 8007870:	f04f 0b00 	mov.w	fp, #0
 8007874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007878:	f104 021a 	add.w	r2, r4, #26
 800787c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	eba3 0309 	sub.w	r3, r3, r9
 8007884:	455b      	cmp	r3, fp
 8007886:	dc33      	bgt.n	80078f0 <_printf_float+0x384>
 8007888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800788c:	429a      	cmp	r2, r3
 800788e:	db3b      	blt.n	8007908 <_printf_float+0x39c>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07da      	lsls	r2, r3, #31
 8007894:	d438      	bmi.n	8007908 <_printf_float+0x39c>
 8007896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	eba2 0901 	sub.w	r9, r2, r1
 80078a2:	4599      	cmp	r9, r3
 80078a4:	bfa8      	it	ge
 80078a6:	4699      	movge	r9, r3
 80078a8:	f1b9 0f00 	cmp.w	r9, #0
 80078ac:	dc35      	bgt.n	800791a <_printf_float+0x3ae>
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078b6:	f104 0a1a 	add.w	sl, r4, #26
 80078ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	eba3 0309 	sub.w	r3, r3, r9
 80078c4:	4543      	cmp	r3, r8
 80078c6:	f77f af79 	ble.w	80077bc <_printf_float+0x250>
 80078ca:	2301      	movs	r3, #1
 80078cc:	4652      	mov	r2, sl
 80078ce:	4631      	mov	r1, r6
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b8      	blx	r7
 80078d4:	3001      	adds	r0, #1
 80078d6:	f43f aeaa 	beq.w	800762e <_printf_float+0xc2>
 80078da:	f108 0801 	add.w	r8, r8, #1
 80078de:	e7ec      	b.n	80078ba <_printf_float+0x34e>
 80078e0:	4613      	mov	r3, r2
 80078e2:	4631      	mov	r1, r6
 80078e4:	4642      	mov	r2, r8
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	d1c0      	bne.n	8007870 <_printf_float+0x304>
 80078ee:	e69e      	b.n	800762e <_printf_float+0xc2>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	9205      	str	r2, [sp, #20]
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f ae97 	beq.w	800762e <_printf_float+0xc2>
 8007900:	9a05      	ldr	r2, [sp, #20]
 8007902:	f10b 0b01 	add.w	fp, fp, #1
 8007906:	e7b9      	b.n	800787c <_printf_float+0x310>
 8007908:	ee18 3a10 	vmov	r3, s16
 800790c:	4652      	mov	r2, sl
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	d1be      	bne.n	8007896 <_printf_float+0x32a>
 8007918:	e689      	b.n	800762e <_printf_float+0xc2>
 800791a:	9a05      	ldr	r2, [sp, #20]
 800791c:	464b      	mov	r3, r9
 800791e:	4442      	add	r2, r8
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	d1c1      	bne.n	80078ae <_printf_float+0x342>
 800792a:	e680      	b.n	800762e <_printf_float+0xc2>
 800792c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800792e:	2a01      	cmp	r2, #1
 8007930:	dc01      	bgt.n	8007936 <_printf_float+0x3ca>
 8007932:	07db      	lsls	r3, r3, #31
 8007934:	d538      	bpl.n	80079a8 <_printf_float+0x43c>
 8007936:	2301      	movs	r3, #1
 8007938:	4642      	mov	r2, r8
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f ae74 	beq.w	800762e <_printf_float+0xc2>
 8007946:	ee18 3a10 	vmov	r3, s16
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae6b 	beq.w	800762e <_printf_float+0xc2>
 8007958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	f7f9 f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007964:	b9d8      	cbnz	r0, 800799e <_printf_float+0x432>
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	f108 0201 	add.w	r2, r8, #1
 800796c:	3b01      	subs	r3, #1
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	d10e      	bne.n	8007996 <_printf_float+0x42a>
 8007978:	e659      	b.n	800762e <_printf_float+0xc2>
 800797a:	2301      	movs	r3, #1
 800797c:	4652      	mov	r2, sl
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae52 	beq.w	800762e <_printf_float+0xc2>
 800798a:	f108 0801 	add.w	r8, r8, #1
 800798e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007990:	3b01      	subs	r3, #1
 8007992:	4543      	cmp	r3, r8
 8007994:	dcf1      	bgt.n	800797a <_printf_float+0x40e>
 8007996:	464b      	mov	r3, r9
 8007998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800799c:	e6dc      	b.n	8007758 <_printf_float+0x1ec>
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	f104 0a1a 	add.w	sl, r4, #26
 80079a6:	e7f2      	b.n	800798e <_printf_float+0x422>
 80079a8:	2301      	movs	r3, #1
 80079aa:	4642      	mov	r2, r8
 80079ac:	e7df      	b.n	800796e <_printf_float+0x402>
 80079ae:	2301      	movs	r3, #1
 80079b0:	464a      	mov	r2, r9
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	f43f ae38 	beq.w	800762e <_printf_float+0xc2>
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079c6:	1a5b      	subs	r3, r3, r1
 80079c8:	4543      	cmp	r3, r8
 80079ca:	dcf0      	bgt.n	80079ae <_printf_float+0x442>
 80079cc:	e6fa      	b.n	80077c4 <_printf_float+0x258>
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	f104 0919 	add.w	r9, r4, #25
 80079d6:	e7f4      	b.n	80079c2 <_printf_float+0x456>

080079d8 <_printf_common>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	4616      	mov	r6, r2
 80079de:	4699      	mov	r9, r3
 80079e0:	688a      	ldr	r2, [r1, #8]
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	bfb8      	it	lt
 80079ec:	4613      	movlt	r3, r2
 80079ee:	6033      	str	r3, [r6, #0]
 80079f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f4:	4607      	mov	r7, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b10a      	cbz	r2, 80079fe <_printf_common+0x26>
 80079fa:	3301      	adds	r3, #1
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	0699      	lsls	r1, r3, #26
 8007a02:	bf42      	ittt	mi
 8007a04:	6833      	ldrmi	r3, [r6, #0]
 8007a06:	3302      	addmi	r3, #2
 8007a08:	6033      	strmi	r3, [r6, #0]
 8007a0a:	6825      	ldr	r5, [r4, #0]
 8007a0c:	f015 0506 	ands.w	r5, r5, #6
 8007a10:	d106      	bne.n	8007a20 <_printf_common+0x48>
 8007a12:	f104 0a19 	add.w	sl, r4, #25
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	6832      	ldr	r2, [r6, #0]
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc26      	bgt.n	8007a6e <_printf_common+0x96>
 8007a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a24:	1e13      	subs	r3, r2, #0
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	bf18      	it	ne
 8007a2a:	2301      	movne	r3, #1
 8007a2c:	0692      	lsls	r2, r2, #26
 8007a2e:	d42b      	bmi.n	8007a88 <_printf_common+0xb0>
 8007a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d01e      	beq.n	8007a7c <_printf_common+0xa4>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	68e5      	ldr	r5, [r4, #12]
 8007a42:	6832      	ldr	r2, [r6, #0]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	bf08      	it	eq
 8007a4c:	1aad      	subeq	r5, r5, r2
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	2600      	movs	r6, #0
 8007a64:	341a      	adds	r4, #26
 8007a66:	42b5      	cmp	r5, r6
 8007a68:	d11a      	bne.n	8007aa0 <_printf_common+0xc8>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	e008      	b.n	8007a80 <_printf_common+0xa8>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4652      	mov	r2, sl
 8007a72:	4649      	mov	r1, r9
 8007a74:	4638      	mov	r0, r7
 8007a76:	47c0      	blx	r8
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d103      	bne.n	8007a84 <_printf_common+0xac>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7c6      	b.n	8007a16 <_printf_common+0x3e>
 8007a88:	18e1      	adds	r1, r4, r3
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	2030      	movs	r0, #48	; 0x30
 8007a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a92:	4422      	add	r2, r4
 8007a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	e7c7      	b.n	8007a30 <_printf_common+0x58>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d0e6      	beq.n	8007a7c <_printf_common+0xa4>
 8007aae:	3601      	adds	r6, #1
 8007ab0:	e7d9      	b.n	8007a66 <_printf_common+0x8e>
	...

08007ab4 <_printf_i>:
 8007ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4691      	mov	r9, r2
 8007abc:	7e27      	ldrb	r7, [r4, #24]
 8007abe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ac0:	2f78      	cmp	r7, #120	; 0x78
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	469a      	mov	sl, r3
 8007ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aca:	d807      	bhi.n	8007adc <_printf_i+0x28>
 8007acc:	2f62      	cmp	r7, #98	; 0x62
 8007ace:	d80a      	bhi.n	8007ae6 <_printf_i+0x32>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	f000 80d8 	beq.w	8007c86 <_printf_i+0x1d2>
 8007ad6:	2f58      	cmp	r7, #88	; 0x58
 8007ad8:	f000 80a3 	beq.w	8007c22 <_printf_i+0x16e>
 8007adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ae4:	e03a      	b.n	8007b5c <_printf_i+0xa8>
 8007ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aea:	2b15      	cmp	r3, #21
 8007aec:	d8f6      	bhi.n	8007adc <_printf_i+0x28>
 8007aee:	a001      	add	r0, pc, #4	; (adr r0, 8007af4 <_printf_i+0x40>)
 8007af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007af4:	08007b4d 	.word	0x08007b4d
 8007af8:	08007b61 	.word	0x08007b61
 8007afc:	08007add 	.word	0x08007add
 8007b00:	08007add 	.word	0x08007add
 8007b04:	08007add 	.word	0x08007add
 8007b08:	08007add 	.word	0x08007add
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007add 	.word	0x08007add
 8007b14:	08007add 	.word	0x08007add
 8007b18:	08007add 	.word	0x08007add
 8007b1c:	08007add 	.word	0x08007add
 8007b20:	08007c6d 	.word	0x08007c6d
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007c4f 	.word	0x08007c4f
 8007b2c:	08007add 	.word	0x08007add
 8007b30:	08007add 	.word	0x08007add
 8007b34:	08007c8f 	.word	0x08007c8f
 8007b38:	08007add 	.word	0x08007add
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007add 	.word	0x08007add
 8007b44:	08007add 	.word	0x08007add
 8007b48:	08007c57 	.word	0x08007c57
 8007b4c:	680b      	ldr	r3, [r1, #0]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	600a      	str	r2, [r1, #0]
 8007b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e0a3      	b.n	8007ca8 <_printf_i+0x1f4>
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	6808      	ldr	r0, [r1, #0]
 8007b64:	062e      	lsls	r6, r5, #24
 8007b66:	f100 0304 	add.w	r3, r0, #4
 8007b6a:	d50a      	bpl.n	8007b82 <_printf_i+0xce>
 8007b6c:	6805      	ldr	r5, [r0, #0]
 8007b6e:	600b      	str	r3, [r1, #0]
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	da03      	bge.n	8007b7c <_printf_i+0xc8>
 8007b74:	232d      	movs	r3, #45	; 0x2d
 8007b76:	426d      	negs	r5, r5
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	485e      	ldr	r0, [pc, #376]	; (8007cf8 <_printf_i+0x244>)
 8007b7e:	230a      	movs	r3, #10
 8007b80:	e019      	b.n	8007bb6 <_printf_i+0x102>
 8007b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b86:	6805      	ldr	r5, [r0, #0]
 8007b88:	600b      	str	r3, [r1, #0]
 8007b8a:	bf18      	it	ne
 8007b8c:	b22d      	sxthne	r5, r5
 8007b8e:	e7ef      	b.n	8007b70 <_printf_i+0xbc>
 8007b90:	680b      	ldr	r3, [r1, #0]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	1d18      	adds	r0, r3, #4
 8007b96:	6008      	str	r0, [r1, #0]
 8007b98:	0628      	lsls	r0, r5, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0xec>
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0xf2>
 8007ba0:	0669      	lsls	r1, r5, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0xe8>
 8007ba4:	881d      	ldrh	r5, [r3, #0]
 8007ba6:	4854      	ldr	r0, [pc, #336]	; (8007cf8 <_printf_i+0x244>)
 8007ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8007baa:	bf0c      	ite	eq
 8007bac:	2308      	moveq	r3, #8
 8007bae:	230a      	movne	r3, #10
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb6:	6866      	ldr	r6, [r4, #4]
 8007bb8:	60a6      	str	r6, [r4, #8]
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	bfa2      	ittt	ge
 8007bbe:	6821      	ldrge	r1, [r4, #0]
 8007bc0:	f021 0104 	bicge.w	r1, r1, #4
 8007bc4:	6021      	strge	r1, [r4, #0]
 8007bc6:	b90d      	cbnz	r5, 8007bcc <_printf_i+0x118>
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	d04d      	beq.n	8007c68 <_printf_i+0x1b4>
 8007bcc:	4616      	mov	r6, r2
 8007bce:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bd2:	fb03 5711 	mls	r7, r3, r1, r5
 8007bd6:	5dc7      	ldrb	r7, [r0, r7]
 8007bd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bdc:	462f      	mov	r7, r5
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	460d      	mov	r5, r1
 8007be2:	d9f4      	bls.n	8007bce <_printf_i+0x11a>
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d10b      	bne.n	8007c00 <_printf_i+0x14c>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07df      	lsls	r7, r3, #31
 8007bec:	d508      	bpl.n	8007c00 <_printf_i+0x14c>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	6861      	ldr	r1, [r4, #4]
 8007bf2:	4299      	cmp	r1, r3
 8007bf4:	bfde      	ittt	le
 8007bf6:	2330      	movle	r3, #48	; 0x30
 8007bf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c00:	1b92      	subs	r2, r2, r6
 8007c02:	6122      	str	r2, [r4, #16]
 8007c04:	f8cd a000 	str.w	sl, [sp]
 8007c08:	464b      	mov	r3, r9
 8007c0a:	aa03      	add	r2, sp, #12
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f7ff fee2 	bl	80079d8 <_printf_common>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d14c      	bne.n	8007cb2 <_printf_i+0x1fe>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b004      	add	sp, #16
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	4835      	ldr	r0, [pc, #212]	; (8007cf8 <_printf_i+0x244>)
 8007c24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	680e      	ldr	r6, [r1, #0]
 8007c2c:	061f      	lsls	r7, r3, #24
 8007c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c32:	600e      	str	r6, [r1, #0]
 8007c34:	d514      	bpl.n	8007c60 <_printf_i+0x1ac>
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	bf44      	itt	mi
 8007c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c3e:	6023      	strmi	r3, [r4, #0]
 8007c40:	b91d      	cbnz	r5, 8007c4a <_printf_i+0x196>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f023 0320 	bic.w	r3, r3, #32
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	e7b0      	b.n	8007bb0 <_printf_i+0xfc>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	f043 0320 	orr.w	r3, r3, #32
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	2378      	movs	r3, #120	; 0x78
 8007c58:	4828      	ldr	r0, [pc, #160]	; (8007cfc <_printf_i+0x248>)
 8007c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c5e:	e7e3      	b.n	8007c28 <_printf_i+0x174>
 8007c60:	065e      	lsls	r6, r3, #25
 8007c62:	bf48      	it	mi
 8007c64:	b2ad      	uxthmi	r5, r5
 8007c66:	e7e6      	b.n	8007c36 <_printf_i+0x182>
 8007c68:	4616      	mov	r6, r2
 8007c6a:	e7bb      	b.n	8007be4 <_printf_i+0x130>
 8007c6c:	680b      	ldr	r3, [r1, #0]
 8007c6e:	6826      	ldr	r6, [r4, #0]
 8007c70:	6960      	ldr	r0, [r4, #20]
 8007c72:	1d1d      	adds	r5, r3, #4
 8007c74:	600d      	str	r5, [r1, #0]
 8007c76:	0635      	lsls	r5, r6, #24
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0x1cc>
 8007c7c:	6018      	str	r0, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0x1d2>
 8007c80:	0671      	lsls	r1, r6, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0x1c8>
 8007c84:	8018      	strh	r0, [r3, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	4616      	mov	r6, r2
 8007c8c:	e7ba      	b.n	8007c04 <_printf_i+0x150>
 8007c8e:	680b      	ldr	r3, [r1, #0]
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	600a      	str	r2, [r1, #0]
 8007c94:	681e      	ldr	r6, [r3, #0]
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 faa8 	bl	80001f0 <memchr>
 8007ca0:	b108      	cbz	r0, 8007ca6 <_printf_i+0x1f2>
 8007ca2:	1b80      	subs	r0, r0, r6
 8007ca4:	6060      	str	r0, [r4, #4]
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb0:	e7a8      	b.n	8007c04 <_printf_i+0x150>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	47d0      	blx	sl
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d0ab      	beq.n	8007c18 <_printf_i+0x164>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	079b      	lsls	r3, r3, #30
 8007cc4:	d413      	bmi.n	8007cee <_printf_i+0x23a>
 8007cc6:	68e0      	ldr	r0, [r4, #12]
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	4618      	movlt	r0, r3
 8007cd0:	e7a4      	b.n	8007c1c <_printf_i+0x168>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4640      	mov	r0, r8
 8007cda:	47d0      	blx	sl
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d09b      	beq.n	8007c18 <_printf_i+0x164>
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	9903      	ldr	r1, [sp, #12]
 8007ce6:	1a5b      	subs	r3, r3, r1
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dcf2      	bgt.n	8007cd2 <_printf_i+0x21e>
 8007cec:	e7eb      	b.n	8007cc6 <_printf_i+0x212>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	f104 0619 	add.w	r6, r4, #25
 8007cf4:	e7f5      	b.n	8007ce2 <_printf_i+0x22e>
 8007cf6:	bf00      	nop
 8007cf8:	0800bee6 	.word	0x0800bee6
 8007cfc:	0800bef7 	.word	0x0800bef7

08007d00 <_scanf_float>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	b087      	sub	sp, #28
 8007d06:	4617      	mov	r7, r2
 8007d08:	9303      	str	r3, [sp, #12]
 8007d0a:	688b      	ldr	r3, [r1, #8]
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d12:	bf83      	ittte	hi
 8007d14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d18:	195b      	addhi	r3, r3, r5
 8007d1a:	9302      	strhi	r3, [sp, #8]
 8007d1c:	2300      	movls	r3, #0
 8007d1e:	bf86      	itte	hi
 8007d20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d24:	608b      	strhi	r3, [r1, #8]
 8007d26:	9302      	strls	r3, [sp, #8]
 8007d28:	680b      	ldr	r3, [r1, #0]
 8007d2a:	468b      	mov	fp, r1
 8007d2c:	2500      	movs	r5, #0
 8007d2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d32:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	465e      	mov	r6, fp
 8007d40:	46aa      	mov	sl, r5
 8007d42:	46a9      	mov	r9, r5
 8007d44:	9501      	str	r5, [sp, #4]
 8007d46:	68a2      	ldr	r2, [r4, #8]
 8007d48:	b152      	cbz	r2, 8007d60 <_scanf_float+0x60>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b4e      	cmp	r3, #78	; 0x4e
 8007d50:	d864      	bhi.n	8007e1c <_scanf_float+0x11c>
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d83c      	bhi.n	8007dd0 <_scanf_float+0xd0>
 8007d56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d5a:	b2c8      	uxtb	r0, r1
 8007d5c:	280e      	cmp	r0, #14
 8007d5e:	d93a      	bls.n	8007dd6 <_scanf_float+0xd6>
 8007d60:	f1b9 0f00 	cmp.w	r9, #0
 8007d64:	d003      	beq.n	8007d6e <_scanf_float+0x6e>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d72:	f1ba 0f01 	cmp.w	sl, #1
 8007d76:	f200 8113 	bhi.w	8007fa0 <_scanf_float+0x2a0>
 8007d7a:	455e      	cmp	r6, fp
 8007d7c:	f200 8105 	bhi.w	8007f8a <_scanf_float+0x28a>
 8007d80:	2501      	movs	r5, #1
 8007d82:	4628      	mov	r0, r5
 8007d84:	b007      	add	sp, #28
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d8e:	2a0d      	cmp	r2, #13
 8007d90:	d8e6      	bhi.n	8007d60 <_scanf_float+0x60>
 8007d92:	a101      	add	r1, pc, #4	; (adr r1, 8007d98 <_scanf_float+0x98>)
 8007d94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d98:	08007ed7 	.word	0x08007ed7
 8007d9c:	08007d61 	.word	0x08007d61
 8007da0:	08007d61 	.word	0x08007d61
 8007da4:	08007d61 	.word	0x08007d61
 8007da8:	08007f37 	.word	0x08007f37
 8007dac:	08007f0f 	.word	0x08007f0f
 8007db0:	08007d61 	.word	0x08007d61
 8007db4:	08007d61 	.word	0x08007d61
 8007db8:	08007ee5 	.word	0x08007ee5
 8007dbc:	08007d61 	.word	0x08007d61
 8007dc0:	08007d61 	.word	0x08007d61
 8007dc4:	08007d61 	.word	0x08007d61
 8007dc8:	08007d61 	.word	0x08007d61
 8007dcc:	08007e9d 	.word	0x08007e9d
 8007dd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007dd4:	e7db      	b.n	8007d8e <_scanf_float+0x8e>
 8007dd6:	290e      	cmp	r1, #14
 8007dd8:	d8c2      	bhi.n	8007d60 <_scanf_float+0x60>
 8007dda:	a001      	add	r0, pc, #4	; (adr r0, 8007de0 <_scanf_float+0xe0>)
 8007ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007de0:	08007e8f 	.word	0x08007e8f
 8007de4:	08007d61 	.word	0x08007d61
 8007de8:	08007e8f 	.word	0x08007e8f
 8007dec:	08007f23 	.word	0x08007f23
 8007df0:	08007d61 	.word	0x08007d61
 8007df4:	08007e3d 	.word	0x08007e3d
 8007df8:	08007e79 	.word	0x08007e79
 8007dfc:	08007e79 	.word	0x08007e79
 8007e00:	08007e79 	.word	0x08007e79
 8007e04:	08007e79 	.word	0x08007e79
 8007e08:	08007e79 	.word	0x08007e79
 8007e0c:	08007e79 	.word	0x08007e79
 8007e10:	08007e79 	.word	0x08007e79
 8007e14:	08007e79 	.word	0x08007e79
 8007e18:	08007e79 	.word	0x08007e79
 8007e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8007e1e:	d809      	bhi.n	8007e34 <_scanf_float+0x134>
 8007e20:	2b60      	cmp	r3, #96	; 0x60
 8007e22:	d8b2      	bhi.n	8007d8a <_scanf_float+0x8a>
 8007e24:	2b54      	cmp	r3, #84	; 0x54
 8007e26:	d077      	beq.n	8007f18 <_scanf_float+0x218>
 8007e28:	2b59      	cmp	r3, #89	; 0x59
 8007e2a:	d199      	bne.n	8007d60 <_scanf_float+0x60>
 8007e2c:	2d07      	cmp	r5, #7
 8007e2e:	d197      	bne.n	8007d60 <_scanf_float+0x60>
 8007e30:	2508      	movs	r5, #8
 8007e32:	e029      	b.n	8007e88 <_scanf_float+0x188>
 8007e34:	2b74      	cmp	r3, #116	; 0x74
 8007e36:	d06f      	beq.n	8007f18 <_scanf_float+0x218>
 8007e38:	2b79      	cmp	r3, #121	; 0x79
 8007e3a:	e7f6      	b.n	8007e2a <_scanf_float+0x12a>
 8007e3c:	6821      	ldr	r1, [r4, #0]
 8007e3e:	05c8      	lsls	r0, r1, #23
 8007e40:	d51a      	bpl.n	8007e78 <_scanf_float+0x178>
 8007e42:	9b02      	ldr	r3, [sp, #8]
 8007e44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e48:	6021      	str	r1, [r4, #0]
 8007e4a:	f109 0901 	add.w	r9, r9, #1
 8007e4e:	b11b      	cbz	r3, 8007e58 <_scanf_float+0x158>
 8007e50:	3b01      	subs	r3, #1
 8007e52:	3201      	adds	r2, #1
 8007e54:	9302      	str	r3, [sp, #8]
 8007e56:	60a2      	str	r2, [r4, #8]
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	3301      	adds	r3, #1
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	f340 8084 	ble.w	8007f78 <_scanf_float+0x278>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	603b      	str	r3, [r7, #0]
 8007e76:	e766      	b.n	8007d46 <_scanf_float+0x46>
 8007e78:	eb1a 0f05 	cmn.w	sl, r5
 8007e7c:	f47f af70 	bne.w	8007d60 <_scanf_float+0x60>
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	f806 3b01 	strb.w	r3, [r6], #1
 8007e8c:	e7e4      	b.n	8007e58 <_scanf_float+0x158>
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	0610      	lsls	r0, r2, #24
 8007e92:	f57f af65 	bpl.w	8007d60 <_scanf_float+0x60>
 8007e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e9a:	e7f4      	b.n	8007e86 <_scanf_float+0x186>
 8007e9c:	f1ba 0f00 	cmp.w	sl, #0
 8007ea0:	d10e      	bne.n	8007ec0 <_scanf_float+0x1c0>
 8007ea2:	f1b9 0f00 	cmp.w	r9, #0
 8007ea6:	d10e      	bne.n	8007ec6 <_scanf_float+0x1c6>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007eae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007eb2:	d108      	bne.n	8007ec6 <_scanf_float+0x1c6>
 8007eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	f04f 0a01 	mov.w	sl, #1
 8007ebe:	e7e3      	b.n	8007e88 <_scanf_float+0x188>
 8007ec0:	f1ba 0f02 	cmp.w	sl, #2
 8007ec4:	d055      	beq.n	8007f72 <_scanf_float+0x272>
 8007ec6:	2d01      	cmp	r5, #1
 8007ec8:	d002      	beq.n	8007ed0 <_scanf_float+0x1d0>
 8007eca:	2d04      	cmp	r5, #4
 8007ecc:	f47f af48 	bne.w	8007d60 <_scanf_float+0x60>
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	b2ed      	uxtb	r5, r5
 8007ed4:	e7d8      	b.n	8007e88 <_scanf_float+0x188>
 8007ed6:	f1ba 0f01 	cmp.w	sl, #1
 8007eda:	f47f af41 	bne.w	8007d60 <_scanf_float+0x60>
 8007ede:	f04f 0a02 	mov.w	sl, #2
 8007ee2:	e7d1      	b.n	8007e88 <_scanf_float+0x188>
 8007ee4:	b97d      	cbnz	r5, 8007f06 <_scanf_float+0x206>
 8007ee6:	f1b9 0f00 	cmp.w	r9, #0
 8007eea:	f47f af3c 	bne.w	8007d66 <_scanf_float+0x66>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ef4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ef8:	f47f af39 	bne.w	8007d6e <_scanf_float+0x6e>
 8007efc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f00:	6022      	str	r2, [r4, #0]
 8007f02:	2501      	movs	r5, #1
 8007f04:	e7c0      	b.n	8007e88 <_scanf_float+0x188>
 8007f06:	2d03      	cmp	r5, #3
 8007f08:	d0e2      	beq.n	8007ed0 <_scanf_float+0x1d0>
 8007f0a:	2d05      	cmp	r5, #5
 8007f0c:	e7de      	b.n	8007ecc <_scanf_float+0x1cc>
 8007f0e:	2d02      	cmp	r5, #2
 8007f10:	f47f af26 	bne.w	8007d60 <_scanf_float+0x60>
 8007f14:	2503      	movs	r5, #3
 8007f16:	e7b7      	b.n	8007e88 <_scanf_float+0x188>
 8007f18:	2d06      	cmp	r5, #6
 8007f1a:	f47f af21 	bne.w	8007d60 <_scanf_float+0x60>
 8007f1e:	2507      	movs	r5, #7
 8007f20:	e7b2      	b.n	8007e88 <_scanf_float+0x188>
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	0591      	lsls	r1, r2, #22
 8007f26:	f57f af1b 	bpl.w	8007d60 <_scanf_float+0x60>
 8007f2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f2e:	6022      	str	r2, [r4, #0]
 8007f30:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f34:	e7a8      	b.n	8007e88 <_scanf_float+0x188>
 8007f36:	6822      	ldr	r2, [r4, #0]
 8007f38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f40:	d006      	beq.n	8007f50 <_scanf_float+0x250>
 8007f42:	0550      	lsls	r0, r2, #21
 8007f44:	f57f af0c 	bpl.w	8007d60 <_scanf_float+0x60>
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	f43f af0f 	beq.w	8007d6e <_scanf_float+0x6e>
 8007f50:	0591      	lsls	r1, r2, #22
 8007f52:	bf58      	it	pl
 8007f54:	9901      	ldrpl	r1, [sp, #4]
 8007f56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f5a:	bf58      	it	pl
 8007f5c:	eba9 0101 	subpl.w	r1, r9, r1
 8007f60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f64:	bf58      	it	pl
 8007f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	f04f 0900 	mov.w	r9, #0
 8007f70:	e78a      	b.n	8007e88 <_scanf_float+0x188>
 8007f72:	f04f 0a03 	mov.w	sl, #3
 8007f76:	e787      	b.n	8007e88 <_scanf_float+0x188>
 8007f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4798      	blx	r3
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f43f aedf 	beq.w	8007d46 <_scanf_float+0x46>
 8007f88:	e6ea      	b.n	8007d60 <_scanf_float+0x60>
 8007f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f92:	463a      	mov	r2, r7
 8007f94:	4640      	mov	r0, r8
 8007f96:	4798      	blx	r3
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	e6ec      	b.n	8007d7a <_scanf_float+0x7a>
 8007fa0:	1e6b      	subs	r3, r5, #1
 8007fa2:	2b06      	cmp	r3, #6
 8007fa4:	d825      	bhi.n	8007ff2 <_scanf_float+0x2f2>
 8007fa6:	2d02      	cmp	r5, #2
 8007fa8:	d836      	bhi.n	8008018 <_scanf_float+0x318>
 8007faa:	455e      	cmp	r6, fp
 8007fac:	f67f aee8 	bls.w	8007d80 <_scanf_float+0x80>
 8007fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fb8:	463a      	mov	r2, r7
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4798      	blx	r3
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	e7f1      	b.n	8007faa <_scanf_float+0x2aa>
 8007fc6:	9802      	ldr	r0, [sp, #8]
 8007fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fcc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007fd0:	9002      	str	r0, [sp, #8]
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4798      	blx	r3
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fe2:	fa5f fa8a 	uxtb.w	sl, sl
 8007fe6:	f1ba 0f02 	cmp.w	sl, #2
 8007fea:	d1ec      	bne.n	8007fc6 <_scanf_float+0x2c6>
 8007fec:	3d03      	subs	r5, #3
 8007fee:	b2ed      	uxtb	r5, r5
 8007ff0:	1b76      	subs	r6, r6, r5
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	05da      	lsls	r2, r3, #23
 8007ff6:	d52f      	bpl.n	8008058 <_scanf_float+0x358>
 8007ff8:	055b      	lsls	r3, r3, #21
 8007ffa:	d510      	bpl.n	800801e <_scanf_float+0x31e>
 8007ffc:	455e      	cmp	r6, fp
 8007ffe:	f67f aebf 	bls.w	8007d80 <_scanf_float+0x80>
 8008002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800800a:	463a      	mov	r2, r7
 800800c:	4640      	mov	r0, r8
 800800e:	4798      	blx	r3
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	3b01      	subs	r3, #1
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	e7f1      	b.n	8007ffc <_scanf_float+0x2fc>
 8008018:	46aa      	mov	sl, r5
 800801a:	9602      	str	r6, [sp, #8]
 800801c:	e7df      	b.n	8007fde <_scanf_float+0x2de>
 800801e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	2965      	cmp	r1, #101	; 0x65
 8008026:	f103 33ff 	add.w	r3, r3, #4294967295
 800802a:	f106 35ff 	add.w	r5, r6, #4294967295
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	d00c      	beq.n	800804c <_scanf_float+0x34c>
 8008032:	2945      	cmp	r1, #69	; 0x45
 8008034:	d00a      	beq.n	800804c <_scanf_float+0x34c>
 8008036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800803a:	463a      	mov	r2, r7
 800803c:	4640      	mov	r0, r8
 800803e:	4798      	blx	r3
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008046:	3b01      	subs	r3, #1
 8008048:	1eb5      	subs	r5, r6, #2
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008050:	463a      	mov	r2, r7
 8008052:	4640      	mov	r0, r8
 8008054:	4798      	blx	r3
 8008056:	462e      	mov	r6, r5
 8008058:	6825      	ldr	r5, [r4, #0]
 800805a:	f015 0510 	ands.w	r5, r5, #16
 800805e:	d158      	bne.n	8008112 <_scanf_float+0x412>
 8008060:	7035      	strb	r5, [r6, #0]
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806c:	d11c      	bne.n	80080a8 <_scanf_float+0x3a8>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	454b      	cmp	r3, r9
 8008072:	eba3 0209 	sub.w	r2, r3, r9
 8008076:	d124      	bne.n	80080c2 <_scanf_float+0x3c2>
 8008078:	2200      	movs	r2, #0
 800807a:	4659      	mov	r1, fp
 800807c:	4640      	mov	r0, r8
 800807e:	f000 fe9d 	bl	8008dbc <_strtod_r>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	6821      	ldr	r1, [r4, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f011 0f02 	tst.w	r1, #2
 800808c:	ec57 6b10 	vmov	r6, r7, d0
 8008090:	f103 0204 	add.w	r2, r3, #4
 8008094:	d020      	beq.n	80080d8 <_scanf_float+0x3d8>
 8008096:	9903      	ldr	r1, [sp, #12]
 8008098:	600a      	str	r2, [r1, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	e9c3 6700 	strd	r6, r7, [r3]
 80080a0:	68e3      	ldr	r3, [r4, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60e3      	str	r3, [r4, #12]
 80080a6:	e66c      	b.n	8007d82 <_scanf_float+0x82>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0e4      	beq.n	8008078 <_scanf_float+0x378>
 80080ae:	9905      	ldr	r1, [sp, #20]
 80080b0:	230a      	movs	r3, #10
 80080b2:	462a      	mov	r2, r5
 80080b4:	3101      	adds	r1, #1
 80080b6:	4640      	mov	r0, r8
 80080b8:	f000 ff0a 	bl	8008ed0 <_strtol_r>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	9e05      	ldr	r6, [sp, #20]
 80080c0:	1ac2      	subs	r2, r0, r3
 80080c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80080c6:	429e      	cmp	r6, r3
 80080c8:	bf28      	it	cs
 80080ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80080ce:	4912      	ldr	r1, [pc, #72]	; (8008118 <_scanf_float+0x418>)
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 f82b 	bl	800812c <siprintf>
 80080d6:	e7cf      	b.n	8008078 <_scanf_float+0x378>
 80080d8:	f011 0f04 	tst.w	r1, #4
 80080dc:	9903      	ldr	r1, [sp, #12]
 80080de:	600a      	str	r2, [r1, #0]
 80080e0:	d1db      	bne.n	800809a <_scanf_float+0x39a>
 80080e2:	f8d3 8000 	ldr.w	r8, [r3]
 80080e6:	ee10 2a10 	vmov	r2, s0
 80080ea:	ee10 0a10 	vmov	r0, s0
 80080ee:	463b      	mov	r3, r7
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fd23 	bl	8000b3c <__aeabi_dcmpun>
 80080f6:	b128      	cbz	r0, 8008104 <_scanf_float+0x404>
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <_scanf_float+0x41c>)
 80080fa:	f000 f811 	bl	8008120 <nanf>
 80080fe:	ed88 0a00 	vstr	s0, [r8]
 8008102:	e7cd      	b.n	80080a0 <_scanf_float+0x3a0>
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fd76 	bl	8000bf8 <__aeabi_d2f>
 800810c:	f8c8 0000 	str.w	r0, [r8]
 8008110:	e7c6      	b.n	80080a0 <_scanf_float+0x3a0>
 8008112:	2500      	movs	r5, #0
 8008114:	e635      	b.n	8007d82 <_scanf_float+0x82>
 8008116:	bf00      	nop
 8008118:	0800bf08 	.word	0x0800bf08
 800811c:	0800c320 	.word	0x0800c320

08008120 <nanf>:
 8008120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008128 <nanf+0x8>
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	7fc00000 	.word	0x7fc00000

0800812c <siprintf>:
 800812c:	b40e      	push	{r1, r2, r3}
 800812e:	b500      	push	{lr}
 8008130:	b09c      	sub	sp, #112	; 0x70
 8008132:	ab1d      	add	r3, sp, #116	; 0x74
 8008134:	9002      	str	r0, [sp, #8]
 8008136:	9006      	str	r0, [sp, #24]
 8008138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <siprintf+0x38>)
 800813e:	9107      	str	r1, [sp, #28]
 8008140:	9104      	str	r1, [sp, #16]
 8008142:	4909      	ldr	r1, [pc, #36]	; (8008168 <siprintf+0x3c>)
 8008144:	f853 2b04 	ldr.w	r2, [r3], #4
 8008148:	9105      	str	r1, [sp, #20]
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	a902      	add	r1, sp, #8
 8008150:	f002 fe98 	bl	800ae84 <_svfiprintf_r>
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	b01c      	add	sp, #112	; 0x70
 800815c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008160:	b003      	add	sp, #12
 8008162:	4770      	bx	lr
 8008164:	200000d8 	.word	0x200000d8
 8008168:	ffff0208 	.word	0xffff0208

0800816c <sulp>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	ec45 4b10 	vmov	d0, r4, r5
 8008176:	4616      	mov	r6, r2
 8008178:	f002 fc20 	bl	800a9bc <__ulp>
 800817c:	ec51 0b10 	vmov	r0, r1, d0
 8008180:	b17e      	cbz	r6, 80081a2 <sulp+0x36>
 8008182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800818a:	2b00      	cmp	r3, #0
 800818c:	dd09      	ble.n	80081a2 <sulp+0x36>
 800818e:	051b      	lsls	r3, r3, #20
 8008190:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008194:	2400      	movs	r4, #0
 8008196:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800819a:	4622      	mov	r2, r4
 800819c:	462b      	mov	r3, r5
 800819e:	f7f8 fa33 	bl	8000608 <__aeabi_dmul>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	0000      	movs	r0, r0
	...

080081a8 <_strtod_l>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	b0a3      	sub	sp, #140	; 0x8c
 80081ae:	461f      	mov	r7, r3
 80081b0:	2300      	movs	r3, #0
 80081b2:	931e      	str	r3, [sp, #120]	; 0x78
 80081b4:	4ba4      	ldr	r3, [pc, #656]	; (8008448 <_strtod_l+0x2a0>)
 80081b6:	9219      	str	r2, [sp, #100]	; 0x64
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9307      	str	r3, [sp, #28]
 80081bc:	4604      	mov	r4, r0
 80081be:	4618      	mov	r0, r3
 80081c0:	4688      	mov	r8, r1
 80081c2:	f7f8 f80d 	bl	80001e0 <strlen>
 80081c6:	f04f 0a00 	mov.w	sl, #0
 80081ca:	4605      	mov	r5, r0
 80081cc:	f04f 0b00 	mov.w	fp, #0
 80081d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80081d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081d6:	781a      	ldrb	r2, [r3, #0]
 80081d8:	2a2b      	cmp	r2, #43	; 0x2b
 80081da:	d04c      	beq.n	8008276 <_strtod_l+0xce>
 80081dc:	d839      	bhi.n	8008252 <_strtod_l+0xaa>
 80081de:	2a0d      	cmp	r2, #13
 80081e0:	d832      	bhi.n	8008248 <_strtod_l+0xa0>
 80081e2:	2a08      	cmp	r2, #8
 80081e4:	d832      	bhi.n	800824c <_strtod_l+0xa4>
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d03c      	beq.n	8008264 <_strtod_l+0xbc>
 80081ea:	2300      	movs	r3, #0
 80081ec:	930e      	str	r3, [sp, #56]	; 0x38
 80081ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80081f0:	7833      	ldrb	r3, [r6, #0]
 80081f2:	2b30      	cmp	r3, #48	; 0x30
 80081f4:	f040 80b4 	bne.w	8008360 <_strtod_l+0x1b8>
 80081f8:	7873      	ldrb	r3, [r6, #1]
 80081fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081fe:	2b58      	cmp	r3, #88	; 0x58
 8008200:	d16c      	bne.n	80082dc <_strtod_l+0x134>
 8008202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	ab1e      	add	r3, sp, #120	; 0x78
 8008208:	9702      	str	r7, [sp, #8]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4a8f      	ldr	r2, [pc, #572]	; (800844c <_strtod_l+0x2a4>)
 800820e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008210:	a91d      	add	r1, sp, #116	; 0x74
 8008212:	4620      	mov	r0, r4
 8008214:	f001 fd40 	bl	8009c98 <__gethex>
 8008218:	f010 0707 	ands.w	r7, r0, #7
 800821c:	4605      	mov	r5, r0
 800821e:	d005      	beq.n	800822c <_strtod_l+0x84>
 8008220:	2f06      	cmp	r7, #6
 8008222:	d12a      	bne.n	800827a <_strtod_l+0xd2>
 8008224:	3601      	adds	r6, #1
 8008226:	2300      	movs	r3, #0
 8008228:	961d      	str	r6, [sp, #116]	; 0x74
 800822a:	930e      	str	r3, [sp, #56]	; 0x38
 800822c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 8596 	bne.w	8008d60 <_strtod_l+0xbb8>
 8008234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008236:	b1db      	cbz	r3, 8008270 <_strtod_l+0xc8>
 8008238:	4652      	mov	r2, sl
 800823a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800823e:	ec43 2b10 	vmov	d0, r2, r3
 8008242:	b023      	add	sp, #140	; 0x8c
 8008244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	2a20      	cmp	r2, #32
 800824a:	d1ce      	bne.n	80081ea <_strtod_l+0x42>
 800824c:	3301      	adds	r3, #1
 800824e:	931d      	str	r3, [sp, #116]	; 0x74
 8008250:	e7c0      	b.n	80081d4 <_strtod_l+0x2c>
 8008252:	2a2d      	cmp	r2, #45	; 0x2d
 8008254:	d1c9      	bne.n	80081ea <_strtod_l+0x42>
 8008256:	2201      	movs	r2, #1
 8008258:	920e      	str	r2, [sp, #56]	; 0x38
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	921d      	str	r2, [sp, #116]	; 0x74
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1c4      	bne.n	80081ee <_strtod_l+0x46>
 8008264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008266:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 8576 	bne.w	8008d5c <_strtod_l+0xbb4>
 8008270:	4652      	mov	r2, sl
 8008272:	465b      	mov	r3, fp
 8008274:	e7e3      	b.n	800823e <_strtod_l+0x96>
 8008276:	2200      	movs	r2, #0
 8008278:	e7ee      	b.n	8008258 <_strtod_l+0xb0>
 800827a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800827c:	b13a      	cbz	r2, 800828e <_strtod_l+0xe6>
 800827e:	2135      	movs	r1, #53	; 0x35
 8008280:	a820      	add	r0, sp, #128	; 0x80
 8008282:	f002 fca6 	bl	800abd2 <__copybits>
 8008286:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008288:	4620      	mov	r0, r4
 800828a:	f002 f86b 	bl	800a364 <_Bfree>
 800828e:	3f01      	subs	r7, #1
 8008290:	2f05      	cmp	r7, #5
 8008292:	d807      	bhi.n	80082a4 <_strtod_l+0xfc>
 8008294:	e8df f007 	tbb	[pc, r7]
 8008298:	1d180b0e 	.word	0x1d180b0e
 800829c:	030e      	.short	0x030e
 800829e:	f04f 0b00 	mov.w	fp, #0
 80082a2:	46da      	mov	sl, fp
 80082a4:	0728      	lsls	r0, r5, #28
 80082a6:	d5c1      	bpl.n	800822c <_strtod_l+0x84>
 80082a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082ac:	e7be      	b.n	800822c <_strtod_l+0x84>
 80082ae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80082b2:	e7f7      	b.n	80082a4 <_strtod_l+0xfc>
 80082b4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80082b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082c6:	e7ed      	b.n	80082a4 <_strtod_l+0xfc>
 80082c8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008450 <_strtod_l+0x2a8>
 80082cc:	f04f 0a00 	mov.w	sl, #0
 80082d0:	e7e8      	b.n	80082a4 <_strtod_l+0xfc>
 80082d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80082d6:	f04f 3aff 	mov.w	sl, #4294967295
 80082da:	e7e3      	b.n	80082a4 <_strtod_l+0xfc>
 80082dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	921d      	str	r2, [sp, #116]	; 0x74
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b30      	cmp	r3, #48	; 0x30
 80082e6:	d0f9      	beq.n	80082dc <_strtod_l+0x134>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d09f      	beq.n	800822c <_strtod_l+0x84>
 80082ec:	2301      	movs	r3, #1
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082f6:	930a      	str	r3, [sp, #40]	; 0x28
 80082f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80082fc:	464f      	mov	r7, r9
 80082fe:	220a      	movs	r2, #10
 8008300:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008302:	7806      	ldrb	r6, [r0, #0]
 8008304:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008308:	b2d9      	uxtb	r1, r3
 800830a:	2909      	cmp	r1, #9
 800830c:	d92a      	bls.n	8008364 <_strtod_l+0x1bc>
 800830e:	9907      	ldr	r1, [sp, #28]
 8008310:	462a      	mov	r2, r5
 8008312:	f002 fed1 	bl	800b0b8 <strncmp>
 8008316:	b398      	cbz	r0, 8008380 <_strtod_l+0x1d8>
 8008318:	2000      	movs	r0, #0
 800831a:	4633      	mov	r3, r6
 800831c:	463d      	mov	r5, r7
 800831e:	9007      	str	r0, [sp, #28]
 8008320:	4602      	mov	r2, r0
 8008322:	2b65      	cmp	r3, #101	; 0x65
 8008324:	d001      	beq.n	800832a <_strtod_l+0x182>
 8008326:	2b45      	cmp	r3, #69	; 0x45
 8008328:	d118      	bne.n	800835c <_strtod_l+0x1b4>
 800832a:	b91d      	cbnz	r5, 8008334 <_strtod_l+0x18c>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4303      	orrs	r3, r0
 8008330:	d098      	beq.n	8008264 <_strtod_l+0xbc>
 8008332:	2500      	movs	r5, #0
 8008334:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008338:	f108 0301 	add.w	r3, r8, #1
 800833c:	931d      	str	r3, [sp, #116]	; 0x74
 800833e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008342:	2b2b      	cmp	r3, #43	; 0x2b
 8008344:	d075      	beq.n	8008432 <_strtod_l+0x28a>
 8008346:	2b2d      	cmp	r3, #45	; 0x2d
 8008348:	d07b      	beq.n	8008442 <_strtod_l+0x29a>
 800834a:	f04f 0c00 	mov.w	ip, #0
 800834e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008352:	2909      	cmp	r1, #9
 8008354:	f240 8082 	bls.w	800845c <_strtod_l+0x2b4>
 8008358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800835c:	2600      	movs	r6, #0
 800835e:	e09d      	b.n	800849c <_strtod_l+0x2f4>
 8008360:	2300      	movs	r3, #0
 8008362:	e7c4      	b.n	80082ee <_strtod_l+0x146>
 8008364:	2f08      	cmp	r7, #8
 8008366:	bfd8      	it	le
 8008368:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800836a:	f100 0001 	add.w	r0, r0, #1
 800836e:	bfda      	itte	le
 8008370:	fb02 3301 	mlale	r3, r2, r1, r3
 8008374:	9309      	strle	r3, [sp, #36]	; 0x24
 8008376:	fb02 3909 	mlagt	r9, r2, r9, r3
 800837a:	3701      	adds	r7, #1
 800837c:	901d      	str	r0, [sp, #116]	; 0x74
 800837e:	e7bf      	b.n	8008300 <_strtod_l+0x158>
 8008380:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008382:	195a      	adds	r2, r3, r5
 8008384:	921d      	str	r2, [sp, #116]	; 0x74
 8008386:	5d5b      	ldrb	r3, [r3, r5]
 8008388:	2f00      	cmp	r7, #0
 800838a:	d037      	beq.n	80083fc <_strtod_l+0x254>
 800838c:	9007      	str	r0, [sp, #28]
 800838e:	463d      	mov	r5, r7
 8008390:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008394:	2a09      	cmp	r2, #9
 8008396:	d912      	bls.n	80083be <_strtod_l+0x216>
 8008398:	2201      	movs	r2, #1
 800839a:	e7c2      	b.n	8008322 <_strtod_l+0x17a>
 800839c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	921d      	str	r2, [sp, #116]	; 0x74
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	3001      	adds	r0, #1
 80083a6:	2b30      	cmp	r3, #48	; 0x30
 80083a8:	d0f8      	beq.n	800839c <_strtod_l+0x1f4>
 80083aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80083ae:	2a08      	cmp	r2, #8
 80083b0:	f200 84db 	bhi.w	8008d6a <_strtod_l+0xbc2>
 80083b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80083b6:	9007      	str	r0, [sp, #28]
 80083b8:	2000      	movs	r0, #0
 80083ba:	920a      	str	r2, [sp, #40]	; 0x28
 80083bc:	4605      	mov	r5, r0
 80083be:	3b30      	subs	r3, #48	; 0x30
 80083c0:	f100 0201 	add.w	r2, r0, #1
 80083c4:	d014      	beq.n	80083f0 <_strtod_l+0x248>
 80083c6:	9907      	ldr	r1, [sp, #28]
 80083c8:	4411      	add	r1, r2
 80083ca:	9107      	str	r1, [sp, #28]
 80083cc:	462a      	mov	r2, r5
 80083ce:	eb00 0e05 	add.w	lr, r0, r5
 80083d2:	210a      	movs	r1, #10
 80083d4:	4572      	cmp	r2, lr
 80083d6:	d113      	bne.n	8008400 <_strtod_l+0x258>
 80083d8:	182a      	adds	r2, r5, r0
 80083da:	2a08      	cmp	r2, #8
 80083dc:	f105 0501 	add.w	r5, r5, #1
 80083e0:	4405      	add	r5, r0
 80083e2:	dc1c      	bgt.n	800841e <_strtod_l+0x276>
 80083e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e6:	220a      	movs	r2, #10
 80083e8:	fb02 3301 	mla	r3, r2, r1, r3
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	2200      	movs	r2, #0
 80083f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083f2:	1c59      	adds	r1, r3, #1
 80083f4:	911d      	str	r1, [sp, #116]	; 0x74
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	4610      	mov	r0, r2
 80083fa:	e7c9      	b.n	8008390 <_strtod_l+0x1e8>
 80083fc:	4638      	mov	r0, r7
 80083fe:	e7d2      	b.n	80083a6 <_strtod_l+0x1fe>
 8008400:	2a08      	cmp	r2, #8
 8008402:	dc04      	bgt.n	800840e <_strtod_l+0x266>
 8008404:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008406:	434e      	muls	r6, r1
 8008408:	9609      	str	r6, [sp, #36]	; 0x24
 800840a:	3201      	adds	r2, #1
 800840c:	e7e2      	b.n	80083d4 <_strtod_l+0x22c>
 800840e:	f102 0c01 	add.w	ip, r2, #1
 8008412:	f1bc 0f10 	cmp.w	ip, #16
 8008416:	bfd8      	it	le
 8008418:	fb01 f909 	mulle.w	r9, r1, r9
 800841c:	e7f5      	b.n	800840a <_strtod_l+0x262>
 800841e:	2d10      	cmp	r5, #16
 8008420:	bfdc      	itt	le
 8008422:	220a      	movle	r2, #10
 8008424:	fb02 3909 	mlale	r9, r2, r9, r3
 8008428:	e7e1      	b.n	80083ee <_strtod_l+0x246>
 800842a:	2300      	movs	r3, #0
 800842c:	9307      	str	r3, [sp, #28]
 800842e:	2201      	movs	r2, #1
 8008430:	e77c      	b.n	800832c <_strtod_l+0x184>
 8008432:	f04f 0c00 	mov.w	ip, #0
 8008436:	f108 0302 	add.w	r3, r8, #2
 800843a:	931d      	str	r3, [sp, #116]	; 0x74
 800843c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008440:	e785      	b.n	800834e <_strtod_l+0x1a6>
 8008442:	f04f 0c01 	mov.w	ip, #1
 8008446:	e7f6      	b.n	8008436 <_strtod_l+0x28e>
 8008448:	0800c160 	.word	0x0800c160
 800844c:	0800bf10 	.word	0x0800bf10
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008456:	1c59      	adds	r1, r3, #1
 8008458:	911d      	str	r1, [sp, #116]	; 0x74
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	d0f9      	beq.n	8008454 <_strtod_l+0x2ac>
 8008460:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008464:	2908      	cmp	r1, #8
 8008466:	f63f af79 	bhi.w	800835c <_strtod_l+0x1b4>
 800846a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800846e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008470:	9308      	str	r3, [sp, #32]
 8008472:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008474:	1c59      	adds	r1, r3, #1
 8008476:	911d      	str	r1, [sp, #116]	; 0x74
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800847e:	2e09      	cmp	r6, #9
 8008480:	d937      	bls.n	80084f2 <_strtod_l+0x34a>
 8008482:	9e08      	ldr	r6, [sp, #32]
 8008484:	1b89      	subs	r1, r1, r6
 8008486:	2908      	cmp	r1, #8
 8008488:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800848c:	dc02      	bgt.n	8008494 <_strtod_l+0x2ec>
 800848e:	4576      	cmp	r6, lr
 8008490:	bfa8      	it	ge
 8008492:	4676      	movge	r6, lr
 8008494:	f1bc 0f00 	cmp.w	ip, #0
 8008498:	d000      	beq.n	800849c <_strtod_l+0x2f4>
 800849a:	4276      	negs	r6, r6
 800849c:	2d00      	cmp	r5, #0
 800849e:	d14f      	bne.n	8008540 <_strtod_l+0x398>
 80084a0:	9904      	ldr	r1, [sp, #16]
 80084a2:	4301      	orrs	r1, r0
 80084a4:	f47f aec2 	bne.w	800822c <_strtod_l+0x84>
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	f47f aedb 	bne.w	8008264 <_strtod_l+0xbc>
 80084ae:	2b69      	cmp	r3, #105	; 0x69
 80084b0:	d027      	beq.n	8008502 <_strtod_l+0x35a>
 80084b2:	dc24      	bgt.n	80084fe <_strtod_l+0x356>
 80084b4:	2b49      	cmp	r3, #73	; 0x49
 80084b6:	d024      	beq.n	8008502 <_strtod_l+0x35a>
 80084b8:	2b4e      	cmp	r3, #78	; 0x4e
 80084ba:	f47f aed3 	bne.w	8008264 <_strtod_l+0xbc>
 80084be:	499e      	ldr	r1, [pc, #632]	; (8008738 <_strtod_l+0x590>)
 80084c0:	a81d      	add	r0, sp, #116	; 0x74
 80084c2:	f001 fe41 	bl	800a148 <__match>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f aecc 	beq.w	8008264 <_strtod_l+0xbc>
 80084cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b28      	cmp	r3, #40	; 0x28
 80084d2:	d12d      	bne.n	8008530 <_strtod_l+0x388>
 80084d4:	4999      	ldr	r1, [pc, #612]	; (800873c <_strtod_l+0x594>)
 80084d6:	aa20      	add	r2, sp, #128	; 0x80
 80084d8:	a81d      	add	r0, sp, #116	; 0x74
 80084da:	f001 fe49 	bl	800a170 <__hexnan>
 80084de:	2805      	cmp	r0, #5
 80084e0:	d126      	bne.n	8008530 <_strtod_l+0x388>
 80084e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80084e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80084ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80084f0:	e69c      	b.n	800822c <_strtod_l+0x84>
 80084f2:	210a      	movs	r1, #10
 80084f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80084f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80084fc:	e7b9      	b.n	8008472 <_strtod_l+0x2ca>
 80084fe:	2b6e      	cmp	r3, #110	; 0x6e
 8008500:	e7db      	b.n	80084ba <_strtod_l+0x312>
 8008502:	498f      	ldr	r1, [pc, #572]	; (8008740 <_strtod_l+0x598>)
 8008504:	a81d      	add	r0, sp, #116	; 0x74
 8008506:	f001 fe1f 	bl	800a148 <__match>
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f aeaa 	beq.w	8008264 <_strtod_l+0xbc>
 8008510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008512:	498c      	ldr	r1, [pc, #560]	; (8008744 <_strtod_l+0x59c>)
 8008514:	3b01      	subs	r3, #1
 8008516:	a81d      	add	r0, sp, #116	; 0x74
 8008518:	931d      	str	r3, [sp, #116]	; 0x74
 800851a:	f001 fe15 	bl	800a148 <__match>
 800851e:	b910      	cbnz	r0, 8008526 <_strtod_l+0x37e>
 8008520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008522:	3301      	adds	r3, #1
 8008524:	931d      	str	r3, [sp, #116]	; 0x74
 8008526:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008754 <_strtod_l+0x5ac>
 800852a:	f04f 0a00 	mov.w	sl, #0
 800852e:	e67d      	b.n	800822c <_strtod_l+0x84>
 8008530:	4885      	ldr	r0, [pc, #532]	; (8008748 <_strtod_l+0x5a0>)
 8008532:	f002 fda9 	bl	800b088 <nan>
 8008536:	ed8d 0b04 	vstr	d0, [sp, #16]
 800853a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800853e:	e675      	b.n	800822c <_strtod_l+0x84>
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008544:	1af3      	subs	r3, r6, r3
 8008546:	2f00      	cmp	r7, #0
 8008548:	bf08      	it	eq
 800854a:	462f      	moveq	r7, r5
 800854c:	2d10      	cmp	r5, #16
 800854e:	9308      	str	r3, [sp, #32]
 8008550:	46a8      	mov	r8, r5
 8008552:	bfa8      	it	ge
 8008554:	f04f 0810 	movge.w	r8, #16
 8008558:	f7f7 ffdc 	bl	8000514 <__aeabi_ui2d>
 800855c:	2d09      	cmp	r5, #9
 800855e:	4682      	mov	sl, r0
 8008560:	468b      	mov	fp, r1
 8008562:	dd13      	ble.n	800858c <_strtod_l+0x3e4>
 8008564:	4b79      	ldr	r3, [pc, #484]	; (800874c <_strtod_l+0x5a4>)
 8008566:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800856a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800856e:	f7f8 f84b 	bl	8000608 <__aeabi_dmul>
 8008572:	4682      	mov	sl, r0
 8008574:	4648      	mov	r0, r9
 8008576:	468b      	mov	fp, r1
 8008578:	f7f7 ffcc 	bl	8000514 <__aeabi_ui2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4650      	mov	r0, sl
 8008582:	4659      	mov	r1, fp
 8008584:	f7f7 fe8a 	bl	800029c <__adddf3>
 8008588:	4682      	mov	sl, r0
 800858a:	468b      	mov	fp, r1
 800858c:	2d0f      	cmp	r5, #15
 800858e:	dc38      	bgt.n	8008602 <_strtod_l+0x45a>
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f43f ae4a 	beq.w	800822c <_strtod_l+0x84>
 8008598:	dd24      	ble.n	80085e4 <_strtod_l+0x43c>
 800859a:	2b16      	cmp	r3, #22
 800859c:	dc0b      	bgt.n	80085b6 <_strtod_l+0x40e>
 800859e:	4d6b      	ldr	r5, [pc, #428]	; (800874c <_strtod_l+0x5a4>)
 80085a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80085a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80085a8:	4652      	mov	r2, sl
 80085aa:	465b      	mov	r3, fp
 80085ac:	f7f8 f82c 	bl	8000608 <__aeabi_dmul>
 80085b0:	4682      	mov	sl, r0
 80085b2:	468b      	mov	fp, r1
 80085b4:	e63a      	b.n	800822c <_strtod_l+0x84>
 80085b6:	9a08      	ldr	r2, [sp, #32]
 80085b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80085bc:	4293      	cmp	r3, r2
 80085be:	db20      	blt.n	8008602 <_strtod_l+0x45a>
 80085c0:	4c62      	ldr	r4, [pc, #392]	; (800874c <_strtod_l+0x5a4>)
 80085c2:	f1c5 050f 	rsb	r5, r5, #15
 80085c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085ca:	4652      	mov	r2, sl
 80085cc:	465b      	mov	r3, fp
 80085ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	1b5d      	subs	r5, r3, r5
 80085da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085e2:	e7e3      	b.n	80085ac <_strtod_l+0x404>
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	3316      	adds	r3, #22
 80085e8:	db0b      	blt.n	8008602 <_strtod_l+0x45a>
 80085ea:	9b07      	ldr	r3, [sp, #28]
 80085ec:	4a57      	ldr	r2, [pc, #348]	; (800874c <_strtod_l+0x5a4>)
 80085ee:	1b9e      	subs	r6, r3, r6
 80085f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80085f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085f8:	4650      	mov	r0, sl
 80085fa:	4659      	mov	r1, fp
 80085fc:	f7f8 f92e 	bl	800085c <__aeabi_ddiv>
 8008600:	e7d6      	b.n	80085b0 <_strtod_l+0x408>
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	eba5 0808 	sub.w	r8, r5, r8
 8008608:	4498      	add	r8, r3
 800860a:	f1b8 0f00 	cmp.w	r8, #0
 800860e:	dd71      	ble.n	80086f4 <_strtod_l+0x54c>
 8008610:	f018 030f 	ands.w	r3, r8, #15
 8008614:	d00a      	beq.n	800862c <_strtod_l+0x484>
 8008616:	494d      	ldr	r1, [pc, #308]	; (800874c <_strtod_l+0x5a4>)
 8008618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008624:	f7f7 fff0 	bl	8000608 <__aeabi_dmul>
 8008628:	4682      	mov	sl, r0
 800862a:	468b      	mov	fp, r1
 800862c:	f038 080f 	bics.w	r8, r8, #15
 8008630:	d04d      	beq.n	80086ce <_strtod_l+0x526>
 8008632:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008636:	dd22      	ble.n	800867e <_strtod_l+0x4d6>
 8008638:	2500      	movs	r5, #0
 800863a:	462e      	mov	r6, r5
 800863c:	9509      	str	r5, [sp, #36]	; 0x24
 800863e:	9507      	str	r5, [sp, #28]
 8008640:	2322      	movs	r3, #34	; 0x22
 8008642:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008754 <_strtod_l+0x5ac>
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	f04f 0a00 	mov.w	sl, #0
 800864c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	f43f adec 	beq.w	800822c <_strtod_l+0x84>
 8008654:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008656:	4620      	mov	r0, r4
 8008658:	f001 fe84 	bl	800a364 <_Bfree>
 800865c:	9907      	ldr	r1, [sp, #28]
 800865e:	4620      	mov	r0, r4
 8008660:	f001 fe80 	bl	800a364 <_Bfree>
 8008664:	4631      	mov	r1, r6
 8008666:	4620      	mov	r0, r4
 8008668:	f001 fe7c 	bl	800a364 <_Bfree>
 800866c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866e:	4620      	mov	r0, r4
 8008670:	f001 fe78 	bl	800a364 <_Bfree>
 8008674:	4629      	mov	r1, r5
 8008676:	4620      	mov	r0, r4
 8008678:	f001 fe74 	bl	800a364 <_Bfree>
 800867c:	e5d6      	b.n	800822c <_strtod_l+0x84>
 800867e:	2300      	movs	r3, #0
 8008680:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008684:	4650      	mov	r0, sl
 8008686:	4659      	mov	r1, fp
 8008688:	4699      	mov	r9, r3
 800868a:	f1b8 0f01 	cmp.w	r8, #1
 800868e:	dc21      	bgt.n	80086d4 <_strtod_l+0x52c>
 8008690:	b10b      	cbz	r3, 8008696 <_strtod_l+0x4ee>
 8008692:	4682      	mov	sl, r0
 8008694:	468b      	mov	fp, r1
 8008696:	4b2e      	ldr	r3, [pc, #184]	; (8008750 <_strtod_l+0x5a8>)
 8008698:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800869c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80086a0:	4652      	mov	r2, sl
 80086a2:	465b      	mov	r3, fp
 80086a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80086a8:	f7f7 ffae 	bl	8000608 <__aeabi_dmul>
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <_strtod_l+0x5ac>)
 80086ae:	460a      	mov	r2, r1
 80086b0:	400b      	ands	r3, r1
 80086b2:	4929      	ldr	r1, [pc, #164]	; (8008758 <_strtod_l+0x5b0>)
 80086b4:	428b      	cmp	r3, r1
 80086b6:	4682      	mov	sl, r0
 80086b8:	d8be      	bhi.n	8008638 <_strtod_l+0x490>
 80086ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086be:	428b      	cmp	r3, r1
 80086c0:	bf86      	itte	hi
 80086c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800875c <_strtod_l+0x5b4>
 80086c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80086ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80086ce:	2300      	movs	r3, #0
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	e081      	b.n	80087d8 <_strtod_l+0x630>
 80086d4:	f018 0f01 	tst.w	r8, #1
 80086d8:	d007      	beq.n	80086ea <_strtod_l+0x542>
 80086da:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <_strtod_l+0x5a8>)
 80086dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	2301      	movs	r3, #1
 80086ea:	f109 0901 	add.w	r9, r9, #1
 80086ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086f2:	e7ca      	b.n	800868a <_strtod_l+0x4e2>
 80086f4:	d0eb      	beq.n	80086ce <_strtod_l+0x526>
 80086f6:	f1c8 0800 	rsb	r8, r8, #0
 80086fa:	f018 020f 	ands.w	r2, r8, #15
 80086fe:	d00a      	beq.n	8008716 <_strtod_l+0x56e>
 8008700:	4b12      	ldr	r3, [pc, #72]	; (800874c <_strtod_l+0x5a4>)
 8008702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008706:	4650      	mov	r0, sl
 8008708:	4659      	mov	r1, fp
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f8 f8a5 	bl	800085c <__aeabi_ddiv>
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	ea5f 1828 	movs.w	r8, r8, asr #4
 800871a:	d0d8      	beq.n	80086ce <_strtod_l+0x526>
 800871c:	f1b8 0f1f 	cmp.w	r8, #31
 8008720:	dd1e      	ble.n	8008760 <_strtod_l+0x5b8>
 8008722:	2500      	movs	r5, #0
 8008724:	462e      	mov	r6, r5
 8008726:	9509      	str	r5, [sp, #36]	; 0x24
 8008728:	9507      	str	r5, [sp, #28]
 800872a:	2322      	movs	r3, #34	; 0x22
 800872c:	f04f 0a00 	mov.w	sl, #0
 8008730:	f04f 0b00 	mov.w	fp, #0
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	e789      	b.n	800864c <_strtod_l+0x4a4>
 8008738:	0800bee1 	.word	0x0800bee1
 800873c:	0800bf24 	.word	0x0800bf24
 8008740:	0800bed9 	.word	0x0800bed9
 8008744:	0800c064 	.word	0x0800c064
 8008748:	0800c320 	.word	0x0800c320
 800874c:	0800c200 	.word	0x0800c200
 8008750:	0800c1d8 	.word	0x0800c1d8
 8008754:	7ff00000 	.word	0x7ff00000
 8008758:	7ca00000 	.word	0x7ca00000
 800875c:	7fefffff 	.word	0x7fefffff
 8008760:	f018 0310 	ands.w	r3, r8, #16
 8008764:	bf18      	it	ne
 8008766:	236a      	movne	r3, #106	; 0x6a
 8008768:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008b20 <_strtod_l+0x978>
 800876c:	9304      	str	r3, [sp, #16]
 800876e:	4650      	mov	r0, sl
 8008770:	4659      	mov	r1, fp
 8008772:	2300      	movs	r3, #0
 8008774:	f018 0f01 	tst.w	r8, #1
 8008778:	d004      	beq.n	8008784 <_strtod_l+0x5dc>
 800877a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800877e:	f7f7 ff43 	bl	8000608 <__aeabi_dmul>
 8008782:	2301      	movs	r3, #1
 8008784:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008788:	f109 0908 	add.w	r9, r9, #8
 800878c:	d1f2      	bne.n	8008774 <_strtod_l+0x5cc>
 800878e:	b10b      	cbz	r3, 8008794 <_strtod_l+0x5ec>
 8008790:	4682      	mov	sl, r0
 8008792:	468b      	mov	fp, r1
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	b1bb      	cbz	r3, 80087c8 <_strtod_l+0x620>
 8008798:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800879c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	4659      	mov	r1, fp
 80087a4:	dd10      	ble.n	80087c8 <_strtod_l+0x620>
 80087a6:	2b1f      	cmp	r3, #31
 80087a8:	f340 8128 	ble.w	80089fc <_strtod_l+0x854>
 80087ac:	2b34      	cmp	r3, #52	; 0x34
 80087ae:	bfde      	ittt	le
 80087b0:	3b20      	suble	r3, #32
 80087b2:	f04f 32ff 	movle.w	r2, #4294967295
 80087b6:	fa02 f303 	lslle.w	r3, r2, r3
 80087ba:	f04f 0a00 	mov.w	sl, #0
 80087be:	bfcc      	ite	gt
 80087c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80087c4:	ea03 0b01 	andle.w	fp, r3, r1
 80087c8:	2200      	movs	r2, #0
 80087ca:	2300      	movs	r3, #0
 80087cc:	4650      	mov	r0, sl
 80087ce:	4659      	mov	r1, fp
 80087d0:	f7f8 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d1a4      	bne.n	8008722 <_strtod_l+0x57a>
 80087d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087de:	462b      	mov	r3, r5
 80087e0:	463a      	mov	r2, r7
 80087e2:	4620      	mov	r0, r4
 80087e4:	f001 fe2a 	bl	800a43c <__s2b>
 80087e8:	9009      	str	r0, [sp, #36]	; 0x24
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f43f af24 	beq.w	8008638 <_strtod_l+0x490>
 80087f0:	9b07      	ldr	r3, [sp, #28]
 80087f2:	1b9e      	subs	r6, r3, r6
 80087f4:	9b08      	ldr	r3, [sp, #32]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfb4      	ite	lt
 80087fa:	4633      	movlt	r3, r6
 80087fc:	2300      	movge	r3, #0
 80087fe:	9310      	str	r3, [sp, #64]	; 0x40
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	2500      	movs	r5, #0
 8008804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008808:	9318      	str	r3, [sp, #96]	; 0x60
 800880a:	462e      	mov	r6, r5
 800880c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880e:	4620      	mov	r0, r4
 8008810:	6859      	ldr	r1, [r3, #4]
 8008812:	f001 fd67 	bl	800a2e4 <_Balloc>
 8008816:	9007      	str	r0, [sp, #28]
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f af11 	beq.w	8008640 <_strtod_l+0x498>
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	3202      	adds	r2, #2
 8008824:	f103 010c 	add.w	r1, r3, #12
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	300c      	adds	r0, #12
 800882c:	f7fe fde8 	bl	8007400 <memcpy>
 8008830:	ec4b ab10 	vmov	d0, sl, fp
 8008834:	aa20      	add	r2, sp, #128	; 0x80
 8008836:	a91f      	add	r1, sp, #124	; 0x7c
 8008838:	4620      	mov	r0, r4
 800883a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800883e:	f002 f939 	bl	800aab4 <__d2b>
 8008842:	901e      	str	r0, [sp, #120]	; 0x78
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f aefb 	beq.w	8008640 <_strtod_l+0x498>
 800884a:	2101      	movs	r1, #1
 800884c:	4620      	mov	r0, r4
 800884e:	f001 fe8f 	bl	800a570 <__i2b>
 8008852:	4606      	mov	r6, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	f43f aef3 	beq.w	8008640 <_strtod_l+0x498>
 800885a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800885c:	9904      	ldr	r1, [sp, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfab      	itete	ge
 8008862:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008864:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008866:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008868:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800886c:	bfac      	ite	ge
 800886e:	eb03 0902 	addge.w	r9, r3, r2
 8008872:	1ad7      	sublt	r7, r2, r3
 8008874:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008876:	eba3 0801 	sub.w	r8, r3, r1
 800887a:	4490      	add	r8, r2
 800887c:	4ba3      	ldr	r3, [pc, #652]	; (8008b0c <_strtod_l+0x964>)
 800887e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008882:	4598      	cmp	r8, r3
 8008884:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008888:	f280 80cc 	bge.w	8008a24 <_strtod_l+0x87c>
 800888c:	eba3 0308 	sub.w	r3, r3, r8
 8008890:	2b1f      	cmp	r3, #31
 8008892:	eba2 0203 	sub.w	r2, r2, r3
 8008896:	f04f 0101 	mov.w	r1, #1
 800889a:	f300 80b6 	bgt.w	8008a0a <_strtod_l+0x862>
 800889e:	fa01 f303 	lsl.w	r3, r1, r3
 80088a2:	9311      	str	r3, [sp, #68]	; 0x44
 80088a4:	2300      	movs	r3, #0
 80088a6:	930c      	str	r3, [sp, #48]	; 0x30
 80088a8:	eb09 0802 	add.w	r8, r9, r2
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	45c1      	cmp	r9, r8
 80088b0:	4417      	add	r7, r2
 80088b2:	441f      	add	r7, r3
 80088b4:	464b      	mov	r3, r9
 80088b6:	bfa8      	it	ge
 80088b8:	4643      	movge	r3, r8
 80088ba:	42bb      	cmp	r3, r7
 80088bc:	bfa8      	it	ge
 80088be:	463b      	movge	r3, r7
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bfc2      	ittt	gt
 80088c4:	eba8 0803 	subgt.w	r8, r8, r3
 80088c8:	1aff      	subgt	r7, r7, r3
 80088ca:	eba9 0903 	subgt.w	r9, r9, r3
 80088ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dd17      	ble.n	8008904 <_strtod_l+0x75c>
 80088d4:	4631      	mov	r1, r6
 80088d6:	461a      	mov	r2, r3
 80088d8:	4620      	mov	r0, r4
 80088da:	f001 ff05 	bl	800a6e8 <__pow5mult>
 80088de:	4606      	mov	r6, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f43f aead 	beq.w	8008640 <_strtod_l+0x498>
 80088e6:	4601      	mov	r1, r0
 80088e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80088ea:	4620      	mov	r0, r4
 80088ec:	f001 fe56 	bl	800a59c <__multiply>
 80088f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f43f aea4 	beq.w	8008640 <_strtod_l+0x498>
 80088f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80088fa:	4620      	mov	r0, r4
 80088fc:	f001 fd32 	bl	800a364 <_Bfree>
 8008900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008902:	931e      	str	r3, [sp, #120]	; 0x78
 8008904:	f1b8 0f00 	cmp.w	r8, #0
 8008908:	f300 8091 	bgt.w	8008a2e <_strtod_l+0x886>
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd08      	ble.n	8008924 <_strtod_l+0x77c>
 8008912:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008914:	9907      	ldr	r1, [sp, #28]
 8008916:	4620      	mov	r0, r4
 8008918:	f001 fee6 	bl	800a6e8 <__pow5mult>
 800891c:	9007      	str	r0, [sp, #28]
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f ae8e 	beq.w	8008640 <_strtod_l+0x498>
 8008924:	2f00      	cmp	r7, #0
 8008926:	dd08      	ble.n	800893a <_strtod_l+0x792>
 8008928:	9907      	ldr	r1, [sp, #28]
 800892a:	463a      	mov	r2, r7
 800892c:	4620      	mov	r0, r4
 800892e:	f001 ff35 	bl	800a79c <__lshift>
 8008932:	9007      	str	r0, [sp, #28]
 8008934:	2800      	cmp	r0, #0
 8008936:	f43f ae83 	beq.w	8008640 <_strtod_l+0x498>
 800893a:	f1b9 0f00 	cmp.w	r9, #0
 800893e:	dd08      	ble.n	8008952 <_strtod_l+0x7aa>
 8008940:	4631      	mov	r1, r6
 8008942:	464a      	mov	r2, r9
 8008944:	4620      	mov	r0, r4
 8008946:	f001 ff29 	bl	800a79c <__lshift>
 800894a:	4606      	mov	r6, r0
 800894c:	2800      	cmp	r0, #0
 800894e:	f43f ae77 	beq.w	8008640 <_strtod_l+0x498>
 8008952:	9a07      	ldr	r2, [sp, #28]
 8008954:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008956:	4620      	mov	r0, r4
 8008958:	f001 ffa8 	bl	800a8ac <__mdiff>
 800895c:	4605      	mov	r5, r0
 800895e:	2800      	cmp	r0, #0
 8008960:	f43f ae6e 	beq.w	8008640 <_strtod_l+0x498>
 8008964:	68c3      	ldr	r3, [r0, #12]
 8008966:	930f      	str	r3, [sp, #60]	; 0x3c
 8008968:	2300      	movs	r3, #0
 800896a:	60c3      	str	r3, [r0, #12]
 800896c:	4631      	mov	r1, r6
 800896e:	f001 ff81 	bl	800a874 <__mcmp>
 8008972:	2800      	cmp	r0, #0
 8008974:	da65      	bge.n	8008a42 <_strtod_l+0x89a>
 8008976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008978:	ea53 030a 	orrs.w	r3, r3, sl
 800897c:	f040 8087 	bne.w	8008a8e <_strtod_l+0x8e6>
 8008980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 8082 	bne.w	8008a8e <_strtod_l+0x8e6>
 800898a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800898e:	0d1b      	lsrs	r3, r3, #20
 8008990:	051b      	lsls	r3, r3, #20
 8008992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008996:	d97a      	bls.n	8008a8e <_strtod_l+0x8e6>
 8008998:	696b      	ldr	r3, [r5, #20]
 800899a:	b913      	cbnz	r3, 80089a2 <_strtod_l+0x7fa>
 800899c:	692b      	ldr	r3, [r5, #16]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	dd75      	ble.n	8008a8e <_strtod_l+0x8e6>
 80089a2:	4629      	mov	r1, r5
 80089a4:	2201      	movs	r2, #1
 80089a6:	4620      	mov	r0, r4
 80089a8:	f001 fef8 	bl	800a79c <__lshift>
 80089ac:	4631      	mov	r1, r6
 80089ae:	4605      	mov	r5, r0
 80089b0:	f001 ff60 	bl	800a874 <__mcmp>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dd6a      	ble.n	8008a8e <_strtod_l+0x8e6>
 80089b8:	9904      	ldr	r1, [sp, #16]
 80089ba:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <_strtod_l+0x968>)
 80089bc:	465b      	mov	r3, fp
 80089be:	2900      	cmp	r1, #0
 80089c0:	f000 8085 	beq.w	8008ace <_strtod_l+0x926>
 80089c4:	ea02 010b 	and.w	r1, r2, fp
 80089c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089cc:	dc7f      	bgt.n	8008ace <_strtod_l+0x926>
 80089ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089d2:	f77f aeaa 	ble.w	800872a <_strtod_l+0x582>
 80089d6:	4a4f      	ldr	r2, [pc, #316]	; (8008b14 <_strtod_l+0x96c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80089de:	4650      	mov	r0, sl
 80089e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80089e4:	4659      	mov	r1, fp
 80089e6:	f7f7 fe0f 	bl	8000608 <__aeabi_dmul>
 80089ea:	460b      	mov	r3, r1
 80089ec:	4303      	orrs	r3, r0
 80089ee:	bf08      	it	eq
 80089f0:	2322      	moveq	r3, #34	; 0x22
 80089f2:	4682      	mov	sl, r0
 80089f4:	468b      	mov	fp, r1
 80089f6:	bf08      	it	eq
 80089f8:	6023      	streq	r3, [r4, #0]
 80089fa:	e62b      	b.n	8008654 <_strtod_l+0x4ac>
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	ea03 0a0a 	and.w	sl, r3, sl
 8008a08:	e6de      	b.n	80087c8 <_strtod_l+0x620>
 8008a0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a1a:	fa01 f308 	lsl.w	r3, r1, r8
 8008a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a20:	9111      	str	r1, [sp, #68]	; 0x44
 8008a22:	e741      	b.n	80088a8 <_strtod_l+0x700>
 8008a24:	2300      	movs	r3, #0
 8008a26:	930c      	str	r3, [sp, #48]	; 0x30
 8008a28:	2301      	movs	r3, #1
 8008a2a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a2c:	e73c      	b.n	80088a8 <_strtod_l+0x700>
 8008a2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a30:	4642      	mov	r2, r8
 8008a32:	4620      	mov	r0, r4
 8008a34:	f001 feb2 	bl	800a79c <__lshift>
 8008a38:	901e      	str	r0, [sp, #120]	; 0x78
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f47f af66 	bne.w	800890c <_strtod_l+0x764>
 8008a40:	e5fe      	b.n	8008640 <_strtod_l+0x498>
 8008a42:	465f      	mov	r7, fp
 8008a44:	d16e      	bne.n	8008b24 <_strtod_l+0x97c>
 8008a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a4c:	b342      	cbz	r2, 8008aa0 <_strtod_l+0x8f8>
 8008a4e:	4a32      	ldr	r2, [pc, #200]	; (8008b18 <_strtod_l+0x970>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d128      	bne.n	8008aa6 <_strtod_l+0x8fe>
 8008a54:	9b04      	ldr	r3, [sp, #16]
 8008a56:	4650      	mov	r0, sl
 8008a58:	b1eb      	cbz	r3, 8008a96 <_strtod_l+0x8ee>
 8008a5a:	4a2d      	ldr	r2, [pc, #180]	; (8008b10 <_strtod_l+0x968>)
 8008a5c:	403a      	ands	r2, r7
 8008a5e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008a62:	f04f 31ff 	mov.w	r1, #4294967295
 8008a66:	d819      	bhi.n	8008a9c <_strtod_l+0x8f4>
 8008a68:	0d12      	lsrs	r2, r2, #20
 8008a6a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a72:	4298      	cmp	r0, r3
 8008a74:	d117      	bne.n	8008aa6 <_strtod_l+0x8fe>
 8008a76:	4b29      	ldr	r3, [pc, #164]	; (8008b1c <_strtod_l+0x974>)
 8008a78:	429f      	cmp	r7, r3
 8008a7a:	d102      	bne.n	8008a82 <_strtod_l+0x8da>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f43f addf 	beq.w	8008640 <_strtod_l+0x498>
 8008a82:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <_strtod_l+0x968>)
 8008a84:	403b      	ands	r3, r7
 8008a86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1a0      	bne.n	80089d6 <_strtod_l+0x82e>
 8008a94:	e5de      	b.n	8008654 <_strtod_l+0x4ac>
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	e7ea      	b.n	8008a72 <_strtod_l+0x8ca>
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	e7e8      	b.n	8008a72 <_strtod_l+0x8ca>
 8008aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8008aa4:	d088      	beq.n	80089b8 <_strtod_l+0x810>
 8008aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aa8:	b1db      	cbz	r3, 8008ae2 <_strtod_l+0x93a>
 8008aaa:	423b      	tst	r3, r7
 8008aac:	d0ef      	beq.n	8008a8e <_strtod_l+0x8e6>
 8008aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	4650      	mov	r0, sl
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	b1c3      	cbz	r3, 8008aea <_strtod_l+0x942>
 8008ab8:	f7ff fb58 	bl	800816c <sulp>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ac4:	f7f7 fbea 	bl	800029c <__adddf3>
 8008ac8:	4682      	mov	sl, r0
 8008aca:	468b      	mov	fp, r1
 8008acc:	e7df      	b.n	8008a8e <_strtod_l+0x8e6>
 8008ace:	4013      	ands	r3, r2
 8008ad0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ad4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ad8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008adc:	f04f 3aff 	mov.w	sl, #4294967295
 8008ae0:	e7d5      	b.n	8008a8e <_strtod_l+0x8e6>
 8008ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ae4:	ea13 0f0a 	tst.w	r3, sl
 8008ae8:	e7e0      	b.n	8008aac <_strtod_l+0x904>
 8008aea:	f7ff fb3f 	bl	800816c <sulp>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008af6:	f7f7 fbcf 	bl	8000298 <__aeabi_dsub>
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	4682      	mov	sl, r0
 8008b00:	468b      	mov	fp, r1
 8008b02:	f7f7 ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d0c1      	beq.n	8008a8e <_strtod_l+0x8e6>
 8008b0a:	e60e      	b.n	800872a <_strtod_l+0x582>
 8008b0c:	fffffc02 	.word	0xfffffc02
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	39500000 	.word	0x39500000
 8008b18:	000fffff 	.word	0x000fffff
 8008b1c:	7fefffff 	.word	0x7fefffff
 8008b20:	0800bf38 	.word	0x0800bf38
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	f002 f820 	bl	800ab6c <__ratio>
 8008b2c:	ec59 8b10 	vmov	r8, r9, d0
 8008b30:	ee10 0a10 	vmov	r0, s0
 8008b34:	2200      	movs	r2, #0
 8008b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 ffe0 	bl	8000b00 <__aeabi_dcmple>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d07c      	beq.n	8008c3e <_strtod_l+0xa96>
 8008b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d04c      	beq.n	8008be4 <_strtod_l+0xa3c>
 8008b4a:	4b95      	ldr	r3, [pc, #596]	; (8008da0 <_strtod_l+0xbf8>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008da0 <_strtod_l+0xbf8>
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	4b92      	ldr	r3, [pc, #584]	; (8008da4 <_strtod_l+0xbfc>)
 8008b5c:	403b      	ands	r3, r7
 8008b5e:	9311      	str	r3, [sp, #68]	; 0x44
 8008b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b62:	4b91      	ldr	r3, [pc, #580]	; (8008da8 <_strtod_l+0xc00>)
 8008b64:	429a      	cmp	r2, r3
 8008b66:	f040 80b2 	bne.w	8008cce <_strtod_l+0xb26>
 8008b6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b72:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008b76:	ec4b ab10 	vmov	d0, sl, fp
 8008b7a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008b7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b82:	f001 ff1b 	bl	800a9bc <__ulp>
 8008b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b8a:	ec53 2b10 	vmov	r2, r3, d0
 8008b8e:	f7f7 fd3b 	bl	8000608 <__aeabi_dmul>
 8008b92:	4652      	mov	r2, sl
 8008b94:	465b      	mov	r3, fp
 8008b96:	f7f7 fb81 	bl	800029c <__adddf3>
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4981      	ldr	r1, [pc, #516]	; (8008da4 <_strtod_l+0xbfc>)
 8008b9e:	4a83      	ldr	r2, [pc, #524]	; (8008dac <_strtod_l+0xc04>)
 8008ba0:	4019      	ands	r1, r3
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	d95e      	bls.n	8008c66 <_strtod_l+0xabe>
 8008ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008baa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d103      	bne.n	8008bba <_strtod_l+0xa12>
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	f43f ad43 	beq.w	8008640 <_strtod_l+0x498>
 8008bba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008db8 <_strtod_l+0xc10>
 8008bbe:	f04f 3aff 	mov.w	sl, #4294967295
 8008bc2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f001 fbcd 	bl	800a364 <_Bfree>
 8008bca:	9907      	ldr	r1, [sp, #28]
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f001 fbc9 	bl	800a364 <_Bfree>
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f001 fbc5 	bl	800a364 <_Bfree>
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f001 fbc1 	bl	800a364 <_Bfree>
 8008be2:	e613      	b.n	800880c <_strtod_l+0x664>
 8008be4:	f1ba 0f00 	cmp.w	sl, #0
 8008be8:	d11b      	bne.n	8008c22 <_strtod_l+0xa7a>
 8008bea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bee:	b9f3      	cbnz	r3, 8008c2e <_strtod_l+0xa86>
 8008bf0:	4b6b      	ldr	r3, [pc, #428]	; (8008da0 <_strtod_l+0xbf8>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f7 ff78 	bl	8000aec <__aeabi_dcmplt>
 8008bfc:	b9d0      	cbnz	r0, 8008c34 <_strtod_l+0xa8c>
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	4b6b      	ldr	r3, [pc, #428]	; (8008db0 <_strtod_l+0xc08>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4689      	mov	r9, r1
 8008c0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c12:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008c16:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c18:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008c1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c20:	e79b      	b.n	8008b5a <_strtod_l+0x9b2>
 8008c22:	f1ba 0f01 	cmp.w	sl, #1
 8008c26:	d102      	bne.n	8008c2e <_strtod_l+0xa86>
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	f43f ad7e 	beq.w	800872a <_strtod_l+0x582>
 8008c2e:	4b61      	ldr	r3, [pc, #388]	; (8008db4 <_strtod_l+0xc0c>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	e78c      	b.n	8008b4e <_strtod_l+0x9a6>
 8008c34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008db0 <_strtod_l+0xc08>
 8008c38:	f04f 0800 	mov.w	r8, #0
 8008c3c:	e7e7      	b.n	8008c0e <_strtod_l+0xa66>
 8008c3e:	4b5c      	ldr	r3, [pc, #368]	; (8008db0 <_strtod_l+0xc08>)
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	2200      	movs	r2, #0
 8008c46:	f7f7 fcdf 	bl	8000608 <__aeabi_dmul>
 8008c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	4689      	mov	r9, r1
 8008c50:	b933      	cbnz	r3, 8008c60 <_strtod_l+0xab8>
 8008c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c56:	9012      	str	r0, [sp, #72]	; 0x48
 8008c58:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c5e:	e7dd      	b.n	8008c1c <_strtod_l+0xa74>
 8008c60:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008c64:	e7f9      	b.n	8008c5a <_strtod_l+0xab2>
 8008c66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008c6a:	9b04      	ldr	r3, [sp, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1a8      	bne.n	8008bc2 <_strtod_l+0xa1a>
 8008c70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c76:	0d1b      	lsrs	r3, r3, #20
 8008c78:	051b      	lsls	r3, r3, #20
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d1a1      	bne.n	8008bc2 <_strtod_l+0xa1a>
 8008c7e:	4640      	mov	r0, r8
 8008c80:	4649      	mov	r1, r9
 8008c82:	f7f8 f821 	bl	8000cc8 <__aeabi_d2lz>
 8008c86:	f7f7 fc91 	bl	80005ac <__aeabi_l2d>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 fb01 	bl	8000298 <__aeabi_dsub>
 8008c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c9c:	ea43 030a 	orr.w	r3, r3, sl
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	d053      	beq.n	8008d50 <_strtod_l+0xba8>
 8008ca8:	a335      	add	r3, pc, #212	; (adr r3, 8008d80 <_strtod_l+0xbd8>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 ff1d 	bl	8000aec <__aeabi_dcmplt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f47f acce 	bne.w	8008654 <_strtod_l+0x4ac>
 8008cb8:	a333      	add	r3, pc, #204	; (adr r3, 8008d88 <_strtod_l+0xbe0>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 ff31 	bl	8000b28 <__aeabi_dcmpgt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f af7b 	beq.w	8008bc2 <_strtod_l+0xa1a>
 8008ccc:	e4c2      	b.n	8008654 <_strtod_l+0x4ac>
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	b333      	cbz	r3, 8008d20 <_strtod_l+0xb78>
 8008cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cd8:	d822      	bhi.n	8008d20 <_strtod_l+0xb78>
 8008cda:	a32d      	add	r3, pc, #180	; (adr r3, 8008d90 <_strtod_l+0xbe8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	f7f7 ff0c 	bl	8000b00 <__aeabi_dcmple>
 8008ce8:	b1a0      	cbz	r0, 8008d14 <_strtod_l+0xb6c>
 8008cea:	4649      	mov	r1, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	f7f7 ff63 	bl	8000bb8 <__aeabi_d2uiz>
 8008cf2:	2801      	cmp	r0, #1
 8008cf4:	bf38      	it	cc
 8008cf6:	2001      	movcc	r0, #1
 8008cf8:	f7f7 fc0c 	bl	8000514 <__aeabi_ui2d>
 8008cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4689      	mov	r9, r1
 8008d02:	bb13      	cbnz	r3, 8008d4a <_strtod_l+0xba2>
 8008d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d08:	9014      	str	r0, [sp, #80]	; 0x50
 8008d0a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d2c:	f001 fe46 	bl	800a9bc <__ulp>
 8008d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d34:	ec53 2b10 	vmov	r2, r3, d0
 8008d38:	f7f7 fc66 	bl	8000608 <__aeabi_dmul>
 8008d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d40:	f7f7 faac 	bl	800029c <__adddf3>
 8008d44:	4682      	mov	sl, r0
 8008d46:	468b      	mov	fp, r1
 8008d48:	e78f      	b.n	8008c6a <_strtod_l+0xac2>
 8008d4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008d4e:	e7dd      	b.n	8008d0c <_strtod_l+0xb64>
 8008d50:	a311      	add	r3, pc, #68	; (adr r3, 8008d98 <_strtod_l+0xbf0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fec9 	bl	8000aec <__aeabi_dcmplt>
 8008d5a:	e7b4      	b.n	8008cc6 <_strtod_l+0xb1e>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	f7ff ba65 	b.w	8008234 <_strtod_l+0x8c>
 8008d6a:	2b65      	cmp	r3, #101	; 0x65
 8008d6c:	f43f ab5d 	beq.w	800842a <_strtod_l+0x282>
 8008d70:	2b45      	cmp	r3, #69	; 0x45
 8008d72:	f43f ab5a 	beq.w	800842a <_strtod_l+0x282>
 8008d76:	2201      	movs	r2, #1
 8008d78:	f7ff bb92 	b.w	80084a0 <_strtod_l+0x2f8>
 8008d7c:	f3af 8000 	nop.w
 8008d80:	94a03595 	.word	0x94a03595
 8008d84:	3fdfffff 	.word	0x3fdfffff
 8008d88:	35afe535 	.word	0x35afe535
 8008d8c:	3fe00000 	.word	0x3fe00000
 8008d90:	ffc00000 	.word	0xffc00000
 8008d94:	41dfffff 	.word	0x41dfffff
 8008d98:	94a03595 	.word	0x94a03595
 8008d9c:	3fcfffff 	.word	0x3fcfffff
 8008da0:	3ff00000 	.word	0x3ff00000
 8008da4:	7ff00000 	.word	0x7ff00000
 8008da8:	7fe00000 	.word	0x7fe00000
 8008dac:	7c9fffff 	.word	0x7c9fffff
 8008db0:	3fe00000 	.word	0x3fe00000
 8008db4:	bff00000 	.word	0xbff00000
 8008db8:	7fefffff 	.word	0x7fefffff

08008dbc <_strtod_r>:
 8008dbc:	4b01      	ldr	r3, [pc, #4]	; (8008dc4 <_strtod_r+0x8>)
 8008dbe:	f7ff b9f3 	b.w	80081a8 <_strtod_l>
 8008dc2:	bf00      	nop
 8008dc4:	20000140 	.word	0x20000140

08008dc8 <_strtol_l.isra.0>:
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dce:	d001      	beq.n	8008dd4 <_strtol_l.isra.0+0xc>
 8008dd0:	2b24      	cmp	r3, #36	; 0x24
 8008dd2:	d906      	bls.n	8008de2 <_strtol_l.isra.0+0x1a>
 8008dd4:	f7fe faea 	bl	80073ac <__errno>
 8008dd8:	2316      	movs	r3, #22
 8008dda:	6003      	str	r3, [r0, #0]
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de2:	4f3a      	ldr	r7, [pc, #232]	; (8008ecc <_strtol_l.isra.0+0x104>)
 8008de4:	468e      	mov	lr, r1
 8008de6:	4676      	mov	r6, lr
 8008de8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008dec:	5de5      	ldrb	r5, [r4, r7]
 8008dee:	f015 0508 	ands.w	r5, r5, #8
 8008df2:	d1f8      	bne.n	8008de6 <_strtol_l.isra.0+0x1e>
 8008df4:	2c2d      	cmp	r4, #45	; 0x2d
 8008df6:	d134      	bne.n	8008e62 <_strtol_l.isra.0+0x9a>
 8008df8:	f89e 4000 	ldrb.w	r4, [lr]
 8008dfc:	f04f 0801 	mov.w	r8, #1
 8008e00:	f106 0e02 	add.w	lr, r6, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d05c      	beq.n	8008ec2 <_strtol_l.isra.0+0xfa>
 8008e08:	2b10      	cmp	r3, #16
 8008e0a:	d10c      	bne.n	8008e26 <_strtol_l.isra.0+0x5e>
 8008e0c:	2c30      	cmp	r4, #48	; 0x30
 8008e0e:	d10a      	bne.n	8008e26 <_strtol_l.isra.0+0x5e>
 8008e10:	f89e 4000 	ldrb.w	r4, [lr]
 8008e14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e18:	2c58      	cmp	r4, #88	; 0x58
 8008e1a:	d14d      	bne.n	8008eb8 <_strtol_l.isra.0+0xf0>
 8008e1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008e20:	2310      	movs	r3, #16
 8008e22:	f10e 0e02 	add.w	lr, lr, #2
 8008e26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008e2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e2e:	2600      	movs	r6, #0
 8008e30:	fbbc f9f3 	udiv	r9, ip, r3
 8008e34:	4635      	mov	r5, r6
 8008e36:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e3e:	2f09      	cmp	r7, #9
 8008e40:	d818      	bhi.n	8008e74 <_strtol_l.isra.0+0xac>
 8008e42:	463c      	mov	r4, r7
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	dd24      	ble.n	8008e92 <_strtol_l.isra.0+0xca>
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	db1f      	blt.n	8008e8c <_strtol_l.isra.0+0xc4>
 8008e4c:	45a9      	cmp	r9, r5
 8008e4e:	d31d      	bcc.n	8008e8c <_strtol_l.isra.0+0xc4>
 8008e50:	d101      	bne.n	8008e56 <_strtol_l.isra.0+0x8e>
 8008e52:	45a2      	cmp	sl, r4
 8008e54:	db1a      	blt.n	8008e8c <_strtol_l.isra.0+0xc4>
 8008e56:	fb05 4503 	mla	r5, r5, r3, r4
 8008e5a:	2601      	movs	r6, #1
 8008e5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e60:	e7eb      	b.n	8008e3a <_strtol_l.isra.0+0x72>
 8008e62:	2c2b      	cmp	r4, #43	; 0x2b
 8008e64:	bf08      	it	eq
 8008e66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008e6a:	46a8      	mov	r8, r5
 8008e6c:	bf08      	it	eq
 8008e6e:	f106 0e02 	addeq.w	lr, r6, #2
 8008e72:	e7c7      	b.n	8008e04 <_strtol_l.isra.0+0x3c>
 8008e74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008e78:	2f19      	cmp	r7, #25
 8008e7a:	d801      	bhi.n	8008e80 <_strtol_l.isra.0+0xb8>
 8008e7c:	3c37      	subs	r4, #55	; 0x37
 8008e7e:	e7e1      	b.n	8008e44 <_strtol_l.isra.0+0x7c>
 8008e80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008e84:	2f19      	cmp	r7, #25
 8008e86:	d804      	bhi.n	8008e92 <_strtol_l.isra.0+0xca>
 8008e88:	3c57      	subs	r4, #87	; 0x57
 8008e8a:	e7db      	b.n	8008e44 <_strtol_l.isra.0+0x7c>
 8008e8c:	f04f 36ff 	mov.w	r6, #4294967295
 8008e90:	e7e4      	b.n	8008e5c <_strtol_l.isra.0+0x94>
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	da05      	bge.n	8008ea2 <_strtol_l.isra.0+0xda>
 8008e96:	2322      	movs	r3, #34	; 0x22
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	4665      	mov	r5, ip
 8008e9c:	b942      	cbnz	r2, 8008eb0 <_strtol_l.isra.0+0xe8>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	e79d      	b.n	8008dde <_strtol_l.isra.0+0x16>
 8008ea2:	f1b8 0f00 	cmp.w	r8, #0
 8008ea6:	d000      	beq.n	8008eaa <_strtol_l.isra.0+0xe2>
 8008ea8:	426d      	negs	r5, r5
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	d0f7      	beq.n	8008e9e <_strtol_l.isra.0+0xd6>
 8008eae:	b10e      	cbz	r6, 8008eb4 <_strtol_l.isra.0+0xec>
 8008eb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	e7f2      	b.n	8008e9e <_strtol_l.isra.0+0xd6>
 8008eb8:	2430      	movs	r4, #48	; 0x30
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1b3      	bne.n	8008e26 <_strtol_l.isra.0+0x5e>
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	e7b1      	b.n	8008e26 <_strtol_l.isra.0+0x5e>
 8008ec2:	2c30      	cmp	r4, #48	; 0x30
 8008ec4:	d0a4      	beq.n	8008e10 <_strtol_l.isra.0+0x48>
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	e7ad      	b.n	8008e26 <_strtol_l.isra.0+0x5e>
 8008eca:	bf00      	nop
 8008ecc:	0800bf61 	.word	0x0800bf61

08008ed0 <_strtol_r>:
 8008ed0:	f7ff bf7a 	b.w	8008dc8 <_strtol_l.isra.0>

08008ed4 <quorem>:
 8008ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	6903      	ldr	r3, [r0, #16]
 8008eda:	690c      	ldr	r4, [r1, #16]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f2c0 8081 	blt.w	8008fe6 <quorem+0x112>
 8008ee4:	3c01      	subs	r4, #1
 8008ee6:	f101 0814 	add.w	r8, r1, #20
 8008eea:	f100 0514 	add.w	r5, r0, #20
 8008eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008efc:	3301      	adds	r3, #1
 8008efe:	429a      	cmp	r2, r3
 8008f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f0c:	d331      	bcc.n	8008f72 <quorem+0x9e>
 8008f0e:	f04f 0e00 	mov.w	lr, #0
 8008f12:	4640      	mov	r0, r8
 8008f14:	46ac      	mov	ip, r5
 8008f16:	46f2      	mov	sl, lr
 8008f18:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f1c:	b293      	uxth	r3, r2
 8008f1e:	fb06 e303 	mla	r3, r6, r3, lr
 8008f22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ebaa 0303 	sub.w	r3, sl, r3
 8008f2c:	0c12      	lsrs	r2, r2, #16
 8008f2e:	f8dc a000 	ldr.w	sl, [ip]
 8008f32:	fb06 e202 	mla	r2, r6, r2, lr
 8008f36:	fa13 f38a 	uxtah	r3, r3, sl
 8008f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f3e:	fa1f fa82 	uxth.w	sl, r2
 8008f42:	f8dc 2000 	ldr.w	r2, [ip]
 8008f46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f54:	4581      	cmp	r9, r0
 8008f56:	f84c 3b04 	str.w	r3, [ip], #4
 8008f5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f5e:	d2db      	bcs.n	8008f18 <quorem+0x44>
 8008f60:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f64:	b92b      	cbnz	r3, 8008f72 <quorem+0x9e>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	d32e      	bcc.n	8008fce <quorem+0xfa>
 8008f70:	613c      	str	r4, [r7, #16]
 8008f72:	4638      	mov	r0, r7
 8008f74:	f001 fc7e 	bl	800a874 <__mcmp>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	db24      	blt.n	8008fc6 <quorem+0xf2>
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f04f 0c00 	mov.w	ip, #0
 8008f84:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f88:	f8d0 e000 	ldr.w	lr, [r0]
 8008f8c:	b293      	uxth	r3, r2
 8008f8e:	ebac 0303 	sub.w	r3, ip, r3
 8008f92:	0c12      	lsrs	r2, r2, #16
 8008f94:	fa13 f38e 	uxtah	r3, r3, lr
 8008f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fa6:	45c1      	cmp	r9, r8
 8008fa8:	f840 3b04 	str.w	r3, [r0], #4
 8008fac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fb0:	d2e8      	bcs.n	8008f84 <quorem+0xb0>
 8008fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fba:	b922      	cbnz	r2, 8008fc6 <quorem+0xf2>
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	d30a      	bcc.n	8008fda <quorem+0x106>
 8008fc4:	613c      	str	r4, [r7, #16]
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	b003      	add	sp, #12
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	d1cc      	bne.n	8008f70 <quorem+0x9c>
 8008fd6:	3c01      	subs	r4, #1
 8008fd8:	e7c7      	b.n	8008f6a <quorem+0x96>
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	3b04      	subs	r3, #4
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	d1f0      	bne.n	8008fc4 <quorem+0xf0>
 8008fe2:	3c01      	subs	r4, #1
 8008fe4:	e7eb      	b.n	8008fbe <quorem+0xea>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e7ee      	b.n	8008fc8 <quorem+0xf4>
 8008fea:	0000      	movs	r0, r0
 8008fec:	0000      	movs	r0, r0
	...

08008ff0 <_dtoa_r>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	ed2d 8b02 	vpush	{d8}
 8008ff8:	ec57 6b10 	vmov	r6, r7, d0
 8008ffc:	b095      	sub	sp, #84	; 0x54
 8008ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800900a:	4604      	mov	r4, r0
 800900c:	9209      	str	r2, [sp, #36]	; 0x24
 800900e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009010:	b975      	cbnz	r5, 8009030 <_dtoa_r+0x40>
 8009012:	2010      	movs	r0, #16
 8009014:	f001 f94c 	bl	800a2b0 <malloc>
 8009018:	4602      	mov	r2, r0
 800901a:	6260      	str	r0, [r4, #36]	; 0x24
 800901c:	b920      	cbnz	r0, 8009028 <_dtoa_r+0x38>
 800901e:	4bb2      	ldr	r3, [pc, #712]	; (80092e8 <_dtoa_r+0x2f8>)
 8009020:	21ea      	movs	r1, #234	; 0xea
 8009022:	48b2      	ldr	r0, [pc, #712]	; (80092ec <_dtoa_r+0x2fc>)
 8009024:	f002 f868 	bl	800b0f8 <__assert_func>
 8009028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800902c:	6005      	str	r5, [r0, #0]
 800902e:	60c5      	str	r5, [r0, #12]
 8009030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	b151      	cbz	r1, 800904c <_dtoa_r+0x5c>
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	604a      	str	r2, [r1, #4]
 800903a:	2301      	movs	r3, #1
 800903c:	4093      	lsls	r3, r2
 800903e:	608b      	str	r3, [r1, #8]
 8009040:	4620      	mov	r0, r4
 8009042:	f001 f98f 	bl	800a364 <_Bfree>
 8009046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	1e3b      	subs	r3, r7, #0
 800904e:	bfb9      	ittee	lt
 8009050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009054:	9303      	strlt	r3, [sp, #12]
 8009056:	2300      	movge	r3, #0
 8009058:	f8c8 3000 	strge.w	r3, [r8]
 800905c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009060:	4ba3      	ldr	r3, [pc, #652]	; (80092f0 <_dtoa_r+0x300>)
 8009062:	bfbc      	itt	lt
 8009064:	2201      	movlt	r2, #1
 8009066:	f8c8 2000 	strlt.w	r2, [r8]
 800906a:	ea33 0309 	bics.w	r3, r3, r9
 800906e:	d11b      	bne.n	80090a8 <_dtoa_r+0xb8>
 8009070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009072:	f242 730f 	movw	r3, #9999	; 0x270f
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800907c:	4333      	orrs	r3, r6
 800907e:	f000 857a 	beq.w	8009b76 <_dtoa_r+0xb86>
 8009082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009084:	b963      	cbnz	r3, 80090a0 <_dtoa_r+0xb0>
 8009086:	4b9b      	ldr	r3, [pc, #620]	; (80092f4 <_dtoa_r+0x304>)
 8009088:	e024      	b.n	80090d4 <_dtoa_r+0xe4>
 800908a:	4b9b      	ldr	r3, [pc, #620]	; (80092f8 <_dtoa_r+0x308>)
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	3308      	adds	r3, #8
 8009090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	9800      	ldr	r0, [sp, #0]
 8009096:	b015      	add	sp, #84	; 0x54
 8009098:	ecbd 8b02 	vpop	{d8}
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a0:	4b94      	ldr	r3, [pc, #592]	; (80092f4 <_dtoa_r+0x304>)
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	3303      	adds	r3, #3
 80090a6:	e7f3      	b.n	8009090 <_dtoa_r+0xa0>
 80090a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090ac:	2200      	movs	r2, #0
 80090ae:	ec51 0b17 	vmov	r0, r1, d7
 80090b2:	2300      	movs	r3, #0
 80090b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80090b8:	f7f7 fd0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80090bc:	4680      	mov	r8, r0
 80090be:	b158      	cbz	r0, 80090d8 <_dtoa_r+0xe8>
 80090c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090c2:	2301      	movs	r3, #1
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8551 	beq.w	8009b70 <_dtoa_r+0xb80>
 80090ce:	488b      	ldr	r0, [pc, #556]	; (80092fc <_dtoa_r+0x30c>)
 80090d0:	6018      	str	r0, [r3, #0]
 80090d2:	1e43      	subs	r3, r0, #1
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	e7dd      	b.n	8009094 <_dtoa_r+0xa4>
 80090d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090dc:	aa12      	add	r2, sp, #72	; 0x48
 80090de:	a913      	add	r1, sp, #76	; 0x4c
 80090e0:	4620      	mov	r0, r4
 80090e2:	f001 fce7 	bl	800aab4 <__d2b>
 80090e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090ea:	4683      	mov	fp, r0
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d07c      	beq.n	80091ea <_dtoa_r+0x1fa>
 80090f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009102:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800910a:	4b7d      	ldr	r3, [pc, #500]	; (8009300 <_dtoa_r+0x310>)
 800910c:	2200      	movs	r2, #0
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 f8c1 	bl	8000298 <__aeabi_dsub>
 8009116:	a36e      	add	r3, pc, #440	; (adr r3, 80092d0 <_dtoa_r+0x2e0>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 fa74 	bl	8000608 <__aeabi_dmul>
 8009120:	a36d      	add	r3, pc, #436	; (adr r3, 80092d8 <_dtoa_r+0x2e8>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 f8b9 	bl	800029c <__adddf3>
 800912a:	4606      	mov	r6, r0
 800912c:	4628      	mov	r0, r5
 800912e:	460f      	mov	r7, r1
 8009130:	f7f7 fa00 	bl	8000534 <__aeabi_i2d>
 8009134:	a36a      	add	r3, pc, #424	; (adr r3, 80092e0 <_dtoa_r+0x2f0>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 fa65 	bl	8000608 <__aeabi_dmul>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4630      	mov	r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	f7f7 f8a9 	bl	800029c <__adddf3>
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	f7f7 fd0b 	bl	8000b68 <__aeabi_d2iz>
 8009152:	2200      	movs	r2, #0
 8009154:	4682      	mov	sl, r0
 8009156:	2300      	movs	r3, #0
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 fcc6 	bl	8000aec <__aeabi_dcmplt>
 8009160:	b148      	cbz	r0, 8009176 <_dtoa_r+0x186>
 8009162:	4650      	mov	r0, sl
 8009164:	f7f7 f9e6 	bl	8000534 <__aeabi_i2d>
 8009168:	4632      	mov	r2, r6
 800916a:	463b      	mov	r3, r7
 800916c:	f7f7 fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009170:	b908      	cbnz	r0, 8009176 <_dtoa_r+0x186>
 8009172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009176:	f1ba 0f16 	cmp.w	sl, #22
 800917a:	d854      	bhi.n	8009226 <_dtoa_r+0x236>
 800917c:	4b61      	ldr	r3, [pc, #388]	; (8009304 <_dtoa_r+0x314>)
 800917e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800918a:	f7f7 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	d04b      	beq.n	800922a <_dtoa_r+0x23a>
 8009192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009196:	2300      	movs	r3, #0
 8009198:	930e      	str	r3, [sp, #56]	; 0x38
 800919a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800919c:	1b5d      	subs	r5, r3, r5
 800919e:	1e6b      	subs	r3, r5, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	bf43      	ittte	mi
 80091a4:	2300      	movmi	r3, #0
 80091a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80091aa:	9304      	strmi	r3, [sp, #16]
 80091ac:	f04f 0800 	movpl.w	r8, #0
 80091b0:	f1ba 0f00 	cmp.w	sl, #0
 80091b4:	db3b      	blt.n	800922e <_dtoa_r+0x23e>
 80091b6:	9b04      	ldr	r3, [sp, #16]
 80091b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80091bc:	4453      	add	r3, sl
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9306      	str	r3, [sp, #24]
 80091c4:	9b05      	ldr	r3, [sp, #20]
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d869      	bhi.n	800929e <_dtoa_r+0x2ae>
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	bfc4      	itt	gt
 80091ce:	3b04      	subgt	r3, #4
 80091d0:	9305      	strgt	r3, [sp, #20]
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	f1a3 0302 	sub.w	r3, r3, #2
 80091d8:	bfcc      	ite	gt
 80091da:	2500      	movgt	r5, #0
 80091dc:	2501      	movle	r5, #1
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d869      	bhi.n	80092b6 <_dtoa_r+0x2c6>
 80091e2:	e8df f003 	tbb	[pc, r3]
 80091e6:	4e2c      	.short	0x4e2c
 80091e8:	5a4c      	.short	0x5a4c
 80091ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091ee:	441d      	add	r5, r3
 80091f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	bfc1      	itttt	gt
 80091f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009200:	fa09 f303 	lslgt.w	r3, r9, r3
 8009204:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009208:	bfda      	itte	le
 800920a:	f1c3 0320 	rsble	r3, r3, #32
 800920e:	fa06 f003 	lslle.w	r0, r6, r3
 8009212:	4318      	orrgt	r0, r3
 8009214:	f7f7 f97e 	bl	8000514 <__aeabi_ui2d>
 8009218:	2301      	movs	r3, #1
 800921a:	4606      	mov	r6, r0
 800921c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009220:	3d01      	subs	r5, #1
 8009222:	9310      	str	r3, [sp, #64]	; 0x40
 8009224:	e771      	b.n	800910a <_dtoa_r+0x11a>
 8009226:	2301      	movs	r3, #1
 8009228:	e7b6      	b.n	8009198 <_dtoa_r+0x1a8>
 800922a:	900e      	str	r0, [sp, #56]	; 0x38
 800922c:	e7b5      	b.n	800919a <_dtoa_r+0x1aa>
 800922e:	f1ca 0300 	rsb	r3, sl, #0
 8009232:	9306      	str	r3, [sp, #24]
 8009234:	2300      	movs	r3, #0
 8009236:	eba8 080a 	sub.w	r8, r8, sl
 800923a:	930d      	str	r3, [sp, #52]	; 0x34
 800923c:	e7c2      	b.n	80091c4 <_dtoa_r+0x1d4>
 800923e:	2300      	movs	r3, #0
 8009240:	9308      	str	r3, [sp, #32]
 8009242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	dc39      	bgt.n	80092bc <_dtoa_r+0x2cc>
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009250:	464b      	mov	r3, r9
 8009252:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009256:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009258:	2200      	movs	r2, #0
 800925a:	6042      	str	r2, [r0, #4]
 800925c:	2204      	movs	r2, #4
 800925e:	f102 0614 	add.w	r6, r2, #20
 8009262:	429e      	cmp	r6, r3
 8009264:	6841      	ldr	r1, [r0, #4]
 8009266:	d92f      	bls.n	80092c8 <_dtoa_r+0x2d8>
 8009268:	4620      	mov	r0, r4
 800926a:	f001 f83b 	bl	800a2e4 <_Balloc>
 800926e:	9000      	str	r0, [sp, #0]
 8009270:	2800      	cmp	r0, #0
 8009272:	d14b      	bne.n	800930c <_dtoa_r+0x31c>
 8009274:	4b24      	ldr	r3, [pc, #144]	; (8009308 <_dtoa_r+0x318>)
 8009276:	4602      	mov	r2, r0
 8009278:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800927c:	e6d1      	b.n	8009022 <_dtoa_r+0x32>
 800927e:	2301      	movs	r3, #1
 8009280:	e7de      	b.n	8009240 <_dtoa_r+0x250>
 8009282:	2300      	movs	r3, #0
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009288:	eb0a 0903 	add.w	r9, sl, r3
 800928c:	f109 0301 	add.w	r3, r9, #1
 8009290:	2b01      	cmp	r3, #1
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	bfb8      	it	lt
 8009296:	2301      	movlt	r3, #1
 8009298:	e7dd      	b.n	8009256 <_dtoa_r+0x266>
 800929a:	2301      	movs	r3, #1
 800929c:	e7f2      	b.n	8009284 <_dtoa_r+0x294>
 800929e:	2501      	movs	r5, #1
 80092a0:	2300      	movs	r3, #0
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	9508      	str	r5, [sp, #32]
 80092a6:	f04f 39ff 	mov.w	r9, #4294967295
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80092b0:	2312      	movs	r3, #18
 80092b2:	9209      	str	r2, [sp, #36]	; 0x24
 80092b4:	e7cf      	b.n	8009256 <_dtoa_r+0x266>
 80092b6:	2301      	movs	r3, #1
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	e7f4      	b.n	80092a6 <_dtoa_r+0x2b6>
 80092bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80092c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80092c4:	464b      	mov	r3, r9
 80092c6:	e7c6      	b.n	8009256 <_dtoa_r+0x266>
 80092c8:	3101      	adds	r1, #1
 80092ca:	6041      	str	r1, [r0, #4]
 80092cc:	0052      	lsls	r2, r2, #1
 80092ce:	e7c6      	b.n	800925e <_dtoa_r+0x26e>
 80092d0:	636f4361 	.word	0x636f4361
 80092d4:	3fd287a7 	.word	0x3fd287a7
 80092d8:	8b60c8b3 	.word	0x8b60c8b3
 80092dc:	3fc68a28 	.word	0x3fc68a28
 80092e0:	509f79fb 	.word	0x509f79fb
 80092e4:	3fd34413 	.word	0x3fd34413
 80092e8:	0800c06e 	.word	0x0800c06e
 80092ec:	0800c085 	.word	0x0800c085
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	0800c06a 	.word	0x0800c06a
 80092f8:	0800c061 	.word	0x0800c061
 80092fc:	0800bee5 	.word	0x0800bee5
 8009300:	3ff80000 	.word	0x3ff80000
 8009304:	0800c200 	.word	0x0800c200
 8009308:	0800c0e4 	.word	0x0800c0e4
 800930c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930e:	9a00      	ldr	r2, [sp, #0]
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	2b0e      	cmp	r3, #14
 8009316:	f200 80ad 	bhi.w	8009474 <_dtoa_r+0x484>
 800931a:	2d00      	cmp	r5, #0
 800931c:	f000 80aa 	beq.w	8009474 <_dtoa_r+0x484>
 8009320:	f1ba 0f00 	cmp.w	sl, #0
 8009324:	dd36      	ble.n	8009394 <_dtoa_r+0x3a4>
 8009326:	4ac3      	ldr	r2, [pc, #780]	; (8009634 <_dtoa_r+0x644>)
 8009328:	f00a 030f 	and.w	r3, sl, #15
 800932c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009330:	ed93 7b00 	vldr	d7, [r3]
 8009334:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009338:	ea4f 172a 	mov.w	r7, sl, asr #4
 800933c:	eeb0 8a47 	vmov.f32	s16, s14
 8009340:	eef0 8a67 	vmov.f32	s17, s15
 8009344:	d016      	beq.n	8009374 <_dtoa_r+0x384>
 8009346:	4bbc      	ldr	r3, [pc, #752]	; (8009638 <_dtoa_r+0x648>)
 8009348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800934c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009350:	f7f7 fa84 	bl	800085c <__aeabi_ddiv>
 8009354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009358:	f007 070f 	and.w	r7, r7, #15
 800935c:	2503      	movs	r5, #3
 800935e:	4eb6      	ldr	r6, [pc, #728]	; (8009638 <_dtoa_r+0x648>)
 8009360:	b957      	cbnz	r7, 8009378 <_dtoa_r+0x388>
 8009362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009366:	ec53 2b18 	vmov	r2, r3, d8
 800936a:	f7f7 fa77 	bl	800085c <__aeabi_ddiv>
 800936e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009372:	e029      	b.n	80093c8 <_dtoa_r+0x3d8>
 8009374:	2502      	movs	r5, #2
 8009376:	e7f2      	b.n	800935e <_dtoa_r+0x36e>
 8009378:	07f9      	lsls	r1, r7, #31
 800937a:	d508      	bpl.n	800938e <_dtoa_r+0x39e>
 800937c:	ec51 0b18 	vmov	r0, r1, d8
 8009380:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009384:	f7f7 f940 	bl	8000608 <__aeabi_dmul>
 8009388:	ec41 0b18 	vmov	d8, r0, r1
 800938c:	3501      	adds	r5, #1
 800938e:	107f      	asrs	r7, r7, #1
 8009390:	3608      	adds	r6, #8
 8009392:	e7e5      	b.n	8009360 <_dtoa_r+0x370>
 8009394:	f000 80a6 	beq.w	80094e4 <_dtoa_r+0x4f4>
 8009398:	f1ca 0600 	rsb	r6, sl, #0
 800939c:	4ba5      	ldr	r3, [pc, #660]	; (8009634 <_dtoa_r+0x644>)
 800939e:	4fa6      	ldr	r7, [pc, #664]	; (8009638 <_dtoa_r+0x648>)
 80093a0:	f006 020f 	and.w	r2, r6, #15
 80093a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093b0:	f7f7 f92a 	bl	8000608 <__aeabi_dmul>
 80093b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b8:	1136      	asrs	r6, r6, #4
 80093ba:	2300      	movs	r3, #0
 80093bc:	2502      	movs	r5, #2
 80093be:	2e00      	cmp	r6, #0
 80093c0:	f040 8085 	bne.w	80094ce <_dtoa_r+0x4de>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1d2      	bne.n	800936e <_dtoa_r+0x37e>
 80093c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 808c 	beq.w	80094e8 <_dtoa_r+0x4f8>
 80093d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093d4:	4b99      	ldr	r3, [pc, #612]	; (800963c <_dtoa_r+0x64c>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fb86 	bl	8000aec <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f000 8081 	beq.w	80094e8 <_dtoa_r+0x4f8>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d07d      	beq.n	80094e8 <_dtoa_r+0x4f8>
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	dd3c      	ble.n	800946c <_dtoa_r+0x47c>
 80093f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b91      	ldr	r3, [pc, #580]	; (8009640 <_dtoa_r+0x650>)
 80093fc:	4630      	mov	r0, r6
 80093fe:	4639      	mov	r1, r7
 8009400:	f7f7 f902 	bl	8000608 <__aeabi_dmul>
 8009404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009408:	3501      	adds	r5, #1
 800940a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800940e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009412:	4628      	mov	r0, r5
 8009414:	f7f7 f88e 	bl	8000534 <__aeabi_i2d>
 8009418:	4632      	mov	r2, r6
 800941a:	463b      	mov	r3, r7
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	4b88      	ldr	r3, [pc, #544]	; (8009644 <_dtoa_r+0x654>)
 8009422:	2200      	movs	r2, #0
 8009424:	f7f6 ff3a 	bl	800029c <__adddf3>
 8009428:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800942c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009434:	2b00      	cmp	r3, #0
 8009436:	d15c      	bne.n	80094f2 <_dtoa_r+0x502>
 8009438:	4b83      	ldr	r3, [pc, #524]	; (8009648 <_dtoa_r+0x658>)
 800943a:	2200      	movs	r2, #0
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f6 ff2a 	bl	8000298 <__aeabi_dsub>
 8009444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009448:	4606      	mov	r6, r0
 800944a:	460f      	mov	r7, r1
 800944c:	f7f7 fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 8296 	bne.w	8009982 <_dtoa_r+0x992>
 8009456:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800945a:	4630      	mov	r0, r6
 800945c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009460:	4639      	mov	r1, r7
 8009462:	f7f7 fb43 	bl	8000aec <__aeabi_dcmplt>
 8009466:	2800      	cmp	r0, #0
 8009468:	f040 8288 	bne.w	800997c <_dtoa_r+0x98c>
 800946c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009476:	2b00      	cmp	r3, #0
 8009478:	f2c0 8158 	blt.w	800972c <_dtoa_r+0x73c>
 800947c:	f1ba 0f0e 	cmp.w	sl, #14
 8009480:	f300 8154 	bgt.w	800972c <_dtoa_r+0x73c>
 8009484:	4b6b      	ldr	r3, [pc, #428]	; (8009634 <_dtoa_r+0x644>)
 8009486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800948a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800948e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	f280 80e3 	bge.w	800965c <_dtoa_r+0x66c>
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f300 80df 	bgt.w	800965c <_dtoa_r+0x66c>
 800949e:	f040 826d 	bne.w	800997c <_dtoa_r+0x98c>
 80094a2:	4b69      	ldr	r3, [pc, #420]	; (8009648 <_dtoa_r+0x658>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094b2:	f7f7 fb2f 	bl	8000b14 <__aeabi_dcmpge>
 80094b6:	9e01      	ldr	r6, [sp, #4]
 80094b8:	4637      	mov	r7, r6
 80094ba:	2800      	cmp	r0, #0
 80094bc:	f040 8243 	bne.w	8009946 <_dtoa_r+0x956>
 80094c0:	9d00      	ldr	r5, [sp, #0]
 80094c2:	2331      	movs	r3, #49	; 0x31
 80094c4:	f805 3b01 	strb.w	r3, [r5], #1
 80094c8:	f10a 0a01 	add.w	sl, sl, #1
 80094cc:	e23f      	b.n	800994e <_dtoa_r+0x95e>
 80094ce:	07f2      	lsls	r2, r6, #31
 80094d0:	d505      	bpl.n	80094de <_dtoa_r+0x4ee>
 80094d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d6:	f7f7 f897 	bl	8000608 <__aeabi_dmul>
 80094da:	3501      	adds	r5, #1
 80094dc:	2301      	movs	r3, #1
 80094de:	1076      	asrs	r6, r6, #1
 80094e0:	3708      	adds	r7, #8
 80094e2:	e76c      	b.n	80093be <_dtoa_r+0x3ce>
 80094e4:	2502      	movs	r5, #2
 80094e6:	e76f      	b.n	80093c8 <_dtoa_r+0x3d8>
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80094ee:	930c      	str	r3, [sp, #48]	; 0x30
 80094f0:	e78d      	b.n	800940e <_dtoa_r+0x41e>
 80094f2:	9900      	ldr	r1, [sp, #0]
 80094f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094f8:	4b4e      	ldr	r3, [pc, #312]	; (8009634 <_dtoa_r+0x644>)
 80094fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094fe:	4401      	add	r1, r0
 8009500:	9102      	str	r1, [sp, #8]
 8009502:	9908      	ldr	r1, [sp, #32]
 8009504:	eeb0 8a47 	vmov.f32	s16, s14
 8009508:	eef0 8a67 	vmov.f32	s17, s15
 800950c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009514:	2900      	cmp	r1, #0
 8009516:	d045      	beq.n	80095a4 <_dtoa_r+0x5b4>
 8009518:	494c      	ldr	r1, [pc, #304]	; (800964c <_dtoa_r+0x65c>)
 800951a:	2000      	movs	r0, #0
 800951c:	f7f7 f99e 	bl	800085c <__aeabi_ddiv>
 8009520:	ec53 2b18 	vmov	r2, r3, d8
 8009524:	f7f6 feb8 	bl	8000298 <__aeabi_dsub>
 8009528:	9d00      	ldr	r5, [sp, #0]
 800952a:	ec41 0b18 	vmov	d8, r0, r1
 800952e:	4639      	mov	r1, r7
 8009530:	4630      	mov	r0, r6
 8009532:	f7f7 fb19 	bl	8000b68 <__aeabi_d2iz>
 8009536:	900c      	str	r0, [sp, #48]	; 0x30
 8009538:	f7f6 fffc 	bl	8000534 <__aeabi_i2d>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f6 fea8 	bl	8000298 <__aeabi_dsub>
 8009548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800954a:	3330      	adds	r3, #48	; 0x30
 800954c:	f805 3b01 	strb.w	r3, [r5], #1
 8009550:	ec53 2b18 	vmov	r2, r3, d8
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	f7f7 fac8 	bl	8000aec <__aeabi_dcmplt>
 800955c:	2800      	cmp	r0, #0
 800955e:	d165      	bne.n	800962c <_dtoa_r+0x63c>
 8009560:	4632      	mov	r2, r6
 8009562:	463b      	mov	r3, r7
 8009564:	4935      	ldr	r1, [pc, #212]	; (800963c <_dtoa_r+0x64c>)
 8009566:	2000      	movs	r0, #0
 8009568:	f7f6 fe96 	bl	8000298 <__aeabi_dsub>
 800956c:	ec53 2b18 	vmov	r2, r3, d8
 8009570:	f7f7 fabc 	bl	8000aec <__aeabi_dcmplt>
 8009574:	2800      	cmp	r0, #0
 8009576:	f040 80b9 	bne.w	80096ec <_dtoa_r+0x6fc>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	429d      	cmp	r5, r3
 800957e:	f43f af75 	beq.w	800946c <_dtoa_r+0x47c>
 8009582:	4b2f      	ldr	r3, [pc, #188]	; (8009640 <_dtoa_r+0x650>)
 8009584:	ec51 0b18 	vmov	r0, r1, d8
 8009588:	2200      	movs	r2, #0
 800958a:	f7f7 f83d 	bl	8000608 <__aeabi_dmul>
 800958e:	4b2c      	ldr	r3, [pc, #176]	; (8009640 <_dtoa_r+0x650>)
 8009590:	ec41 0b18 	vmov	d8, r0, r1
 8009594:	2200      	movs	r2, #0
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 f835 	bl	8000608 <__aeabi_dmul>
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	e7c4      	b.n	800952e <_dtoa_r+0x53e>
 80095a4:	ec51 0b17 	vmov	r0, r1, d7
 80095a8:	f7f7 f82e 	bl	8000608 <__aeabi_dmul>
 80095ac:	9b02      	ldr	r3, [sp, #8]
 80095ae:	9d00      	ldr	r5, [sp, #0]
 80095b0:	930c      	str	r3, [sp, #48]	; 0x30
 80095b2:	ec41 0b18 	vmov	d8, r0, r1
 80095b6:	4639      	mov	r1, r7
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7f7 fad5 	bl	8000b68 <__aeabi_d2iz>
 80095be:	9011      	str	r0, [sp, #68]	; 0x44
 80095c0:	f7f6 ffb8 	bl	8000534 <__aeabi_i2d>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f6 fe64 	bl	8000298 <__aeabi_dsub>
 80095d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095d2:	3330      	adds	r3, #48	; 0x30
 80095d4:	f805 3b01 	strb.w	r3, [r5], #1
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	429d      	cmp	r5, r3
 80095dc:	4606      	mov	r6, r0
 80095de:	460f      	mov	r7, r1
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	d134      	bne.n	8009650 <_dtoa_r+0x660>
 80095e6:	4b19      	ldr	r3, [pc, #100]	; (800964c <_dtoa_r+0x65c>)
 80095e8:	ec51 0b18 	vmov	r0, r1, d8
 80095ec:	f7f6 fe56 	bl	800029c <__adddf3>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa96 	bl	8000b28 <__aeabi_dcmpgt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d175      	bne.n	80096ec <_dtoa_r+0x6fc>
 8009600:	ec53 2b18 	vmov	r2, r3, d8
 8009604:	4911      	ldr	r1, [pc, #68]	; (800964c <_dtoa_r+0x65c>)
 8009606:	2000      	movs	r0, #0
 8009608:	f7f6 fe46 	bl	8000298 <__aeabi_dsub>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 fa6a 	bl	8000aec <__aeabi_dcmplt>
 8009618:	2800      	cmp	r0, #0
 800961a:	f43f af27 	beq.w	800946c <_dtoa_r+0x47c>
 800961e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009620:	1e6b      	subs	r3, r5, #1
 8009622:	930c      	str	r3, [sp, #48]	; 0x30
 8009624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009628:	2b30      	cmp	r3, #48	; 0x30
 800962a:	d0f8      	beq.n	800961e <_dtoa_r+0x62e>
 800962c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009630:	e04a      	b.n	80096c8 <_dtoa_r+0x6d8>
 8009632:	bf00      	nop
 8009634:	0800c200 	.word	0x0800c200
 8009638:	0800c1d8 	.word	0x0800c1d8
 800963c:	3ff00000 	.word	0x3ff00000
 8009640:	40240000 	.word	0x40240000
 8009644:	401c0000 	.word	0x401c0000
 8009648:	40140000 	.word	0x40140000
 800964c:	3fe00000 	.word	0x3fe00000
 8009650:	4baf      	ldr	r3, [pc, #700]	; (8009910 <_dtoa_r+0x920>)
 8009652:	f7f6 ffd9 	bl	8000608 <__aeabi_dmul>
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	e7ac      	b.n	80095b6 <_dtoa_r+0x5c6>
 800965c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009660:	9d00      	ldr	r5, [sp, #0]
 8009662:	4642      	mov	r2, r8
 8009664:	464b      	mov	r3, r9
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	f7f7 f8f7 	bl	800085c <__aeabi_ddiv>
 800966e:	f7f7 fa7b 	bl	8000b68 <__aeabi_d2iz>
 8009672:	9002      	str	r0, [sp, #8]
 8009674:	f7f6 ff5e 	bl	8000534 <__aeabi_i2d>
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	f7f6 ffc4 	bl	8000608 <__aeabi_dmul>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f7f6 fe06 	bl	8000298 <__aeabi_dsub>
 800968c:	9e02      	ldr	r6, [sp, #8]
 800968e:	9f01      	ldr	r7, [sp, #4]
 8009690:	3630      	adds	r6, #48	; 0x30
 8009692:	f805 6b01 	strb.w	r6, [r5], #1
 8009696:	9e00      	ldr	r6, [sp, #0]
 8009698:	1bae      	subs	r6, r5, r6
 800969a:	42b7      	cmp	r7, r6
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	d137      	bne.n	8009712 <_dtoa_r+0x722>
 80096a2:	f7f6 fdfb 	bl	800029c <__adddf3>
 80096a6:	4642      	mov	r2, r8
 80096a8:	464b      	mov	r3, r9
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	f7f7 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80096b2:	b9c8      	cbnz	r0, 80096e8 <_dtoa_r+0x6f8>
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80096c0:	b110      	cbz	r0, 80096c8 <_dtoa_r+0x6d8>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	07d9      	lsls	r1, r3, #31
 80096c6:	d40f      	bmi.n	80096e8 <_dtoa_r+0x6f8>
 80096c8:	4620      	mov	r0, r4
 80096ca:	4659      	mov	r1, fp
 80096cc:	f000 fe4a 	bl	800a364 <_Bfree>
 80096d0:	2300      	movs	r3, #0
 80096d2:	702b      	strb	r3, [r5, #0]
 80096d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d6:	f10a 0001 	add.w	r0, sl, #1
 80096da:	6018      	str	r0, [r3, #0]
 80096dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f43f acd8 	beq.w	8009094 <_dtoa_r+0xa4>
 80096e4:	601d      	str	r5, [r3, #0]
 80096e6:	e4d5      	b.n	8009094 <_dtoa_r+0xa4>
 80096e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80096ec:	462b      	mov	r3, r5
 80096ee:	461d      	mov	r5, r3
 80096f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f4:	2a39      	cmp	r2, #57	; 0x39
 80096f6:	d108      	bne.n	800970a <_dtoa_r+0x71a>
 80096f8:	9a00      	ldr	r2, [sp, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d1f7      	bne.n	80096ee <_dtoa_r+0x6fe>
 80096fe:	9a07      	ldr	r2, [sp, #28]
 8009700:	9900      	ldr	r1, [sp, #0]
 8009702:	3201      	adds	r2, #1
 8009704:	9207      	str	r2, [sp, #28]
 8009706:	2230      	movs	r2, #48	; 0x30
 8009708:	700a      	strb	r2, [r1, #0]
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	3201      	adds	r2, #1
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	e78c      	b.n	800962c <_dtoa_r+0x63c>
 8009712:	4b7f      	ldr	r3, [pc, #508]	; (8009910 <_dtoa_r+0x920>)
 8009714:	2200      	movs	r2, #0
 8009716:	f7f6 ff77 	bl	8000608 <__aeabi_dmul>
 800971a:	2200      	movs	r2, #0
 800971c:	2300      	movs	r3, #0
 800971e:	4606      	mov	r6, r0
 8009720:	460f      	mov	r7, r1
 8009722:	f7f7 f9d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009726:	2800      	cmp	r0, #0
 8009728:	d09b      	beq.n	8009662 <_dtoa_r+0x672>
 800972a:	e7cd      	b.n	80096c8 <_dtoa_r+0x6d8>
 800972c:	9a08      	ldr	r2, [sp, #32]
 800972e:	2a00      	cmp	r2, #0
 8009730:	f000 80c4 	beq.w	80098bc <_dtoa_r+0x8cc>
 8009734:	9a05      	ldr	r2, [sp, #20]
 8009736:	2a01      	cmp	r2, #1
 8009738:	f300 80a8 	bgt.w	800988c <_dtoa_r+0x89c>
 800973c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800973e:	2a00      	cmp	r2, #0
 8009740:	f000 80a0 	beq.w	8009884 <_dtoa_r+0x894>
 8009744:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009748:	9e06      	ldr	r6, [sp, #24]
 800974a:	4645      	mov	r5, r8
 800974c:	9a04      	ldr	r2, [sp, #16]
 800974e:	2101      	movs	r1, #1
 8009750:	441a      	add	r2, r3
 8009752:	4620      	mov	r0, r4
 8009754:	4498      	add	r8, r3
 8009756:	9204      	str	r2, [sp, #16]
 8009758:	f000 ff0a 	bl	800a570 <__i2b>
 800975c:	4607      	mov	r7, r0
 800975e:	2d00      	cmp	r5, #0
 8009760:	dd0b      	ble.n	800977a <_dtoa_r+0x78a>
 8009762:	9b04      	ldr	r3, [sp, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd08      	ble.n	800977a <_dtoa_r+0x78a>
 8009768:	42ab      	cmp	r3, r5
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	bfa8      	it	ge
 800976e:	462b      	movge	r3, r5
 8009770:	eba8 0803 	sub.w	r8, r8, r3
 8009774:	1aed      	subs	r5, r5, r3
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	9b06      	ldr	r3, [sp, #24]
 800977c:	b1fb      	cbz	r3, 80097be <_dtoa_r+0x7ce>
 800977e:	9b08      	ldr	r3, [sp, #32]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 809f 	beq.w	80098c4 <_dtoa_r+0x8d4>
 8009786:	2e00      	cmp	r6, #0
 8009788:	dd11      	ble.n	80097ae <_dtoa_r+0x7be>
 800978a:	4639      	mov	r1, r7
 800978c:	4632      	mov	r2, r6
 800978e:	4620      	mov	r0, r4
 8009790:	f000 ffaa 	bl	800a6e8 <__pow5mult>
 8009794:	465a      	mov	r2, fp
 8009796:	4601      	mov	r1, r0
 8009798:	4607      	mov	r7, r0
 800979a:	4620      	mov	r0, r4
 800979c:	f000 fefe 	bl	800a59c <__multiply>
 80097a0:	4659      	mov	r1, fp
 80097a2:	9007      	str	r0, [sp, #28]
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 fddd 	bl	800a364 <_Bfree>
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	469b      	mov	fp, r3
 80097ae:	9b06      	ldr	r3, [sp, #24]
 80097b0:	1b9a      	subs	r2, r3, r6
 80097b2:	d004      	beq.n	80097be <_dtoa_r+0x7ce>
 80097b4:	4659      	mov	r1, fp
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 ff96 	bl	800a6e8 <__pow5mult>
 80097bc:	4683      	mov	fp, r0
 80097be:	2101      	movs	r1, #1
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fed5 	bl	800a570 <__i2b>
 80097c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	4606      	mov	r6, r0
 80097cc:	dd7c      	ble.n	80098c8 <_dtoa_r+0x8d8>
 80097ce:	461a      	mov	r2, r3
 80097d0:	4601      	mov	r1, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 ff88 	bl	800a6e8 <__pow5mult>
 80097d8:	9b05      	ldr	r3, [sp, #20]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	4606      	mov	r6, r0
 80097de:	dd76      	ble.n	80098ce <_dtoa_r+0x8de>
 80097e0:	2300      	movs	r3, #0
 80097e2:	9306      	str	r3, [sp, #24]
 80097e4:	6933      	ldr	r3, [r6, #16]
 80097e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097ea:	6918      	ldr	r0, [r3, #16]
 80097ec:	f000 fe70 	bl	800a4d0 <__hi0bits>
 80097f0:	f1c0 0020 	rsb	r0, r0, #32
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	4418      	add	r0, r3
 80097f8:	f010 001f 	ands.w	r0, r0, #31
 80097fc:	f000 8086 	beq.w	800990c <_dtoa_r+0x91c>
 8009800:	f1c0 0320 	rsb	r3, r0, #32
 8009804:	2b04      	cmp	r3, #4
 8009806:	dd7f      	ble.n	8009908 <_dtoa_r+0x918>
 8009808:	f1c0 001c 	rsb	r0, r0, #28
 800980c:	9b04      	ldr	r3, [sp, #16]
 800980e:	4403      	add	r3, r0
 8009810:	4480      	add	r8, r0
 8009812:	4405      	add	r5, r0
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	f1b8 0f00 	cmp.w	r8, #0
 800981a:	dd05      	ble.n	8009828 <_dtoa_r+0x838>
 800981c:	4659      	mov	r1, fp
 800981e:	4642      	mov	r2, r8
 8009820:	4620      	mov	r0, r4
 8009822:	f000 ffbb 	bl	800a79c <__lshift>
 8009826:	4683      	mov	fp, r0
 8009828:	9b04      	ldr	r3, [sp, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd05      	ble.n	800983a <_dtoa_r+0x84a>
 800982e:	4631      	mov	r1, r6
 8009830:	461a      	mov	r2, r3
 8009832:	4620      	mov	r0, r4
 8009834:	f000 ffb2 	bl	800a79c <__lshift>
 8009838:	4606      	mov	r6, r0
 800983a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800983c:	2b00      	cmp	r3, #0
 800983e:	d069      	beq.n	8009914 <_dtoa_r+0x924>
 8009840:	4631      	mov	r1, r6
 8009842:	4658      	mov	r0, fp
 8009844:	f001 f816 	bl	800a874 <__mcmp>
 8009848:	2800      	cmp	r0, #0
 800984a:	da63      	bge.n	8009914 <_dtoa_r+0x924>
 800984c:	2300      	movs	r3, #0
 800984e:	4659      	mov	r1, fp
 8009850:	220a      	movs	r2, #10
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fda8 	bl	800a3a8 <__multadd>
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800985e:	4683      	mov	fp, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 818f 	beq.w	8009b84 <_dtoa_r+0xb94>
 8009866:	4639      	mov	r1, r7
 8009868:	2300      	movs	r3, #0
 800986a:	220a      	movs	r2, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f000 fd9b 	bl	800a3a8 <__multadd>
 8009872:	f1b9 0f00 	cmp.w	r9, #0
 8009876:	4607      	mov	r7, r0
 8009878:	f300 808e 	bgt.w	8009998 <_dtoa_r+0x9a8>
 800987c:	9b05      	ldr	r3, [sp, #20]
 800987e:	2b02      	cmp	r3, #2
 8009880:	dc50      	bgt.n	8009924 <_dtoa_r+0x934>
 8009882:	e089      	b.n	8009998 <_dtoa_r+0x9a8>
 8009884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800988a:	e75d      	b.n	8009748 <_dtoa_r+0x758>
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	1e5e      	subs	r6, r3, #1
 8009890:	9b06      	ldr	r3, [sp, #24]
 8009892:	42b3      	cmp	r3, r6
 8009894:	bfbf      	itttt	lt
 8009896:	9b06      	ldrlt	r3, [sp, #24]
 8009898:	9606      	strlt	r6, [sp, #24]
 800989a:	1af2      	sublt	r2, r6, r3
 800989c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800989e:	bfb6      	itet	lt
 80098a0:	189b      	addlt	r3, r3, r2
 80098a2:	1b9e      	subge	r6, r3, r6
 80098a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	bfb8      	it	lt
 80098aa:	2600      	movlt	r6, #0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	bfb5      	itete	lt
 80098b0:	eba8 0503 	sublt.w	r5, r8, r3
 80098b4:	9b01      	ldrge	r3, [sp, #4]
 80098b6:	2300      	movlt	r3, #0
 80098b8:	4645      	movge	r5, r8
 80098ba:	e747      	b.n	800974c <_dtoa_r+0x75c>
 80098bc:	9e06      	ldr	r6, [sp, #24]
 80098be:	9f08      	ldr	r7, [sp, #32]
 80098c0:	4645      	mov	r5, r8
 80098c2:	e74c      	b.n	800975e <_dtoa_r+0x76e>
 80098c4:	9a06      	ldr	r2, [sp, #24]
 80098c6:	e775      	b.n	80097b4 <_dtoa_r+0x7c4>
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	dc18      	bgt.n	8009900 <_dtoa_r+0x910>
 80098ce:	9b02      	ldr	r3, [sp, #8]
 80098d0:	b9b3      	cbnz	r3, 8009900 <_dtoa_r+0x910>
 80098d2:	9b03      	ldr	r3, [sp, #12]
 80098d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098d8:	b9a3      	cbnz	r3, 8009904 <_dtoa_r+0x914>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098e0:	0d1b      	lsrs	r3, r3, #20
 80098e2:	051b      	lsls	r3, r3, #20
 80098e4:	b12b      	cbz	r3, 80098f2 <_dtoa_r+0x902>
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	3301      	adds	r3, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f108 0801 	add.w	r8, r8, #1
 80098f0:	2301      	movs	r3, #1
 80098f2:	9306      	str	r3, [sp, #24]
 80098f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f47f af74 	bne.w	80097e4 <_dtoa_r+0x7f4>
 80098fc:	2001      	movs	r0, #1
 80098fe:	e779      	b.n	80097f4 <_dtoa_r+0x804>
 8009900:	2300      	movs	r3, #0
 8009902:	e7f6      	b.n	80098f2 <_dtoa_r+0x902>
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	e7f4      	b.n	80098f2 <_dtoa_r+0x902>
 8009908:	d085      	beq.n	8009816 <_dtoa_r+0x826>
 800990a:	4618      	mov	r0, r3
 800990c:	301c      	adds	r0, #28
 800990e:	e77d      	b.n	800980c <_dtoa_r+0x81c>
 8009910:	40240000 	.word	0x40240000
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dc38      	bgt.n	800998c <_dtoa_r+0x99c>
 800991a:	9b05      	ldr	r3, [sp, #20]
 800991c:	2b02      	cmp	r3, #2
 800991e:	dd35      	ble.n	800998c <_dtoa_r+0x99c>
 8009920:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009924:	f1b9 0f00 	cmp.w	r9, #0
 8009928:	d10d      	bne.n	8009946 <_dtoa_r+0x956>
 800992a:	4631      	mov	r1, r6
 800992c:	464b      	mov	r3, r9
 800992e:	2205      	movs	r2, #5
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fd39 	bl	800a3a8 <__multadd>
 8009936:	4601      	mov	r1, r0
 8009938:	4606      	mov	r6, r0
 800993a:	4658      	mov	r0, fp
 800993c:	f000 ff9a 	bl	800a874 <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	f73f adbd 	bgt.w	80094c0 <_dtoa_r+0x4d0>
 8009946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009948:	9d00      	ldr	r5, [sp, #0]
 800994a:	ea6f 0a03 	mvn.w	sl, r3
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	4631      	mov	r1, r6
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fd05 	bl	800a364 <_Bfree>
 800995a:	2f00      	cmp	r7, #0
 800995c:	f43f aeb4 	beq.w	80096c8 <_dtoa_r+0x6d8>
 8009960:	f1b8 0f00 	cmp.w	r8, #0
 8009964:	d005      	beq.n	8009972 <_dtoa_r+0x982>
 8009966:	45b8      	cmp	r8, r7
 8009968:	d003      	beq.n	8009972 <_dtoa_r+0x982>
 800996a:	4641      	mov	r1, r8
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fcf9 	bl	800a364 <_Bfree>
 8009972:	4639      	mov	r1, r7
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fcf5 	bl	800a364 <_Bfree>
 800997a:	e6a5      	b.n	80096c8 <_dtoa_r+0x6d8>
 800997c:	2600      	movs	r6, #0
 800997e:	4637      	mov	r7, r6
 8009980:	e7e1      	b.n	8009946 <_dtoa_r+0x956>
 8009982:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009988:	4637      	mov	r7, r6
 800998a:	e599      	b.n	80094c0 <_dtoa_r+0x4d0>
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 80fd 	beq.w	8009b92 <_dtoa_r+0xba2>
 8009998:	2d00      	cmp	r5, #0
 800999a:	dd05      	ble.n	80099a8 <_dtoa_r+0x9b8>
 800999c:	4639      	mov	r1, r7
 800999e:	462a      	mov	r2, r5
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fefb 	bl	800a79c <__lshift>
 80099a6:	4607      	mov	r7, r0
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d05c      	beq.n	8009a68 <_dtoa_r+0xa78>
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fc97 	bl	800a2e4 <_Balloc>
 80099b6:	4605      	mov	r5, r0
 80099b8:	b928      	cbnz	r0, 80099c6 <_dtoa_r+0x9d6>
 80099ba:	4b80      	ldr	r3, [pc, #512]	; (8009bbc <_dtoa_r+0xbcc>)
 80099bc:	4602      	mov	r2, r0
 80099be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099c2:	f7ff bb2e 	b.w	8009022 <_dtoa_r+0x32>
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	3202      	adds	r2, #2
 80099ca:	0092      	lsls	r2, r2, #2
 80099cc:	f107 010c 	add.w	r1, r7, #12
 80099d0:	300c      	adds	r0, #12
 80099d2:	f7fd fd15 	bl	8007400 <memcpy>
 80099d6:	2201      	movs	r2, #1
 80099d8:	4629      	mov	r1, r5
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fede 	bl	800a79c <__lshift>
 80099e0:	9b00      	ldr	r3, [sp, #0]
 80099e2:	3301      	adds	r3, #1
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	9b00      	ldr	r3, [sp, #0]
 80099e8:	444b      	add	r3, r9
 80099ea:	9307      	str	r3, [sp, #28]
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	46b8      	mov	r8, r7
 80099f4:	9306      	str	r3, [sp, #24]
 80099f6:	4607      	mov	r7, r0
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	4631      	mov	r1, r6
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4658      	mov	r0, fp
 8009a00:	9302      	str	r3, [sp, #8]
 8009a02:	f7ff fa67 	bl	8008ed4 <quorem>
 8009a06:	4603      	mov	r3, r0
 8009a08:	3330      	adds	r3, #48	; 0x30
 8009a0a:	9004      	str	r0, [sp, #16]
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	4658      	mov	r0, fp
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	f000 ff2f 	bl	800a874 <__mcmp>
 8009a16:	463a      	mov	r2, r7
 8009a18:	4681      	mov	r9, r0
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 ff45 	bl	800a8ac <__mdiff>
 8009a22:	68c2      	ldr	r2, [r0, #12]
 8009a24:	9b08      	ldr	r3, [sp, #32]
 8009a26:	4605      	mov	r5, r0
 8009a28:	bb02      	cbnz	r2, 8009a6c <_dtoa_r+0xa7c>
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	f000 ff21 	bl	800a874 <__mcmp>
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	4602      	mov	r2, r0
 8009a36:	4629      	mov	r1, r5
 8009a38:	4620      	mov	r0, r4
 8009a3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a3e:	f000 fc91 	bl	800a364 <_Bfree>
 8009a42:	9b05      	ldr	r3, [sp, #20]
 8009a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a46:	9d01      	ldr	r5, [sp, #4]
 8009a48:	ea43 0102 	orr.w	r1, r3, r2
 8009a4c:	9b06      	ldr	r3, [sp, #24]
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	9b08      	ldr	r3, [sp, #32]
 8009a52:	d10d      	bne.n	8009a70 <_dtoa_r+0xa80>
 8009a54:	2b39      	cmp	r3, #57	; 0x39
 8009a56:	d029      	beq.n	8009aac <_dtoa_r+0xabc>
 8009a58:	f1b9 0f00 	cmp.w	r9, #0
 8009a5c:	dd01      	ble.n	8009a62 <_dtoa_r+0xa72>
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	3331      	adds	r3, #49	; 0x31
 8009a62:	9a02      	ldr	r2, [sp, #8]
 8009a64:	7013      	strb	r3, [r2, #0]
 8009a66:	e774      	b.n	8009952 <_dtoa_r+0x962>
 8009a68:	4638      	mov	r0, r7
 8009a6a:	e7b9      	b.n	80099e0 <_dtoa_r+0x9f0>
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	e7e2      	b.n	8009a36 <_dtoa_r+0xa46>
 8009a70:	f1b9 0f00 	cmp.w	r9, #0
 8009a74:	db06      	blt.n	8009a84 <_dtoa_r+0xa94>
 8009a76:	9905      	ldr	r1, [sp, #20]
 8009a78:	ea41 0909 	orr.w	r9, r1, r9
 8009a7c:	9906      	ldr	r1, [sp, #24]
 8009a7e:	ea59 0101 	orrs.w	r1, r9, r1
 8009a82:	d120      	bne.n	8009ac6 <_dtoa_r+0xad6>
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	ddec      	ble.n	8009a62 <_dtoa_r+0xa72>
 8009a88:	4659      	mov	r1, fp
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	f000 fe84 	bl	800a79c <__lshift>
 8009a94:	4631      	mov	r1, r6
 8009a96:	4683      	mov	fp, r0
 8009a98:	f000 feec 	bl	800a874 <__mcmp>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	dc02      	bgt.n	8009aa8 <_dtoa_r+0xab8>
 8009aa2:	d1de      	bne.n	8009a62 <_dtoa_r+0xa72>
 8009aa4:	07da      	lsls	r2, r3, #31
 8009aa6:	d5dc      	bpl.n	8009a62 <_dtoa_r+0xa72>
 8009aa8:	2b39      	cmp	r3, #57	; 0x39
 8009aaa:	d1d8      	bne.n	8009a5e <_dtoa_r+0xa6e>
 8009aac:	9a02      	ldr	r2, [sp, #8]
 8009aae:	2339      	movs	r3, #57	; 0x39
 8009ab0:	7013      	strb	r3, [r2, #0]
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	461d      	mov	r5, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009abc:	2a39      	cmp	r2, #57	; 0x39
 8009abe:	d050      	beq.n	8009b62 <_dtoa_r+0xb72>
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e745      	b.n	8009952 <_dtoa_r+0x962>
 8009ac6:	2a00      	cmp	r2, #0
 8009ac8:	dd03      	ble.n	8009ad2 <_dtoa_r+0xae2>
 8009aca:	2b39      	cmp	r3, #57	; 0x39
 8009acc:	d0ee      	beq.n	8009aac <_dtoa_r+0xabc>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	e7c7      	b.n	8009a62 <_dtoa_r+0xa72>
 8009ad2:	9a01      	ldr	r2, [sp, #4]
 8009ad4:	9907      	ldr	r1, [sp, #28]
 8009ad6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ada:	428a      	cmp	r2, r1
 8009adc:	d02a      	beq.n	8009b34 <_dtoa_r+0xb44>
 8009ade:	4659      	mov	r1, fp
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fc5f 	bl	800a3a8 <__multadd>
 8009aea:	45b8      	cmp	r8, r7
 8009aec:	4683      	mov	fp, r0
 8009aee:	f04f 0300 	mov.w	r3, #0
 8009af2:	f04f 020a 	mov.w	r2, #10
 8009af6:	4641      	mov	r1, r8
 8009af8:	4620      	mov	r0, r4
 8009afa:	d107      	bne.n	8009b0c <_dtoa_r+0xb1c>
 8009afc:	f000 fc54 	bl	800a3a8 <__multadd>
 8009b00:	4680      	mov	r8, r0
 8009b02:	4607      	mov	r7, r0
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	3301      	adds	r3, #1
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	e775      	b.n	80099f8 <_dtoa_r+0xa08>
 8009b0c:	f000 fc4c 	bl	800a3a8 <__multadd>
 8009b10:	4639      	mov	r1, r7
 8009b12:	4680      	mov	r8, r0
 8009b14:	2300      	movs	r3, #0
 8009b16:	220a      	movs	r2, #10
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fc45 	bl	800a3a8 <__multadd>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	e7f0      	b.n	8009b04 <_dtoa_r+0xb14>
 8009b22:	f1b9 0f00 	cmp.w	r9, #0
 8009b26:	9a00      	ldr	r2, [sp, #0]
 8009b28:	bfcc      	ite	gt
 8009b2a:	464d      	movgt	r5, r9
 8009b2c:	2501      	movle	r5, #1
 8009b2e:	4415      	add	r5, r2
 8009b30:	f04f 0800 	mov.w	r8, #0
 8009b34:	4659      	mov	r1, fp
 8009b36:	2201      	movs	r2, #1
 8009b38:	4620      	mov	r0, r4
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	f000 fe2e 	bl	800a79c <__lshift>
 8009b40:	4631      	mov	r1, r6
 8009b42:	4683      	mov	fp, r0
 8009b44:	f000 fe96 	bl	800a874 <__mcmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	dcb2      	bgt.n	8009ab2 <_dtoa_r+0xac2>
 8009b4c:	d102      	bne.n	8009b54 <_dtoa_r+0xb64>
 8009b4e:	9b01      	ldr	r3, [sp, #4]
 8009b50:	07db      	lsls	r3, r3, #31
 8009b52:	d4ae      	bmi.n	8009ab2 <_dtoa_r+0xac2>
 8009b54:	462b      	mov	r3, r5
 8009b56:	461d      	mov	r5, r3
 8009b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b5c:	2a30      	cmp	r2, #48	; 0x30
 8009b5e:	d0fa      	beq.n	8009b56 <_dtoa_r+0xb66>
 8009b60:	e6f7      	b.n	8009952 <_dtoa_r+0x962>
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d1a5      	bne.n	8009ab4 <_dtoa_r+0xac4>
 8009b68:	f10a 0a01 	add.w	sl, sl, #1
 8009b6c:	2331      	movs	r3, #49	; 0x31
 8009b6e:	e779      	b.n	8009a64 <_dtoa_r+0xa74>
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <_dtoa_r+0xbd0>)
 8009b72:	f7ff baaf 	b.w	80090d4 <_dtoa_r+0xe4>
 8009b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f47f aa86 	bne.w	800908a <_dtoa_r+0x9a>
 8009b7e:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <_dtoa_r+0xbd4>)
 8009b80:	f7ff baa8 	b.w	80090d4 <_dtoa_r+0xe4>
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	dc03      	bgt.n	8009b92 <_dtoa_r+0xba2>
 8009b8a:	9b05      	ldr	r3, [sp, #20]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	f73f aec9 	bgt.w	8009924 <_dtoa_r+0x934>
 8009b92:	9d00      	ldr	r5, [sp, #0]
 8009b94:	4631      	mov	r1, r6
 8009b96:	4658      	mov	r0, fp
 8009b98:	f7ff f99c 	bl	8008ed4 <quorem>
 8009b9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ba4:	9a00      	ldr	r2, [sp, #0]
 8009ba6:	1aaa      	subs	r2, r5, r2
 8009ba8:	4591      	cmp	r9, r2
 8009baa:	ddba      	ble.n	8009b22 <_dtoa_r+0xb32>
 8009bac:	4659      	mov	r1, fp
 8009bae:	2300      	movs	r3, #0
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 fbf8 	bl	800a3a8 <__multadd>
 8009bb8:	4683      	mov	fp, r0
 8009bba:	e7eb      	b.n	8009b94 <_dtoa_r+0xba4>
 8009bbc:	0800c0e4 	.word	0x0800c0e4
 8009bc0:	0800bee4 	.word	0x0800bee4
 8009bc4:	0800c061 	.word	0x0800c061

08009bc8 <rshift>:
 8009bc8:	6903      	ldr	r3, [r0, #16]
 8009bca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bd6:	f100 0414 	add.w	r4, r0, #20
 8009bda:	dd45      	ble.n	8009c68 <rshift+0xa0>
 8009bdc:	f011 011f 	ands.w	r1, r1, #31
 8009be0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009be4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009be8:	d10c      	bne.n	8009c04 <rshift+0x3c>
 8009bea:	f100 0710 	add.w	r7, r0, #16
 8009bee:	4629      	mov	r1, r5
 8009bf0:	42b1      	cmp	r1, r6
 8009bf2:	d334      	bcc.n	8009c5e <rshift+0x96>
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	1eea      	subs	r2, r5, #3
 8009bfa:	4296      	cmp	r6, r2
 8009bfc:	bf38      	it	cc
 8009bfe:	2300      	movcc	r3, #0
 8009c00:	4423      	add	r3, r4
 8009c02:	e015      	b.n	8009c30 <rshift+0x68>
 8009c04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c08:	f1c1 0820 	rsb	r8, r1, #32
 8009c0c:	40cf      	lsrs	r7, r1
 8009c0e:	f105 0e04 	add.w	lr, r5, #4
 8009c12:	46a1      	mov	r9, r4
 8009c14:	4576      	cmp	r6, lr
 8009c16:	46f4      	mov	ip, lr
 8009c18:	d815      	bhi.n	8009c46 <rshift+0x7e>
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	009a      	lsls	r2, r3, #2
 8009c1e:	3a04      	subs	r2, #4
 8009c20:	3501      	adds	r5, #1
 8009c22:	42ae      	cmp	r6, r5
 8009c24:	bf38      	it	cc
 8009c26:	2200      	movcc	r2, #0
 8009c28:	18a3      	adds	r3, r4, r2
 8009c2a:	50a7      	str	r7, [r4, r2]
 8009c2c:	b107      	cbz	r7, 8009c30 <rshift+0x68>
 8009c2e:	3304      	adds	r3, #4
 8009c30:	1b1a      	subs	r2, r3, r4
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c38:	bf08      	it	eq
 8009c3a:	2300      	moveq	r3, #0
 8009c3c:	6102      	str	r2, [r0, #16]
 8009c3e:	bf08      	it	eq
 8009c40:	6143      	streq	r3, [r0, #20]
 8009c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c46:	f8dc c000 	ldr.w	ip, [ip]
 8009c4a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c4e:	ea4c 0707 	orr.w	r7, ip, r7
 8009c52:	f849 7b04 	str.w	r7, [r9], #4
 8009c56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c5a:	40cf      	lsrs	r7, r1
 8009c5c:	e7da      	b.n	8009c14 <rshift+0x4c>
 8009c5e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c62:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c66:	e7c3      	b.n	8009bf0 <rshift+0x28>
 8009c68:	4623      	mov	r3, r4
 8009c6a:	e7e1      	b.n	8009c30 <rshift+0x68>

08009c6c <__hexdig_fun>:
 8009c6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c70:	2b09      	cmp	r3, #9
 8009c72:	d802      	bhi.n	8009c7a <__hexdig_fun+0xe>
 8009c74:	3820      	subs	r0, #32
 8009c76:	b2c0      	uxtb	r0, r0
 8009c78:	4770      	bx	lr
 8009c7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d801      	bhi.n	8009c86 <__hexdig_fun+0x1a>
 8009c82:	3847      	subs	r0, #71	; 0x47
 8009c84:	e7f7      	b.n	8009c76 <__hexdig_fun+0xa>
 8009c86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d801      	bhi.n	8009c92 <__hexdig_fun+0x26>
 8009c8e:	3827      	subs	r0, #39	; 0x27
 8009c90:	e7f1      	b.n	8009c76 <__hexdig_fun+0xa>
 8009c92:	2000      	movs	r0, #0
 8009c94:	4770      	bx	lr
	...

08009c98 <__gethex>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b02 	vpush	{d8}
 8009ca0:	b089      	sub	sp, #36	; 0x24
 8009ca2:	ee08 0a10 	vmov	s16, r0
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	4bbc      	ldr	r3, [pc, #752]	; (8009f9c <__gethex+0x304>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	468b      	mov	fp, r1
 8009cb2:	4690      	mov	r8, r2
 8009cb4:	f7f6 fa94 	bl	80001e0 <strlen>
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	f8db 2000 	ldr.w	r2, [fp]
 8009cbe:	4403      	add	r3, r0
 8009cc0:	4682      	mov	sl, r0
 8009cc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	1c93      	adds	r3, r2, #2
 8009cca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cd2:	32fe      	adds	r2, #254	; 0xfe
 8009cd4:	18d1      	adds	r1, r2, r3
 8009cd6:	461f      	mov	r7, r3
 8009cd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cdc:	9100      	str	r1, [sp, #0]
 8009cde:	2830      	cmp	r0, #48	; 0x30
 8009ce0:	d0f8      	beq.n	8009cd4 <__gethex+0x3c>
 8009ce2:	f7ff ffc3 	bl	8009c6c <__hexdig_fun>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d13a      	bne.n	8009d62 <__gethex+0xca>
 8009cec:	9901      	ldr	r1, [sp, #4]
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f001 f9e1 	bl	800b0b8 <strncmp>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d168      	bne.n	8009dce <__gethex+0x136>
 8009cfc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009d00:	eb07 060a 	add.w	r6, r7, sl
 8009d04:	f7ff ffb2 	bl	8009c6c <__hexdig_fun>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d062      	beq.n	8009dd2 <__gethex+0x13a>
 8009d0c:	4633      	mov	r3, r6
 8009d0e:	7818      	ldrb	r0, [r3, #0]
 8009d10:	2830      	cmp	r0, #48	; 0x30
 8009d12:	461f      	mov	r7, r3
 8009d14:	f103 0301 	add.w	r3, r3, #1
 8009d18:	d0f9      	beq.n	8009d0e <__gethex+0x76>
 8009d1a:	f7ff ffa7 	bl	8009c6c <__hexdig_fun>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	fab0 f480 	clz	r4, r0
 8009d24:	0964      	lsrs	r4, r4, #5
 8009d26:	4635      	mov	r5, r6
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	3201      	adds	r2, #1
 8009d30:	7830      	ldrb	r0, [r6, #0]
 8009d32:	f7ff ff9b 	bl	8009c6c <__hexdig_fun>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1f8      	bne.n	8009d2c <__gethex+0x94>
 8009d3a:	9901      	ldr	r1, [sp, #4]
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f001 f9ba 	bl	800b0b8 <strncmp>
 8009d44:	b980      	cbnz	r0, 8009d68 <__gethex+0xd0>
 8009d46:	b94d      	cbnz	r5, 8009d5c <__gethex+0xc4>
 8009d48:	eb06 050a 	add.w	r5, r6, sl
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4616      	mov	r6, r2
 8009d50:	3201      	adds	r2, #1
 8009d52:	7830      	ldrb	r0, [r6, #0]
 8009d54:	f7ff ff8a 	bl	8009c6c <__hexdig_fun>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d1f8      	bne.n	8009d4e <__gethex+0xb6>
 8009d5c:	1bad      	subs	r5, r5, r6
 8009d5e:	00ad      	lsls	r5, r5, #2
 8009d60:	e004      	b.n	8009d6c <__gethex+0xd4>
 8009d62:	2400      	movs	r4, #0
 8009d64:	4625      	mov	r5, r4
 8009d66:	e7e0      	b.n	8009d2a <__gethex+0x92>
 8009d68:	2d00      	cmp	r5, #0
 8009d6a:	d1f7      	bne.n	8009d5c <__gethex+0xc4>
 8009d6c:	7833      	ldrb	r3, [r6, #0]
 8009d6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d72:	2b50      	cmp	r3, #80	; 0x50
 8009d74:	d13b      	bne.n	8009dee <__gethex+0x156>
 8009d76:	7873      	ldrb	r3, [r6, #1]
 8009d78:	2b2b      	cmp	r3, #43	; 0x2b
 8009d7a:	d02c      	beq.n	8009dd6 <__gethex+0x13e>
 8009d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8009d7e:	d02e      	beq.n	8009dde <__gethex+0x146>
 8009d80:	1c71      	adds	r1, r6, #1
 8009d82:	f04f 0900 	mov.w	r9, #0
 8009d86:	7808      	ldrb	r0, [r1, #0]
 8009d88:	f7ff ff70 	bl	8009c6c <__hexdig_fun>
 8009d8c:	1e43      	subs	r3, r0, #1
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b18      	cmp	r3, #24
 8009d92:	d82c      	bhi.n	8009dee <__gethex+0x156>
 8009d94:	f1a0 0210 	sub.w	r2, r0, #16
 8009d98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d9c:	f7ff ff66 	bl	8009c6c <__hexdig_fun>
 8009da0:	1e43      	subs	r3, r0, #1
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b18      	cmp	r3, #24
 8009da6:	d91d      	bls.n	8009de4 <__gethex+0x14c>
 8009da8:	f1b9 0f00 	cmp.w	r9, #0
 8009dac:	d000      	beq.n	8009db0 <__gethex+0x118>
 8009dae:	4252      	negs	r2, r2
 8009db0:	4415      	add	r5, r2
 8009db2:	f8cb 1000 	str.w	r1, [fp]
 8009db6:	b1e4      	cbz	r4, 8009df2 <__gethex+0x15a>
 8009db8:	9b00      	ldr	r3, [sp, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2700      	movne	r7, #0
 8009dc0:	2706      	moveq	r7, #6
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	b009      	add	sp, #36	; 0x24
 8009dc6:	ecbd 8b02 	vpop	{d8}
 8009dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dce:	463e      	mov	r6, r7
 8009dd0:	4625      	mov	r5, r4
 8009dd2:	2401      	movs	r4, #1
 8009dd4:	e7ca      	b.n	8009d6c <__gethex+0xd4>
 8009dd6:	f04f 0900 	mov.w	r9, #0
 8009dda:	1cb1      	adds	r1, r6, #2
 8009ddc:	e7d3      	b.n	8009d86 <__gethex+0xee>
 8009dde:	f04f 0901 	mov.w	r9, #1
 8009de2:	e7fa      	b.n	8009dda <__gethex+0x142>
 8009de4:	230a      	movs	r3, #10
 8009de6:	fb03 0202 	mla	r2, r3, r2, r0
 8009dea:	3a10      	subs	r2, #16
 8009dec:	e7d4      	b.n	8009d98 <__gethex+0x100>
 8009dee:	4631      	mov	r1, r6
 8009df0:	e7df      	b.n	8009db2 <__gethex+0x11a>
 8009df2:	1bf3      	subs	r3, r6, r7
 8009df4:	3b01      	subs	r3, #1
 8009df6:	4621      	mov	r1, r4
 8009df8:	2b07      	cmp	r3, #7
 8009dfa:	dc0b      	bgt.n	8009e14 <__gethex+0x17c>
 8009dfc:	ee18 0a10 	vmov	r0, s16
 8009e00:	f000 fa70 	bl	800a2e4 <_Balloc>
 8009e04:	4604      	mov	r4, r0
 8009e06:	b940      	cbnz	r0, 8009e1a <__gethex+0x182>
 8009e08:	4b65      	ldr	r3, [pc, #404]	; (8009fa0 <__gethex+0x308>)
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	21de      	movs	r1, #222	; 0xde
 8009e0e:	4865      	ldr	r0, [pc, #404]	; (8009fa4 <__gethex+0x30c>)
 8009e10:	f001 f972 	bl	800b0f8 <__assert_func>
 8009e14:	3101      	adds	r1, #1
 8009e16:	105b      	asrs	r3, r3, #1
 8009e18:	e7ee      	b.n	8009df8 <__gethex+0x160>
 8009e1a:	f100 0914 	add.w	r9, r0, #20
 8009e1e:	f04f 0b00 	mov.w	fp, #0
 8009e22:	f1ca 0301 	rsb	r3, sl, #1
 8009e26:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e2a:	f8cd b000 	str.w	fp, [sp]
 8009e2e:	9306      	str	r3, [sp, #24]
 8009e30:	42b7      	cmp	r7, r6
 8009e32:	d340      	bcc.n	8009eb6 <__gethex+0x21e>
 8009e34:	9802      	ldr	r0, [sp, #8]
 8009e36:	9b00      	ldr	r3, [sp, #0]
 8009e38:	f840 3b04 	str.w	r3, [r0], #4
 8009e3c:	eba0 0009 	sub.w	r0, r0, r9
 8009e40:	1080      	asrs	r0, r0, #2
 8009e42:	0146      	lsls	r6, r0, #5
 8009e44:	6120      	str	r0, [r4, #16]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fb42 	bl	800a4d0 <__hi0bits>
 8009e4c:	1a30      	subs	r0, r6, r0
 8009e4e:	f8d8 6000 	ldr.w	r6, [r8]
 8009e52:	42b0      	cmp	r0, r6
 8009e54:	dd63      	ble.n	8009f1e <__gethex+0x286>
 8009e56:	1b87      	subs	r7, r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 fedc 	bl	800ac18 <__any_on>
 8009e60:	4682      	mov	sl, r0
 8009e62:	b1a8      	cbz	r0, 8009e90 <__gethex+0x1f8>
 8009e64:	1e7b      	subs	r3, r7, #1
 8009e66:	1159      	asrs	r1, r3, #5
 8009e68:	f003 021f 	and.w	r2, r3, #31
 8009e6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e70:	f04f 0a01 	mov.w	sl, #1
 8009e74:	fa0a f202 	lsl.w	r2, sl, r2
 8009e78:	420a      	tst	r2, r1
 8009e7a:	d009      	beq.n	8009e90 <__gethex+0x1f8>
 8009e7c:	4553      	cmp	r3, sl
 8009e7e:	dd05      	ble.n	8009e8c <__gethex+0x1f4>
 8009e80:	1eb9      	subs	r1, r7, #2
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fec8 	bl	800ac18 <__any_on>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d145      	bne.n	8009f18 <__gethex+0x280>
 8009e8c:	f04f 0a02 	mov.w	sl, #2
 8009e90:	4639      	mov	r1, r7
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7ff fe98 	bl	8009bc8 <rshift>
 8009e98:	443d      	add	r5, r7
 8009e9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e9e:	42ab      	cmp	r3, r5
 8009ea0:	da4c      	bge.n	8009f3c <__gethex+0x2a4>
 8009ea2:	ee18 0a10 	vmov	r0, s16
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	f000 fa5c 	bl	800a364 <_Bfree>
 8009eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	27a3      	movs	r7, #163	; 0xa3
 8009eb4:	e785      	b.n	8009dc2 <__gethex+0x12a>
 8009eb6:	1e73      	subs	r3, r6, #1
 8009eb8:	9a05      	ldr	r2, [sp, #20]
 8009eba:	9303      	str	r3, [sp, #12]
 8009ebc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d019      	beq.n	8009ef8 <__gethex+0x260>
 8009ec4:	f1bb 0f20 	cmp.w	fp, #32
 8009ec8:	d107      	bne.n	8009eda <__gethex+0x242>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	9a00      	ldr	r2, [sp, #0]
 8009ece:	f843 2b04 	str.w	r2, [r3], #4
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	469b      	mov	fp, r3
 8009eda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ede:	f7ff fec5 	bl	8009c6c <__hexdig_fun>
 8009ee2:	9b00      	ldr	r3, [sp, #0]
 8009ee4:	f000 000f 	and.w	r0, r0, #15
 8009ee8:	fa00 f00b 	lsl.w	r0, r0, fp
 8009eec:	4303      	orrs	r3, r0
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	f10b 0b04 	add.w	fp, fp, #4
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	e00d      	b.n	8009f14 <__gethex+0x27c>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	9a06      	ldr	r2, [sp, #24]
 8009efc:	4413      	add	r3, r2
 8009efe:	42bb      	cmp	r3, r7
 8009f00:	d3e0      	bcc.n	8009ec4 <__gethex+0x22c>
 8009f02:	4618      	mov	r0, r3
 8009f04:	9901      	ldr	r1, [sp, #4]
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	4652      	mov	r2, sl
 8009f0a:	f001 f8d5 	bl	800b0b8 <strncmp>
 8009f0e:	9b07      	ldr	r3, [sp, #28]
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d1d7      	bne.n	8009ec4 <__gethex+0x22c>
 8009f14:	461e      	mov	r6, r3
 8009f16:	e78b      	b.n	8009e30 <__gethex+0x198>
 8009f18:	f04f 0a03 	mov.w	sl, #3
 8009f1c:	e7b8      	b.n	8009e90 <__gethex+0x1f8>
 8009f1e:	da0a      	bge.n	8009f36 <__gethex+0x29e>
 8009f20:	1a37      	subs	r7, r6, r0
 8009f22:	4621      	mov	r1, r4
 8009f24:	ee18 0a10 	vmov	r0, s16
 8009f28:	463a      	mov	r2, r7
 8009f2a:	f000 fc37 	bl	800a79c <__lshift>
 8009f2e:	1bed      	subs	r5, r5, r7
 8009f30:	4604      	mov	r4, r0
 8009f32:	f100 0914 	add.w	r9, r0, #20
 8009f36:	f04f 0a00 	mov.w	sl, #0
 8009f3a:	e7ae      	b.n	8009e9a <__gethex+0x202>
 8009f3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f40:	42a8      	cmp	r0, r5
 8009f42:	dd72      	ble.n	800a02a <__gethex+0x392>
 8009f44:	1b45      	subs	r5, r0, r5
 8009f46:	42ae      	cmp	r6, r5
 8009f48:	dc36      	bgt.n	8009fb8 <__gethex+0x320>
 8009f4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d02a      	beq.n	8009fa8 <__gethex+0x310>
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d02c      	beq.n	8009fb0 <__gethex+0x318>
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d115      	bne.n	8009f86 <__gethex+0x2ee>
 8009f5a:	42ae      	cmp	r6, r5
 8009f5c:	d113      	bne.n	8009f86 <__gethex+0x2ee>
 8009f5e:	2e01      	cmp	r6, #1
 8009f60:	d10b      	bne.n	8009f7a <__gethex+0x2e2>
 8009f62:	9a04      	ldr	r2, [sp, #16]
 8009f64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	6123      	str	r3, [r4, #16]
 8009f6e:	f8c9 3000 	str.w	r3, [r9]
 8009f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f74:	2762      	movs	r7, #98	; 0x62
 8009f76:	601c      	str	r4, [r3, #0]
 8009f78:	e723      	b.n	8009dc2 <__gethex+0x12a>
 8009f7a:	1e71      	subs	r1, r6, #1
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fe4b 	bl	800ac18 <__any_on>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d1ed      	bne.n	8009f62 <__gethex+0x2ca>
 8009f86:	ee18 0a10 	vmov	r0, s16
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f000 f9ea 	bl	800a364 <_Bfree>
 8009f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f92:	2300      	movs	r3, #0
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	2750      	movs	r7, #80	; 0x50
 8009f98:	e713      	b.n	8009dc2 <__gethex+0x12a>
 8009f9a:	bf00      	nop
 8009f9c:	0800c160 	.word	0x0800c160
 8009fa0:	0800c0e4 	.word	0x0800c0e4
 8009fa4:	0800c0f5 	.word	0x0800c0f5
 8009fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1eb      	bne.n	8009f86 <__gethex+0x2ee>
 8009fae:	e7d8      	b.n	8009f62 <__gethex+0x2ca>
 8009fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1d5      	bne.n	8009f62 <__gethex+0x2ca>
 8009fb6:	e7e6      	b.n	8009f86 <__gethex+0x2ee>
 8009fb8:	1e6f      	subs	r7, r5, #1
 8009fba:	f1ba 0f00 	cmp.w	sl, #0
 8009fbe:	d131      	bne.n	800a024 <__gethex+0x38c>
 8009fc0:	b127      	cbz	r7, 8009fcc <__gethex+0x334>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fe27 	bl	800ac18 <__any_on>
 8009fca:	4682      	mov	sl, r0
 8009fcc:	117b      	asrs	r3, r7, #5
 8009fce:	2101      	movs	r1, #1
 8009fd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fd4:	f007 071f 	and.w	r7, r7, #31
 8009fd8:	fa01 f707 	lsl.w	r7, r1, r7
 8009fdc:	421f      	tst	r7, r3
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	bf18      	it	ne
 8009fe4:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fe8:	1b76      	subs	r6, r6, r5
 8009fea:	f7ff fded 	bl	8009bc8 <rshift>
 8009fee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ff2:	2702      	movs	r7, #2
 8009ff4:	f1ba 0f00 	cmp.w	sl, #0
 8009ff8:	d048      	beq.n	800a08c <__gethex+0x3f4>
 8009ffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d015      	beq.n	800a02e <__gethex+0x396>
 800a002:	2b03      	cmp	r3, #3
 800a004:	d017      	beq.n	800a036 <__gethex+0x39e>
 800a006:	2b01      	cmp	r3, #1
 800a008:	d109      	bne.n	800a01e <__gethex+0x386>
 800a00a:	f01a 0f02 	tst.w	sl, #2
 800a00e:	d006      	beq.n	800a01e <__gethex+0x386>
 800a010:	f8d9 0000 	ldr.w	r0, [r9]
 800a014:	ea4a 0a00 	orr.w	sl, sl, r0
 800a018:	f01a 0f01 	tst.w	sl, #1
 800a01c:	d10e      	bne.n	800a03c <__gethex+0x3a4>
 800a01e:	f047 0710 	orr.w	r7, r7, #16
 800a022:	e033      	b.n	800a08c <__gethex+0x3f4>
 800a024:	f04f 0a01 	mov.w	sl, #1
 800a028:	e7d0      	b.n	8009fcc <__gethex+0x334>
 800a02a:	2701      	movs	r7, #1
 800a02c:	e7e2      	b.n	8009ff4 <__gethex+0x35c>
 800a02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a030:	f1c3 0301 	rsb	r3, r3, #1
 800a034:	9315      	str	r3, [sp, #84]	; 0x54
 800a036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0f0      	beq.n	800a01e <__gethex+0x386>
 800a03c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a040:	f104 0314 	add.w	r3, r4, #20
 800a044:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a048:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a04c:	f04f 0c00 	mov.w	ip, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f853 2b04 	ldr.w	r2, [r3], #4
 800a056:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a05a:	d01c      	beq.n	800a096 <__gethex+0x3fe>
 800a05c:	3201      	adds	r2, #1
 800a05e:	6002      	str	r2, [r0, #0]
 800a060:	2f02      	cmp	r7, #2
 800a062:	f104 0314 	add.w	r3, r4, #20
 800a066:	d13f      	bne.n	800a0e8 <__gethex+0x450>
 800a068:	f8d8 2000 	ldr.w	r2, [r8]
 800a06c:	3a01      	subs	r2, #1
 800a06e:	42b2      	cmp	r2, r6
 800a070:	d10a      	bne.n	800a088 <__gethex+0x3f0>
 800a072:	1171      	asrs	r1, r6, #5
 800a074:	2201      	movs	r2, #1
 800a076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a07a:	f006 061f 	and.w	r6, r6, #31
 800a07e:	fa02 f606 	lsl.w	r6, r2, r6
 800a082:	421e      	tst	r6, r3
 800a084:	bf18      	it	ne
 800a086:	4617      	movne	r7, r2
 800a088:	f047 0720 	orr.w	r7, r7, #32
 800a08c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a08e:	601c      	str	r4, [r3, #0]
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	601d      	str	r5, [r3, #0]
 800a094:	e695      	b.n	8009dc2 <__gethex+0x12a>
 800a096:	4299      	cmp	r1, r3
 800a098:	f843 cc04 	str.w	ip, [r3, #-4]
 800a09c:	d8d8      	bhi.n	800a050 <__gethex+0x3b8>
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	459b      	cmp	fp, r3
 800a0a2:	db19      	blt.n	800a0d8 <__gethex+0x440>
 800a0a4:	6861      	ldr	r1, [r4, #4]
 800a0a6:	ee18 0a10 	vmov	r0, s16
 800a0aa:	3101      	adds	r1, #1
 800a0ac:	f000 f91a 	bl	800a2e4 <_Balloc>
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	b918      	cbnz	r0, 800a0bc <__gethex+0x424>
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	; (800a120 <__gethex+0x488>)
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	2184      	movs	r1, #132	; 0x84
 800a0ba:	e6a8      	b.n	8009e0e <__gethex+0x176>
 800a0bc:	6922      	ldr	r2, [r4, #16]
 800a0be:	3202      	adds	r2, #2
 800a0c0:	f104 010c 	add.w	r1, r4, #12
 800a0c4:	0092      	lsls	r2, r2, #2
 800a0c6:	300c      	adds	r0, #12
 800a0c8:	f7fd f99a 	bl	8007400 <memcpy>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	ee18 0a10 	vmov	r0, s16
 800a0d2:	f000 f947 	bl	800a364 <_Bfree>
 800a0d6:	464c      	mov	r4, r9
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0e0:	6122      	str	r2, [r4, #16]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	615a      	str	r2, [r3, #20]
 800a0e6:	e7bb      	b.n	800a060 <__gethex+0x3c8>
 800a0e8:	6922      	ldr	r2, [r4, #16]
 800a0ea:	455a      	cmp	r2, fp
 800a0ec:	dd0b      	ble.n	800a106 <__gethex+0x46e>
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff fd69 	bl	8009bc8 <rshift>
 800a0f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0fa:	3501      	adds	r5, #1
 800a0fc:	42ab      	cmp	r3, r5
 800a0fe:	f6ff aed0 	blt.w	8009ea2 <__gethex+0x20a>
 800a102:	2701      	movs	r7, #1
 800a104:	e7c0      	b.n	800a088 <__gethex+0x3f0>
 800a106:	f016 061f 	ands.w	r6, r6, #31
 800a10a:	d0fa      	beq.n	800a102 <__gethex+0x46a>
 800a10c:	449a      	add	sl, r3
 800a10e:	f1c6 0620 	rsb	r6, r6, #32
 800a112:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a116:	f000 f9db 	bl	800a4d0 <__hi0bits>
 800a11a:	42b0      	cmp	r0, r6
 800a11c:	dbe7      	blt.n	800a0ee <__gethex+0x456>
 800a11e:	e7f0      	b.n	800a102 <__gethex+0x46a>
 800a120:	0800c0e4 	.word	0x0800c0e4

0800a124 <L_shift>:
 800a124:	f1c2 0208 	rsb	r2, r2, #8
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	b570      	push	{r4, r5, r6, lr}
 800a12c:	f1c2 0620 	rsb	r6, r2, #32
 800a130:	6843      	ldr	r3, [r0, #4]
 800a132:	6804      	ldr	r4, [r0, #0]
 800a134:	fa03 f506 	lsl.w	r5, r3, r6
 800a138:	432c      	orrs	r4, r5
 800a13a:	40d3      	lsrs	r3, r2
 800a13c:	6004      	str	r4, [r0, #0]
 800a13e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a142:	4288      	cmp	r0, r1
 800a144:	d3f4      	bcc.n	800a130 <L_shift+0xc>
 800a146:	bd70      	pop	{r4, r5, r6, pc}

0800a148 <__match>:
 800a148:	b530      	push	{r4, r5, lr}
 800a14a:	6803      	ldr	r3, [r0, #0]
 800a14c:	3301      	adds	r3, #1
 800a14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a152:	b914      	cbnz	r4, 800a15a <__match+0x12>
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	2001      	movs	r0, #1
 800a158:	bd30      	pop	{r4, r5, pc}
 800a15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a162:	2d19      	cmp	r5, #25
 800a164:	bf98      	it	ls
 800a166:	3220      	addls	r2, #32
 800a168:	42a2      	cmp	r2, r4
 800a16a:	d0f0      	beq.n	800a14e <__match+0x6>
 800a16c:	2000      	movs	r0, #0
 800a16e:	e7f3      	b.n	800a158 <__match+0x10>

0800a170 <__hexnan>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	680b      	ldr	r3, [r1, #0]
 800a176:	6801      	ldr	r1, [r0, #0]
 800a178:	115e      	asrs	r6, r3, #5
 800a17a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a17e:	f013 031f 	ands.w	r3, r3, #31
 800a182:	b087      	sub	sp, #28
 800a184:	bf18      	it	ne
 800a186:	3604      	addne	r6, #4
 800a188:	2500      	movs	r5, #0
 800a18a:	1f37      	subs	r7, r6, #4
 800a18c:	4682      	mov	sl, r0
 800a18e:	4690      	mov	r8, r2
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	f846 5c04 	str.w	r5, [r6, #-4]
 800a196:	46b9      	mov	r9, r7
 800a198:	463c      	mov	r4, r7
 800a19a:	9502      	str	r5, [sp, #8]
 800a19c:	46ab      	mov	fp, r5
 800a19e:	784a      	ldrb	r2, [r1, #1]
 800a1a0:	1c4b      	adds	r3, r1, #1
 800a1a2:	9303      	str	r3, [sp, #12]
 800a1a4:	b342      	cbz	r2, 800a1f8 <__hexnan+0x88>
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	9105      	str	r1, [sp, #20]
 800a1aa:	9204      	str	r2, [sp, #16]
 800a1ac:	f7ff fd5e 	bl	8009c6c <__hexdig_fun>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d14f      	bne.n	800a254 <__hexnan+0xe4>
 800a1b4:	9a04      	ldr	r2, [sp, #16]
 800a1b6:	9905      	ldr	r1, [sp, #20]
 800a1b8:	2a20      	cmp	r2, #32
 800a1ba:	d818      	bhi.n	800a1ee <__hexnan+0x7e>
 800a1bc:	9b02      	ldr	r3, [sp, #8]
 800a1be:	459b      	cmp	fp, r3
 800a1c0:	dd13      	ble.n	800a1ea <__hexnan+0x7a>
 800a1c2:	454c      	cmp	r4, r9
 800a1c4:	d206      	bcs.n	800a1d4 <__hexnan+0x64>
 800a1c6:	2d07      	cmp	r5, #7
 800a1c8:	dc04      	bgt.n	800a1d4 <__hexnan+0x64>
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7ff ffa8 	bl	800a124 <L_shift>
 800a1d4:	4544      	cmp	r4, r8
 800a1d6:	d950      	bls.n	800a27a <__hexnan+0x10a>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f1a4 0904 	sub.w	r9, r4, #4
 800a1de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1e2:	f8cd b008 	str.w	fp, [sp, #8]
 800a1e6:	464c      	mov	r4, r9
 800a1e8:	461d      	mov	r5, r3
 800a1ea:	9903      	ldr	r1, [sp, #12]
 800a1ec:	e7d7      	b.n	800a19e <__hexnan+0x2e>
 800a1ee:	2a29      	cmp	r2, #41	; 0x29
 800a1f0:	d156      	bne.n	800a2a0 <__hexnan+0x130>
 800a1f2:	3102      	adds	r1, #2
 800a1f4:	f8ca 1000 	str.w	r1, [sl]
 800a1f8:	f1bb 0f00 	cmp.w	fp, #0
 800a1fc:	d050      	beq.n	800a2a0 <__hexnan+0x130>
 800a1fe:	454c      	cmp	r4, r9
 800a200:	d206      	bcs.n	800a210 <__hexnan+0xa0>
 800a202:	2d07      	cmp	r5, #7
 800a204:	dc04      	bgt.n	800a210 <__hexnan+0xa0>
 800a206:	462a      	mov	r2, r5
 800a208:	4649      	mov	r1, r9
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7ff ff8a 	bl	800a124 <L_shift>
 800a210:	4544      	cmp	r4, r8
 800a212:	d934      	bls.n	800a27e <__hexnan+0x10e>
 800a214:	f1a8 0204 	sub.w	r2, r8, #4
 800a218:	4623      	mov	r3, r4
 800a21a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a21e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a222:	429f      	cmp	r7, r3
 800a224:	d2f9      	bcs.n	800a21a <__hexnan+0xaa>
 800a226:	1b3b      	subs	r3, r7, r4
 800a228:	f023 0303 	bic.w	r3, r3, #3
 800a22c:	3304      	adds	r3, #4
 800a22e:	3401      	adds	r4, #1
 800a230:	3e03      	subs	r6, #3
 800a232:	42b4      	cmp	r4, r6
 800a234:	bf88      	it	hi
 800a236:	2304      	movhi	r3, #4
 800a238:	4443      	add	r3, r8
 800a23a:	2200      	movs	r2, #0
 800a23c:	f843 2b04 	str.w	r2, [r3], #4
 800a240:	429f      	cmp	r7, r3
 800a242:	d2fb      	bcs.n	800a23c <__hexnan+0xcc>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	b91b      	cbnz	r3, 800a250 <__hexnan+0xe0>
 800a248:	4547      	cmp	r7, r8
 800a24a:	d127      	bne.n	800a29c <__hexnan+0x12c>
 800a24c:	2301      	movs	r3, #1
 800a24e:	603b      	str	r3, [r7, #0]
 800a250:	2005      	movs	r0, #5
 800a252:	e026      	b.n	800a2a2 <__hexnan+0x132>
 800a254:	3501      	adds	r5, #1
 800a256:	2d08      	cmp	r5, #8
 800a258:	f10b 0b01 	add.w	fp, fp, #1
 800a25c:	dd06      	ble.n	800a26c <__hexnan+0xfc>
 800a25e:	4544      	cmp	r4, r8
 800a260:	d9c3      	bls.n	800a1ea <__hexnan+0x7a>
 800a262:	2300      	movs	r3, #0
 800a264:	f844 3c04 	str.w	r3, [r4, #-4]
 800a268:	2501      	movs	r5, #1
 800a26a:	3c04      	subs	r4, #4
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	f000 000f 	and.w	r0, r0, #15
 800a272:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a276:	6022      	str	r2, [r4, #0]
 800a278:	e7b7      	b.n	800a1ea <__hexnan+0x7a>
 800a27a:	2508      	movs	r5, #8
 800a27c:	e7b5      	b.n	800a1ea <__hexnan+0x7a>
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0df      	beq.n	800a244 <__hexnan+0xd4>
 800a284:	f04f 32ff 	mov.w	r2, #4294967295
 800a288:	f1c3 0320 	rsb	r3, r3, #32
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
 800a290:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a294:	401a      	ands	r2, r3
 800a296:	f846 2c04 	str.w	r2, [r6, #-4]
 800a29a:	e7d3      	b.n	800a244 <__hexnan+0xd4>
 800a29c:	3f04      	subs	r7, #4
 800a29e:	e7d1      	b.n	800a244 <__hexnan+0xd4>
 800a2a0:	2004      	movs	r0, #4
 800a2a2:	b007      	add	sp, #28
 800a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2a8 <_localeconv_r>:
 800a2a8:	4800      	ldr	r0, [pc, #0]	; (800a2ac <_localeconv_r+0x4>)
 800a2aa:	4770      	bx	lr
 800a2ac:	20000230 	.word	0x20000230

0800a2b0 <malloc>:
 800a2b0:	4b02      	ldr	r3, [pc, #8]	; (800a2bc <malloc+0xc>)
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	f000 bd2f 	b.w	800ad18 <_malloc_r>
 800a2ba:	bf00      	nop
 800a2bc:	200000d8 	.word	0x200000d8

0800a2c0 <__ascii_mbtowc>:
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	b901      	cbnz	r1, 800a2c6 <__ascii_mbtowc+0x6>
 800a2c4:	a901      	add	r1, sp, #4
 800a2c6:	b142      	cbz	r2, 800a2da <__ascii_mbtowc+0x1a>
 800a2c8:	b14b      	cbz	r3, 800a2de <__ascii_mbtowc+0x1e>
 800a2ca:	7813      	ldrb	r3, [r2, #0]
 800a2cc:	600b      	str	r3, [r1, #0]
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	1e10      	subs	r0, r2, #0
 800a2d2:	bf18      	it	ne
 800a2d4:	2001      	movne	r0, #1
 800a2d6:	b002      	add	sp, #8
 800a2d8:	4770      	bx	lr
 800a2da:	4610      	mov	r0, r2
 800a2dc:	e7fb      	b.n	800a2d6 <__ascii_mbtowc+0x16>
 800a2de:	f06f 0001 	mvn.w	r0, #1
 800a2e2:	e7f8      	b.n	800a2d6 <__ascii_mbtowc+0x16>

0800a2e4 <_Balloc>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	b976      	cbnz	r6, 800a30c <_Balloc+0x28>
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f7ff ffde 	bl	800a2b0 <malloc>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2f8:	b920      	cbnz	r0, 800a304 <_Balloc+0x20>
 800a2fa:	4b18      	ldr	r3, [pc, #96]	; (800a35c <_Balloc+0x78>)
 800a2fc:	4818      	ldr	r0, [pc, #96]	; (800a360 <_Balloc+0x7c>)
 800a2fe:	2166      	movs	r1, #102	; 0x66
 800a300:	f000 fefa 	bl	800b0f8 <__assert_func>
 800a304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a308:	6006      	str	r6, [r0, #0]
 800a30a:	60c6      	str	r6, [r0, #12]
 800a30c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a30e:	68f3      	ldr	r3, [r6, #12]
 800a310:	b183      	cbz	r3, 800a334 <_Balloc+0x50>
 800a312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a31a:	b9b8      	cbnz	r0, 800a34c <_Balloc+0x68>
 800a31c:	2101      	movs	r1, #1
 800a31e:	fa01 f605 	lsl.w	r6, r1, r5
 800a322:	1d72      	adds	r2, r6, #5
 800a324:	0092      	lsls	r2, r2, #2
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fc97 	bl	800ac5a <_calloc_r>
 800a32c:	b160      	cbz	r0, 800a348 <_Balloc+0x64>
 800a32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a332:	e00e      	b.n	800a352 <_Balloc+0x6e>
 800a334:	2221      	movs	r2, #33	; 0x21
 800a336:	2104      	movs	r1, #4
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fc8e 	bl	800ac5a <_calloc_r>
 800a33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a340:	60f0      	str	r0, [r6, #12]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e4      	bne.n	800a312 <_Balloc+0x2e>
 800a348:	2000      	movs	r0, #0
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	6802      	ldr	r2, [r0, #0]
 800a34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a352:	2300      	movs	r3, #0
 800a354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a358:	e7f7      	b.n	800a34a <_Balloc+0x66>
 800a35a:	bf00      	nop
 800a35c:	0800c06e 	.word	0x0800c06e
 800a360:	0800c174 	.word	0x0800c174

0800a364 <_Bfree>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b976      	cbnz	r6, 800a38c <_Bfree+0x28>
 800a36e:	2010      	movs	r0, #16
 800a370:	f7ff ff9e 	bl	800a2b0 <malloc>
 800a374:	4602      	mov	r2, r0
 800a376:	6268      	str	r0, [r5, #36]	; 0x24
 800a378:	b920      	cbnz	r0, 800a384 <_Bfree+0x20>
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <_Bfree+0x3c>)
 800a37c:	4809      	ldr	r0, [pc, #36]	; (800a3a4 <_Bfree+0x40>)
 800a37e:	218a      	movs	r1, #138	; 0x8a
 800a380:	f000 feba 	bl	800b0f8 <__assert_func>
 800a384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a388:	6006      	str	r6, [r0, #0]
 800a38a:	60c6      	str	r6, [r0, #12]
 800a38c:	b13c      	cbz	r4, 800a39e <_Bfree+0x3a>
 800a38e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a390:	6862      	ldr	r2, [r4, #4]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a398:	6021      	str	r1, [r4, #0]
 800a39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	0800c06e 	.word	0x0800c06e
 800a3a4:	0800c174 	.word	0x0800c174

0800a3a8 <__multadd>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	690e      	ldr	r6, [r1, #16]
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	4698      	mov	r8, r3
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f101 0014 	add.w	r0, r1, #20
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	6805      	ldr	r5, [r0, #0]
 800a3bc:	b2a9      	uxth	r1, r5
 800a3be:	fb02 8101 	mla	r1, r2, r1, r8
 800a3c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a3c6:	0c2d      	lsrs	r5, r5, #16
 800a3c8:	fb02 c505 	mla	r5, r2, r5, ip
 800a3cc:	b289      	uxth	r1, r1
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a3d4:	429e      	cmp	r6, r3
 800a3d6:	f840 1b04 	str.w	r1, [r0], #4
 800a3da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a3de:	dcec      	bgt.n	800a3ba <__multadd+0x12>
 800a3e0:	f1b8 0f00 	cmp.w	r8, #0
 800a3e4:	d022      	beq.n	800a42c <__multadd+0x84>
 800a3e6:	68a3      	ldr	r3, [r4, #8]
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	dc19      	bgt.n	800a420 <__multadd+0x78>
 800a3ec:	6861      	ldr	r1, [r4, #4]
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	3101      	adds	r1, #1
 800a3f2:	f7ff ff77 	bl	800a2e4 <_Balloc>
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	b928      	cbnz	r0, 800a406 <__multadd+0x5e>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <__multadd+0x8c>)
 800a3fe:	480e      	ldr	r0, [pc, #56]	; (800a438 <__multadd+0x90>)
 800a400:	21b5      	movs	r1, #181	; 0xb5
 800a402:	f000 fe79 	bl	800b0f8 <__assert_func>
 800a406:	6922      	ldr	r2, [r4, #16]
 800a408:	3202      	adds	r2, #2
 800a40a:	f104 010c 	add.w	r1, r4, #12
 800a40e:	0092      	lsls	r2, r2, #2
 800a410:	300c      	adds	r0, #12
 800a412:	f7fc fff5 	bl	8007400 <memcpy>
 800a416:	4621      	mov	r1, r4
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff ffa3 	bl	800a364 <_Bfree>
 800a41e:	462c      	mov	r4, r5
 800a420:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a424:	3601      	adds	r6, #1
 800a426:	f8c3 8014 	str.w	r8, [r3, #20]
 800a42a:	6126      	str	r6, [r4, #16]
 800a42c:	4620      	mov	r0, r4
 800a42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a432:	bf00      	nop
 800a434:	0800c0e4 	.word	0x0800c0e4
 800a438:	0800c174 	.word	0x0800c174

0800a43c <__s2b>:
 800a43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	4615      	mov	r5, r2
 800a444:	461f      	mov	r7, r3
 800a446:	2209      	movs	r2, #9
 800a448:	3308      	adds	r3, #8
 800a44a:	4606      	mov	r6, r0
 800a44c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a450:	2100      	movs	r1, #0
 800a452:	2201      	movs	r2, #1
 800a454:	429a      	cmp	r2, r3
 800a456:	db09      	blt.n	800a46c <__s2b+0x30>
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ff43 	bl	800a2e4 <_Balloc>
 800a45e:	b940      	cbnz	r0, 800a472 <__s2b+0x36>
 800a460:	4602      	mov	r2, r0
 800a462:	4b19      	ldr	r3, [pc, #100]	; (800a4c8 <__s2b+0x8c>)
 800a464:	4819      	ldr	r0, [pc, #100]	; (800a4cc <__s2b+0x90>)
 800a466:	21ce      	movs	r1, #206	; 0xce
 800a468:	f000 fe46 	bl	800b0f8 <__assert_func>
 800a46c:	0052      	lsls	r2, r2, #1
 800a46e:	3101      	adds	r1, #1
 800a470:	e7f0      	b.n	800a454 <__s2b+0x18>
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	6143      	str	r3, [r0, #20]
 800a476:	2d09      	cmp	r5, #9
 800a478:	f04f 0301 	mov.w	r3, #1
 800a47c:	6103      	str	r3, [r0, #16]
 800a47e:	dd16      	ble.n	800a4ae <__s2b+0x72>
 800a480:	f104 0909 	add.w	r9, r4, #9
 800a484:	46c8      	mov	r8, r9
 800a486:	442c      	add	r4, r5
 800a488:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a48c:	4601      	mov	r1, r0
 800a48e:	3b30      	subs	r3, #48	; 0x30
 800a490:	220a      	movs	r2, #10
 800a492:	4630      	mov	r0, r6
 800a494:	f7ff ff88 	bl	800a3a8 <__multadd>
 800a498:	45a0      	cmp	r8, r4
 800a49a:	d1f5      	bne.n	800a488 <__s2b+0x4c>
 800a49c:	f1a5 0408 	sub.w	r4, r5, #8
 800a4a0:	444c      	add	r4, r9
 800a4a2:	1b2d      	subs	r5, r5, r4
 800a4a4:	1963      	adds	r3, r4, r5
 800a4a6:	42bb      	cmp	r3, r7
 800a4a8:	db04      	blt.n	800a4b4 <__s2b+0x78>
 800a4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ae:	340a      	adds	r4, #10
 800a4b0:	2509      	movs	r5, #9
 800a4b2:	e7f6      	b.n	800a4a2 <__s2b+0x66>
 800a4b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4b8:	4601      	mov	r1, r0
 800a4ba:	3b30      	subs	r3, #48	; 0x30
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7ff ff72 	bl	800a3a8 <__multadd>
 800a4c4:	e7ee      	b.n	800a4a4 <__s2b+0x68>
 800a4c6:	bf00      	nop
 800a4c8:	0800c0e4 	.word	0x0800c0e4
 800a4cc:	0800c174 	.word	0x0800c174

0800a4d0 <__hi0bits>:
 800a4d0:	0c03      	lsrs	r3, r0, #16
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	b9d3      	cbnz	r3, 800a50c <__hi0bits+0x3c>
 800a4d6:	0400      	lsls	r0, r0, #16
 800a4d8:	2310      	movs	r3, #16
 800a4da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4de:	bf04      	itt	eq
 800a4e0:	0200      	lsleq	r0, r0, #8
 800a4e2:	3308      	addeq	r3, #8
 800a4e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4e8:	bf04      	itt	eq
 800a4ea:	0100      	lsleq	r0, r0, #4
 800a4ec:	3304      	addeq	r3, #4
 800a4ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4f2:	bf04      	itt	eq
 800a4f4:	0080      	lsleq	r0, r0, #2
 800a4f6:	3302      	addeq	r3, #2
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	db05      	blt.n	800a508 <__hi0bits+0x38>
 800a4fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a500:	f103 0301 	add.w	r3, r3, #1
 800a504:	bf08      	it	eq
 800a506:	2320      	moveq	r3, #32
 800a508:	4618      	mov	r0, r3
 800a50a:	4770      	bx	lr
 800a50c:	2300      	movs	r3, #0
 800a50e:	e7e4      	b.n	800a4da <__hi0bits+0xa>

0800a510 <__lo0bits>:
 800a510:	6803      	ldr	r3, [r0, #0]
 800a512:	f013 0207 	ands.w	r2, r3, #7
 800a516:	4601      	mov	r1, r0
 800a518:	d00b      	beq.n	800a532 <__lo0bits+0x22>
 800a51a:	07da      	lsls	r2, r3, #31
 800a51c:	d424      	bmi.n	800a568 <__lo0bits+0x58>
 800a51e:	0798      	lsls	r0, r3, #30
 800a520:	bf49      	itett	mi
 800a522:	085b      	lsrmi	r3, r3, #1
 800a524:	089b      	lsrpl	r3, r3, #2
 800a526:	2001      	movmi	r0, #1
 800a528:	600b      	strmi	r3, [r1, #0]
 800a52a:	bf5c      	itt	pl
 800a52c:	600b      	strpl	r3, [r1, #0]
 800a52e:	2002      	movpl	r0, #2
 800a530:	4770      	bx	lr
 800a532:	b298      	uxth	r0, r3
 800a534:	b9b0      	cbnz	r0, 800a564 <__lo0bits+0x54>
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	2010      	movs	r0, #16
 800a53a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a53e:	bf04      	itt	eq
 800a540:	0a1b      	lsreq	r3, r3, #8
 800a542:	3008      	addeq	r0, #8
 800a544:	071a      	lsls	r2, r3, #28
 800a546:	bf04      	itt	eq
 800a548:	091b      	lsreq	r3, r3, #4
 800a54a:	3004      	addeq	r0, #4
 800a54c:	079a      	lsls	r2, r3, #30
 800a54e:	bf04      	itt	eq
 800a550:	089b      	lsreq	r3, r3, #2
 800a552:	3002      	addeq	r0, #2
 800a554:	07da      	lsls	r2, r3, #31
 800a556:	d403      	bmi.n	800a560 <__lo0bits+0x50>
 800a558:	085b      	lsrs	r3, r3, #1
 800a55a:	f100 0001 	add.w	r0, r0, #1
 800a55e:	d005      	beq.n	800a56c <__lo0bits+0x5c>
 800a560:	600b      	str	r3, [r1, #0]
 800a562:	4770      	bx	lr
 800a564:	4610      	mov	r0, r2
 800a566:	e7e8      	b.n	800a53a <__lo0bits+0x2a>
 800a568:	2000      	movs	r0, #0
 800a56a:	4770      	bx	lr
 800a56c:	2020      	movs	r0, #32
 800a56e:	4770      	bx	lr

0800a570 <__i2b>:
 800a570:	b510      	push	{r4, lr}
 800a572:	460c      	mov	r4, r1
 800a574:	2101      	movs	r1, #1
 800a576:	f7ff feb5 	bl	800a2e4 <_Balloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	b928      	cbnz	r0, 800a58a <__i2b+0x1a>
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <__i2b+0x24>)
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <__i2b+0x28>)
 800a582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a586:	f000 fdb7 	bl	800b0f8 <__assert_func>
 800a58a:	2301      	movs	r3, #1
 800a58c:	6144      	str	r4, [r0, #20]
 800a58e:	6103      	str	r3, [r0, #16]
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop
 800a594:	0800c0e4 	.word	0x0800c0e4
 800a598:	0800c174 	.word	0x0800c174

0800a59c <__multiply>:
 800a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	690a      	ldr	r2, [r1, #16]
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	bfb8      	it	lt
 800a5aa:	460b      	movlt	r3, r1
 800a5ac:	460d      	mov	r5, r1
 800a5ae:	bfbc      	itt	lt
 800a5b0:	4625      	movlt	r5, r4
 800a5b2:	461c      	movlt	r4, r3
 800a5b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a5b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a5bc:	68ab      	ldr	r3, [r5, #8]
 800a5be:	6869      	ldr	r1, [r5, #4]
 800a5c0:	eb0a 0709 	add.w	r7, sl, r9
 800a5c4:	42bb      	cmp	r3, r7
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	bfb8      	it	lt
 800a5ca:	3101      	addlt	r1, #1
 800a5cc:	f7ff fe8a 	bl	800a2e4 <_Balloc>
 800a5d0:	b930      	cbnz	r0, 800a5e0 <__multiply+0x44>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b42      	ldr	r3, [pc, #264]	; (800a6e0 <__multiply+0x144>)
 800a5d6:	4843      	ldr	r0, [pc, #268]	; (800a6e4 <__multiply+0x148>)
 800a5d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a5dc:	f000 fd8c 	bl	800b0f8 <__assert_func>
 800a5e0:	f100 0614 	add.w	r6, r0, #20
 800a5e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a5e8:	4633      	mov	r3, r6
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4543      	cmp	r3, r8
 800a5ee:	d31e      	bcc.n	800a62e <__multiply+0x92>
 800a5f0:	f105 0c14 	add.w	ip, r5, #20
 800a5f4:	f104 0314 	add.w	r3, r4, #20
 800a5f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a5fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a600:	9202      	str	r2, [sp, #8]
 800a602:	ebac 0205 	sub.w	r2, ip, r5
 800a606:	3a15      	subs	r2, #21
 800a608:	f022 0203 	bic.w	r2, r2, #3
 800a60c:	3204      	adds	r2, #4
 800a60e:	f105 0115 	add.w	r1, r5, #21
 800a612:	458c      	cmp	ip, r1
 800a614:	bf38      	it	cc
 800a616:	2204      	movcc	r2, #4
 800a618:	9201      	str	r2, [sp, #4]
 800a61a:	9a02      	ldr	r2, [sp, #8]
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d808      	bhi.n	800a634 <__multiply+0x98>
 800a622:	2f00      	cmp	r7, #0
 800a624:	dc55      	bgt.n	800a6d2 <__multiply+0x136>
 800a626:	6107      	str	r7, [r0, #16]
 800a628:	b005      	add	sp, #20
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	f843 2b04 	str.w	r2, [r3], #4
 800a632:	e7db      	b.n	800a5ec <__multiply+0x50>
 800a634:	f8b3 a000 	ldrh.w	sl, [r3]
 800a638:	f1ba 0f00 	cmp.w	sl, #0
 800a63c:	d020      	beq.n	800a680 <__multiply+0xe4>
 800a63e:	f105 0e14 	add.w	lr, r5, #20
 800a642:	46b1      	mov	r9, r6
 800a644:	2200      	movs	r2, #0
 800a646:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a64a:	f8d9 b000 	ldr.w	fp, [r9]
 800a64e:	b2a1      	uxth	r1, r4
 800a650:	fa1f fb8b 	uxth.w	fp, fp
 800a654:	fb0a b101 	mla	r1, sl, r1, fp
 800a658:	4411      	add	r1, r2
 800a65a:	f8d9 2000 	ldr.w	r2, [r9]
 800a65e:	0c24      	lsrs	r4, r4, #16
 800a660:	0c12      	lsrs	r2, r2, #16
 800a662:	fb0a 2404 	mla	r4, sl, r4, r2
 800a666:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a66a:	b289      	uxth	r1, r1
 800a66c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a670:	45f4      	cmp	ip, lr
 800a672:	f849 1b04 	str.w	r1, [r9], #4
 800a676:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a67a:	d8e4      	bhi.n	800a646 <__multiply+0xaa>
 800a67c:	9901      	ldr	r1, [sp, #4]
 800a67e:	5072      	str	r2, [r6, r1]
 800a680:	9a03      	ldr	r2, [sp, #12]
 800a682:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a686:	3304      	adds	r3, #4
 800a688:	f1b9 0f00 	cmp.w	r9, #0
 800a68c:	d01f      	beq.n	800a6ce <__multiply+0x132>
 800a68e:	6834      	ldr	r4, [r6, #0]
 800a690:	f105 0114 	add.w	r1, r5, #20
 800a694:	46b6      	mov	lr, r6
 800a696:	f04f 0a00 	mov.w	sl, #0
 800a69a:	880a      	ldrh	r2, [r1, #0]
 800a69c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a6a0:	fb09 b202 	mla	r2, r9, r2, fp
 800a6a4:	4492      	add	sl, r2
 800a6a6:	b2a4      	uxth	r4, r4
 800a6a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a6ac:	f84e 4b04 	str.w	r4, [lr], #4
 800a6b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a6b4:	f8be 2000 	ldrh.w	r2, [lr]
 800a6b8:	0c24      	lsrs	r4, r4, #16
 800a6ba:	fb09 2404 	mla	r4, r9, r4, r2
 800a6be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a6c2:	458c      	cmp	ip, r1
 800a6c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6c8:	d8e7      	bhi.n	800a69a <__multiply+0xfe>
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	50b4      	str	r4, [r6, r2]
 800a6ce:	3604      	adds	r6, #4
 800a6d0:	e7a3      	b.n	800a61a <__multiply+0x7e>
 800a6d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1a5      	bne.n	800a626 <__multiply+0x8a>
 800a6da:	3f01      	subs	r7, #1
 800a6dc:	e7a1      	b.n	800a622 <__multiply+0x86>
 800a6de:	bf00      	nop
 800a6e0:	0800c0e4 	.word	0x0800c0e4
 800a6e4:	0800c174 	.word	0x0800c174

0800a6e8 <__pow5mult>:
 800a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4615      	mov	r5, r2
 800a6ee:	f012 0203 	ands.w	r2, r2, #3
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	d007      	beq.n	800a708 <__pow5mult+0x20>
 800a6f8:	4c25      	ldr	r4, [pc, #148]	; (800a790 <__pow5mult+0xa8>)
 800a6fa:	3a01      	subs	r2, #1
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a702:	f7ff fe51 	bl	800a3a8 <__multadd>
 800a706:	4607      	mov	r7, r0
 800a708:	10ad      	asrs	r5, r5, #2
 800a70a:	d03d      	beq.n	800a788 <__pow5mult+0xa0>
 800a70c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a70e:	b97c      	cbnz	r4, 800a730 <__pow5mult+0x48>
 800a710:	2010      	movs	r0, #16
 800a712:	f7ff fdcd 	bl	800a2b0 <malloc>
 800a716:	4602      	mov	r2, r0
 800a718:	6270      	str	r0, [r6, #36]	; 0x24
 800a71a:	b928      	cbnz	r0, 800a728 <__pow5mult+0x40>
 800a71c:	4b1d      	ldr	r3, [pc, #116]	; (800a794 <__pow5mult+0xac>)
 800a71e:	481e      	ldr	r0, [pc, #120]	; (800a798 <__pow5mult+0xb0>)
 800a720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a724:	f000 fce8 	bl	800b0f8 <__assert_func>
 800a728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a72c:	6004      	str	r4, [r0, #0]
 800a72e:	60c4      	str	r4, [r0, #12]
 800a730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a738:	b94c      	cbnz	r4, 800a74e <__pow5mult+0x66>
 800a73a:	f240 2171 	movw	r1, #625	; 0x271
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff16 	bl	800a570 <__i2b>
 800a744:	2300      	movs	r3, #0
 800a746:	f8c8 0008 	str.w	r0, [r8, #8]
 800a74a:	4604      	mov	r4, r0
 800a74c:	6003      	str	r3, [r0, #0]
 800a74e:	f04f 0900 	mov.w	r9, #0
 800a752:	07eb      	lsls	r3, r5, #31
 800a754:	d50a      	bpl.n	800a76c <__pow5mult+0x84>
 800a756:	4639      	mov	r1, r7
 800a758:	4622      	mov	r2, r4
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff ff1e 	bl	800a59c <__multiply>
 800a760:	4639      	mov	r1, r7
 800a762:	4680      	mov	r8, r0
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff fdfd 	bl	800a364 <_Bfree>
 800a76a:	4647      	mov	r7, r8
 800a76c:	106d      	asrs	r5, r5, #1
 800a76e:	d00b      	beq.n	800a788 <__pow5mult+0xa0>
 800a770:	6820      	ldr	r0, [r4, #0]
 800a772:	b938      	cbnz	r0, 800a784 <__pow5mult+0x9c>
 800a774:	4622      	mov	r2, r4
 800a776:	4621      	mov	r1, r4
 800a778:	4630      	mov	r0, r6
 800a77a:	f7ff ff0f 	bl	800a59c <__multiply>
 800a77e:	6020      	str	r0, [r4, #0]
 800a780:	f8c0 9000 	str.w	r9, [r0]
 800a784:	4604      	mov	r4, r0
 800a786:	e7e4      	b.n	800a752 <__pow5mult+0x6a>
 800a788:	4638      	mov	r0, r7
 800a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78e:	bf00      	nop
 800a790:	0800c2c8 	.word	0x0800c2c8
 800a794:	0800c06e 	.word	0x0800c06e
 800a798:	0800c174 	.word	0x0800c174

0800a79c <__lshift>:
 800a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	6849      	ldr	r1, [r1, #4]
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	4691      	mov	r9, r2
 800a7b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7b4:	f108 0601 	add.w	r6, r8, #1
 800a7b8:	42b3      	cmp	r3, r6
 800a7ba:	db0b      	blt.n	800a7d4 <__lshift+0x38>
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff fd91 	bl	800a2e4 <_Balloc>
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	b948      	cbnz	r0, 800a7da <__lshift+0x3e>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	4b28      	ldr	r3, [pc, #160]	; (800a86c <__lshift+0xd0>)
 800a7ca:	4829      	ldr	r0, [pc, #164]	; (800a870 <__lshift+0xd4>)
 800a7cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7d0:	f000 fc92 	bl	800b0f8 <__assert_func>
 800a7d4:	3101      	adds	r1, #1
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	e7ee      	b.n	800a7b8 <__lshift+0x1c>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f100 0114 	add.w	r1, r0, #20
 800a7e0:	f100 0210 	add.w	r2, r0, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	4553      	cmp	r3, sl
 800a7e8:	db33      	blt.n	800a852 <__lshift+0xb6>
 800a7ea:	6920      	ldr	r0, [r4, #16]
 800a7ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7f0:	f104 0314 	add.w	r3, r4, #20
 800a7f4:	f019 091f 	ands.w	r9, r9, #31
 800a7f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a800:	d02b      	beq.n	800a85a <__lshift+0xbe>
 800a802:	f1c9 0e20 	rsb	lr, r9, #32
 800a806:	468a      	mov	sl, r1
 800a808:	2200      	movs	r2, #0
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	fa00 f009 	lsl.w	r0, r0, r9
 800a810:	4302      	orrs	r2, r0
 800a812:	f84a 2b04 	str.w	r2, [sl], #4
 800a816:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81a:	459c      	cmp	ip, r3
 800a81c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a820:	d8f3      	bhi.n	800a80a <__lshift+0x6e>
 800a822:	ebac 0304 	sub.w	r3, ip, r4
 800a826:	3b15      	subs	r3, #21
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	3304      	adds	r3, #4
 800a82e:	f104 0015 	add.w	r0, r4, #21
 800a832:	4584      	cmp	ip, r0
 800a834:	bf38      	it	cc
 800a836:	2304      	movcc	r3, #4
 800a838:	50ca      	str	r2, [r1, r3]
 800a83a:	b10a      	cbz	r2, 800a840 <__lshift+0xa4>
 800a83c:	f108 0602 	add.w	r6, r8, #2
 800a840:	3e01      	subs	r6, #1
 800a842:	4638      	mov	r0, r7
 800a844:	612e      	str	r6, [r5, #16]
 800a846:	4621      	mov	r1, r4
 800a848:	f7ff fd8c 	bl	800a364 <_Bfree>
 800a84c:	4628      	mov	r0, r5
 800a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a852:	f842 0f04 	str.w	r0, [r2, #4]!
 800a856:	3301      	adds	r3, #1
 800a858:	e7c5      	b.n	800a7e6 <__lshift+0x4a>
 800a85a:	3904      	subs	r1, #4
 800a85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a860:	f841 2f04 	str.w	r2, [r1, #4]!
 800a864:	459c      	cmp	ip, r3
 800a866:	d8f9      	bhi.n	800a85c <__lshift+0xc0>
 800a868:	e7ea      	b.n	800a840 <__lshift+0xa4>
 800a86a:	bf00      	nop
 800a86c:	0800c0e4 	.word	0x0800c0e4
 800a870:	0800c174 	.word	0x0800c174

0800a874 <__mcmp>:
 800a874:	b530      	push	{r4, r5, lr}
 800a876:	6902      	ldr	r2, [r0, #16]
 800a878:	690c      	ldr	r4, [r1, #16]
 800a87a:	1b12      	subs	r2, r2, r4
 800a87c:	d10e      	bne.n	800a89c <__mcmp+0x28>
 800a87e:	f100 0314 	add.w	r3, r0, #20
 800a882:	3114      	adds	r1, #20
 800a884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a894:	42a5      	cmp	r5, r4
 800a896:	d003      	beq.n	800a8a0 <__mcmp+0x2c>
 800a898:	d305      	bcc.n	800a8a6 <__mcmp+0x32>
 800a89a:	2201      	movs	r2, #1
 800a89c:	4610      	mov	r0, r2
 800a89e:	bd30      	pop	{r4, r5, pc}
 800a8a0:	4283      	cmp	r3, r0
 800a8a2:	d3f3      	bcc.n	800a88c <__mcmp+0x18>
 800a8a4:	e7fa      	b.n	800a89c <__mcmp+0x28>
 800a8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8aa:	e7f7      	b.n	800a89c <__mcmp+0x28>

0800a8ac <__mdiff>:
 800a8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4617      	mov	r7, r2
 800a8ba:	f7ff ffdb 	bl	800a874 <__mcmp>
 800a8be:	1e05      	subs	r5, r0, #0
 800a8c0:	d110      	bne.n	800a8e4 <__mdiff+0x38>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f7ff fd0d 	bl	800a2e4 <_Balloc>
 800a8ca:	b930      	cbnz	r0, 800a8da <__mdiff+0x2e>
 800a8cc:	4b39      	ldr	r3, [pc, #228]	; (800a9b4 <__mdiff+0x108>)
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	f240 2132 	movw	r1, #562	; 0x232
 800a8d4:	4838      	ldr	r0, [pc, #224]	; (800a9b8 <__mdiff+0x10c>)
 800a8d6:	f000 fc0f 	bl	800b0f8 <__assert_func>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	bfa4      	itt	ge
 800a8e6:	463b      	movge	r3, r7
 800a8e8:	4627      	movge	r7, r4
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	bfa6      	itte	ge
 800a8f0:	461c      	movge	r4, r3
 800a8f2:	2500      	movge	r5, #0
 800a8f4:	2501      	movlt	r5, #1
 800a8f6:	f7ff fcf5 	bl	800a2e4 <_Balloc>
 800a8fa:	b920      	cbnz	r0, 800a906 <__mdiff+0x5a>
 800a8fc:	4b2d      	ldr	r3, [pc, #180]	; (800a9b4 <__mdiff+0x108>)
 800a8fe:	4602      	mov	r2, r0
 800a900:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a904:	e7e6      	b.n	800a8d4 <__mdiff+0x28>
 800a906:	693e      	ldr	r6, [r7, #16]
 800a908:	60c5      	str	r5, [r0, #12]
 800a90a:	6925      	ldr	r5, [r4, #16]
 800a90c:	f107 0114 	add.w	r1, r7, #20
 800a910:	f104 0914 	add.w	r9, r4, #20
 800a914:	f100 0e14 	add.w	lr, r0, #20
 800a918:	f107 0210 	add.w	r2, r7, #16
 800a91c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a920:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a924:	46f2      	mov	sl, lr
 800a926:	2700      	movs	r7, #0
 800a928:	f859 3b04 	ldr.w	r3, [r9], #4
 800a92c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a930:	fa1f f883 	uxth.w	r8, r3
 800a934:	fa17 f78b 	uxtah	r7, r7, fp
 800a938:	0c1b      	lsrs	r3, r3, #16
 800a93a:	eba7 0808 	sub.w	r8, r7, r8
 800a93e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a942:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a946:	fa1f f888 	uxth.w	r8, r8
 800a94a:	141f      	asrs	r7, r3, #16
 800a94c:	454d      	cmp	r5, r9
 800a94e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a952:	f84a 3b04 	str.w	r3, [sl], #4
 800a956:	d8e7      	bhi.n	800a928 <__mdiff+0x7c>
 800a958:	1b2b      	subs	r3, r5, r4
 800a95a:	3b15      	subs	r3, #21
 800a95c:	f023 0303 	bic.w	r3, r3, #3
 800a960:	3304      	adds	r3, #4
 800a962:	3415      	adds	r4, #21
 800a964:	42a5      	cmp	r5, r4
 800a966:	bf38      	it	cc
 800a968:	2304      	movcc	r3, #4
 800a96a:	4419      	add	r1, r3
 800a96c:	4473      	add	r3, lr
 800a96e:	469e      	mov	lr, r3
 800a970:	460d      	mov	r5, r1
 800a972:	4565      	cmp	r5, ip
 800a974:	d30e      	bcc.n	800a994 <__mdiff+0xe8>
 800a976:	f10c 0203 	add.w	r2, ip, #3
 800a97a:	1a52      	subs	r2, r2, r1
 800a97c:	f022 0203 	bic.w	r2, r2, #3
 800a980:	3903      	subs	r1, #3
 800a982:	458c      	cmp	ip, r1
 800a984:	bf38      	it	cc
 800a986:	2200      	movcc	r2, #0
 800a988:	441a      	add	r2, r3
 800a98a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a98e:	b17b      	cbz	r3, 800a9b0 <__mdiff+0x104>
 800a990:	6106      	str	r6, [r0, #16]
 800a992:	e7a5      	b.n	800a8e0 <__mdiff+0x34>
 800a994:	f855 8b04 	ldr.w	r8, [r5], #4
 800a998:	fa17 f488 	uxtah	r4, r7, r8
 800a99c:	1422      	asrs	r2, r4, #16
 800a99e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a9a2:	b2a4      	uxth	r4, r4
 800a9a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a9a8:	f84e 4b04 	str.w	r4, [lr], #4
 800a9ac:	1417      	asrs	r7, r2, #16
 800a9ae:	e7e0      	b.n	800a972 <__mdiff+0xc6>
 800a9b0:	3e01      	subs	r6, #1
 800a9b2:	e7ea      	b.n	800a98a <__mdiff+0xde>
 800a9b4:	0800c0e4 	.word	0x0800c0e4
 800a9b8:	0800c174 	.word	0x0800c174

0800a9bc <__ulp>:
 800a9bc:	b082      	sub	sp, #8
 800a9be:	ed8d 0b00 	vstr	d0, [sp]
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	4912      	ldr	r1, [pc, #72]	; (800aa10 <__ulp+0x54>)
 800a9c6:	4019      	ands	r1, r3
 800a9c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	dd05      	ble.n	800a9dc <__ulp+0x20>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	ec43 2b10 	vmov	d0, r2, r3
 800a9d8:	b002      	add	sp, #8
 800a9da:	4770      	bx	lr
 800a9dc:	4249      	negs	r1, r1
 800a9de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a9e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a9e6:	f04f 0200 	mov.w	r2, #0
 800a9ea:	f04f 0300 	mov.w	r3, #0
 800a9ee:	da04      	bge.n	800a9fa <__ulp+0x3e>
 800a9f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a9f4:	fa41 f300 	asr.w	r3, r1, r0
 800a9f8:	e7ec      	b.n	800a9d4 <__ulp+0x18>
 800a9fa:	f1a0 0114 	sub.w	r1, r0, #20
 800a9fe:	291e      	cmp	r1, #30
 800aa00:	bfda      	itte	le
 800aa02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa06:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa0a:	2101      	movgt	r1, #1
 800aa0c:	460a      	mov	r2, r1
 800aa0e:	e7e1      	b.n	800a9d4 <__ulp+0x18>
 800aa10:	7ff00000 	.word	0x7ff00000

0800aa14 <__b2d>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	6905      	ldr	r5, [r0, #16]
 800aa18:	f100 0714 	add.w	r7, r0, #20
 800aa1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa20:	1f2e      	subs	r6, r5, #4
 800aa22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff fd52 	bl	800a4d0 <__hi0bits>
 800aa2c:	f1c0 0320 	rsb	r3, r0, #32
 800aa30:	280a      	cmp	r0, #10
 800aa32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aab0 <__b2d+0x9c>
 800aa36:	600b      	str	r3, [r1, #0]
 800aa38:	dc14      	bgt.n	800aa64 <__b2d+0x50>
 800aa3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa42:	42b7      	cmp	r7, r6
 800aa44:	ea41 030c 	orr.w	r3, r1, ip
 800aa48:	bf34      	ite	cc
 800aa4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa4e:	2100      	movcs	r1, #0
 800aa50:	3015      	adds	r0, #21
 800aa52:	fa04 f000 	lsl.w	r0, r4, r0
 800aa56:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa5a:	ea40 0201 	orr.w	r2, r0, r1
 800aa5e:	ec43 2b10 	vmov	d0, r2, r3
 800aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa64:	42b7      	cmp	r7, r6
 800aa66:	bf3a      	itte	cc
 800aa68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa70:	2100      	movcs	r1, #0
 800aa72:	380b      	subs	r0, #11
 800aa74:	d017      	beq.n	800aaa6 <__b2d+0x92>
 800aa76:	f1c0 0c20 	rsb	ip, r0, #32
 800aa7a:	fa04 f500 	lsl.w	r5, r4, r0
 800aa7e:	42be      	cmp	r6, r7
 800aa80:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa84:	ea45 0504 	orr.w	r5, r5, r4
 800aa88:	bf8c      	ite	hi
 800aa8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa8e:	2400      	movls	r4, #0
 800aa90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa94:	fa01 f000 	lsl.w	r0, r1, r0
 800aa98:	fa24 f40c 	lsr.w	r4, r4, ip
 800aa9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aaa0:	ea40 0204 	orr.w	r2, r0, r4
 800aaa4:	e7db      	b.n	800aa5e <__b2d+0x4a>
 800aaa6:	ea44 030c 	orr.w	r3, r4, ip
 800aaaa:	460a      	mov	r2, r1
 800aaac:	e7d7      	b.n	800aa5e <__b2d+0x4a>
 800aaae:	bf00      	nop
 800aab0:	3ff00000 	.word	0x3ff00000

0800aab4 <__d2b>:
 800aab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab8:	4689      	mov	r9, r1
 800aaba:	2101      	movs	r1, #1
 800aabc:	ec57 6b10 	vmov	r6, r7, d0
 800aac0:	4690      	mov	r8, r2
 800aac2:	f7ff fc0f 	bl	800a2e4 <_Balloc>
 800aac6:	4604      	mov	r4, r0
 800aac8:	b930      	cbnz	r0, 800aad8 <__d2b+0x24>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4b25      	ldr	r3, [pc, #148]	; (800ab64 <__d2b+0xb0>)
 800aace:	4826      	ldr	r0, [pc, #152]	; (800ab68 <__d2b+0xb4>)
 800aad0:	f240 310a 	movw	r1, #778	; 0x30a
 800aad4:	f000 fb10 	bl	800b0f8 <__assert_func>
 800aad8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aadc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aae0:	bb35      	cbnz	r5, 800ab30 <__d2b+0x7c>
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	d028      	beq.n	800ab3a <__d2b+0x86>
 800aae8:	4668      	mov	r0, sp
 800aaea:	9600      	str	r6, [sp, #0]
 800aaec:	f7ff fd10 	bl	800a510 <__lo0bits>
 800aaf0:	9900      	ldr	r1, [sp, #0]
 800aaf2:	b300      	cbz	r0, 800ab36 <__d2b+0x82>
 800aaf4:	9a01      	ldr	r2, [sp, #4]
 800aaf6:	f1c0 0320 	rsb	r3, r0, #32
 800aafa:	fa02 f303 	lsl.w	r3, r2, r3
 800aafe:	430b      	orrs	r3, r1
 800ab00:	40c2      	lsrs	r2, r0
 800ab02:	6163      	str	r3, [r4, #20]
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	61a3      	str	r3, [r4, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bf14      	ite	ne
 800ab0e:	2202      	movne	r2, #2
 800ab10:	2201      	moveq	r2, #1
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	b1d5      	cbz	r5, 800ab4c <__d2b+0x98>
 800ab16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab1a:	4405      	add	r5, r0
 800ab1c:	f8c9 5000 	str.w	r5, [r9]
 800ab20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab24:	f8c8 0000 	str.w	r0, [r8]
 800ab28:	4620      	mov	r0, r4
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab34:	e7d5      	b.n	800aae2 <__d2b+0x2e>
 800ab36:	6161      	str	r1, [r4, #20]
 800ab38:	e7e5      	b.n	800ab06 <__d2b+0x52>
 800ab3a:	a801      	add	r0, sp, #4
 800ab3c:	f7ff fce8 	bl	800a510 <__lo0bits>
 800ab40:	9b01      	ldr	r3, [sp, #4]
 800ab42:	6163      	str	r3, [r4, #20]
 800ab44:	2201      	movs	r2, #1
 800ab46:	6122      	str	r2, [r4, #16]
 800ab48:	3020      	adds	r0, #32
 800ab4a:	e7e3      	b.n	800ab14 <__d2b+0x60>
 800ab4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab54:	f8c9 0000 	str.w	r0, [r9]
 800ab58:	6918      	ldr	r0, [r3, #16]
 800ab5a:	f7ff fcb9 	bl	800a4d0 <__hi0bits>
 800ab5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab62:	e7df      	b.n	800ab24 <__d2b+0x70>
 800ab64:	0800c0e4 	.word	0x0800c0e4
 800ab68:	0800c174 	.word	0x0800c174

0800ab6c <__ratio>:
 800ab6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	4688      	mov	r8, r1
 800ab72:	4669      	mov	r1, sp
 800ab74:	4681      	mov	r9, r0
 800ab76:	f7ff ff4d 	bl	800aa14 <__b2d>
 800ab7a:	a901      	add	r1, sp, #4
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	ec55 4b10 	vmov	r4, r5, d0
 800ab82:	f7ff ff47 	bl	800aa14 <__b2d>
 800ab86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab8e:	eba3 0c02 	sub.w	ip, r3, r2
 800ab92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab9c:	ec51 0b10 	vmov	r0, r1, d0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfd6      	itet	le
 800aba4:	460a      	movle	r2, r1
 800aba6:	462a      	movgt	r2, r5
 800aba8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abac:	468b      	mov	fp, r1
 800abae:	462f      	mov	r7, r5
 800abb0:	bfd4      	ite	le
 800abb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abba:	4620      	mov	r0, r4
 800abbc:	ee10 2a10 	vmov	r2, s0
 800abc0:	465b      	mov	r3, fp
 800abc2:	4639      	mov	r1, r7
 800abc4:	f7f5 fe4a 	bl	800085c <__aeabi_ddiv>
 800abc8:	ec41 0b10 	vmov	d0, r0, r1
 800abcc:	b003      	add	sp, #12
 800abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd2 <__copybits>:
 800abd2:	3901      	subs	r1, #1
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	1149      	asrs	r1, r1, #5
 800abd8:	6914      	ldr	r4, [r2, #16]
 800abda:	3101      	adds	r1, #1
 800abdc:	f102 0314 	add.w	r3, r2, #20
 800abe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abe8:	1f05      	subs	r5, r0, #4
 800abea:	42a3      	cmp	r3, r4
 800abec:	d30c      	bcc.n	800ac08 <__copybits+0x36>
 800abee:	1aa3      	subs	r3, r4, r2
 800abf0:	3b11      	subs	r3, #17
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	3211      	adds	r2, #17
 800abf8:	42a2      	cmp	r2, r4
 800abfa:	bf88      	it	hi
 800abfc:	2300      	movhi	r3, #0
 800abfe:	4418      	add	r0, r3
 800ac00:	2300      	movs	r3, #0
 800ac02:	4288      	cmp	r0, r1
 800ac04:	d305      	bcc.n	800ac12 <__copybits+0x40>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac10:	e7eb      	b.n	800abea <__copybits+0x18>
 800ac12:	f840 3b04 	str.w	r3, [r0], #4
 800ac16:	e7f4      	b.n	800ac02 <__copybits+0x30>

0800ac18 <__any_on>:
 800ac18:	f100 0214 	add.w	r2, r0, #20
 800ac1c:	6900      	ldr	r0, [r0, #16]
 800ac1e:	114b      	asrs	r3, r1, #5
 800ac20:	4298      	cmp	r0, r3
 800ac22:	b510      	push	{r4, lr}
 800ac24:	db11      	blt.n	800ac4a <__any_on+0x32>
 800ac26:	dd0a      	ble.n	800ac3e <__any_on+0x26>
 800ac28:	f011 011f 	ands.w	r1, r1, #31
 800ac2c:	d007      	beq.n	800ac3e <__any_on+0x26>
 800ac2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac32:	fa24 f001 	lsr.w	r0, r4, r1
 800ac36:	fa00 f101 	lsl.w	r1, r0, r1
 800ac3a:	428c      	cmp	r4, r1
 800ac3c:	d10b      	bne.n	800ac56 <__any_on+0x3e>
 800ac3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d803      	bhi.n	800ac4e <__any_on+0x36>
 800ac46:	2000      	movs	r0, #0
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	e7f7      	b.n	800ac3e <__any_on+0x26>
 800ac4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac52:	2900      	cmp	r1, #0
 800ac54:	d0f5      	beq.n	800ac42 <__any_on+0x2a>
 800ac56:	2001      	movs	r0, #1
 800ac58:	e7f6      	b.n	800ac48 <__any_on+0x30>

0800ac5a <_calloc_r>:
 800ac5a:	b513      	push	{r0, r1, r4, lr}
 800ac5c:	434a      	muls	r2, r1
 800ac5e:	4611      	mov	r1, r2
 800ac60:	9201      	str	r2, [sp, #4]
 800ac62:	f000 f859 	bl	800ad18 <_malloc_r>
 800ac66:	4604      	mov	r4, r0
 800ac68:	b118      	cbz	r0, 800ac72 <_calloc_r+0x18>
 800ac6a:	9a01      	ldr	r2, [sp, #4]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	f7fc fbd5 	bl	800741c <memset>
 800ac72:	4620      	mov	r0, r4
 800ac74:	b002      	add	sp, #8
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <_free_r>:
 800ac78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d048      	beq.n	800ad10 <_free_r+0x98>
 800ac7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac82:	9001      	str	r0, [sp, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f1a1 0404 	sub.w	r4, r1, #4
 800ac8a:	bfb8      	it	lt
 800ac8c:	18e4      	addlt	r4, r4, r3
 800ac8e:	f000 fa7d 	bl	800b18c <__malloc_lock>
 800ac92:	4a20      	ldr	r2, [pc, #128]	; (800ad14 <_free_r+0x9c>)
 800ac94:	9801      	ldr	r0, [sp, #4]
 800ac96:	6813      	ldr	r3, [r2, #0]
 800ac98:	4615      	mov	r5, r2
 800ac9a:	b933      	cbnz	r3, 800acaa <_free_r+0x32>
 800ac9c:	6063      	str	r3, [r4, #4]
 800ac9e:	6014      	str	r4, [r2, #0]
 800aca0:	b003      	add	sp, #12
 800aca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca6:	f000 ba77 	b.w	800b198 <__malloc_unlock>
 800acaa:	42a3      	cmp	r3, r4
 800acac:	d90b      	bls.n	800acc6 <_free_r+0x4e>
 800acae:	6821      	ldr	r1, [r4, #0]
 800acb0:	1862      	adds	r2, r4, r1
 800acb2:	4293      	cmp	r3, r2
 800acb4:	bf04      	itt	eq
 800acb6:	681a      	ldreq	r2, [r3, #0]
 800acb8:	685b      	ldreq	r3, [r3, #4]
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	bf04      	itt	eq
 800acbe:	1852      	addeq	r2, r2, r1
 800acc0:	6022      	streq	r2, [r4, #0]
 800acc2:	602c      	str	r4, [r5, #0]
 800acc4:	e7ec      	b.n	800aca0 <_free_r+0x28>
 800acc6:	461a      	mov	r2, r3
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	b10b      	cbz	r3, 800acd0 <_free_r+0x58>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d9fa      	bls.n	800acc6 <_free_r+0x4e>
 800acd0:	6811      	ldr	r1, [r2, #0]
 800acd2:	1855      	adds	r5, r2, r1
 800acd4:	42a5      	cmp	r5, r4
 800acd6:	d10b      	bne.n	800acf0 <_free_r+0x78>
 800acd8:	6824      	ldr	r4, [r4, #0]
 800acda:	4421      	add	r1, r4
 800acdc:	1854      	adds	r4, r2, r1
 800acde:	42a3      	cmp	r3, r4
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	d1dd      	bne.n	800aca0 <_free_r+0x28>
 800ace4:	681c      	ldr	r4, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	6053      	str	r3, [r2, #4]
 800acea:	4421      	add	r1, r4
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	e7d7      	b.n	800aca0 <_free_r+0x28>
 800acf0:	d902      	bls.n	800acf8 <_free_r+0x80>
 800acf2:	230c      	movs	r3, #12
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	e7d3      	b.n	800aca0 <_free_r+0x28>
 800acf8:	6825      	ldr	r5, [r4, #0]
 800acfa:	1961      	adds	r1, r4, r5
 800acfc:	428b      	cmp	r3, r1
 800acfe:	bf04      	itt	eq
 800ad00:	6819      	ldreq	r1, [r3, #0]
 800ad02:	685b      	ldreq	r3, [r3, #4]
 800ad04:	6063      	str	r3, [r4, #4]
 800ad06:	bf04      	itt	eq
 800ad08:	1949      	addeq	r1, r1, r5
 800ad0a:	6021      	streq	r1, [r4, #0]
 800ad0c:	6054      	str	r4, [r2, #4]
 800ad0e:	e7c7      	b.n	800aca0 <_free_r+0x28>
 800ad10:	b003      	add	sp, #12
 800ad12:	bd30      	pop	{r4, r5, pc}
 800ad14:	20000348 	.word	0x20000348

0800ad18 <_malloc_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	1ccd      	adds	r5, r1, #3
 800ad1c:	f025 0503 	bic.w	r5, r5, #3
 800ad20:	3508      	adds	r5, #8
 800ad22:	2d0c      	cmp	r5, #12
 800ad24:	bf38      	it	cc
 800ad26:	250c      	movcc	r5, #12
 800ad28:	2d00      	cmp	r5, #0
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	db01      	blt.n	800ad32 <_malloc_r+0x1a>
 800ad2e:	42a9      	cmp	r1, r5
 800ad30:	d903      	bls.n	800ad3a <_malloc_r+0x22>
 800ad32:	230c      	movs	r3, #12
 800ad34:	6033      	str	r3, [r6, #0]
 800ad36:	2000      	movs	r0, #0
 800ad38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad3a:	f000 fa27 	bl	800b18c <__malloc_lock>
 800ad3e:	4921      	ldr	r1, [pc, #132]	; (800adc4 <_malloc_r+0xac>)
 800ad40:	680a      	ldr	r2, [r1, #0]
 800ad42:	4614      	mov	r4, r2
 800ad44:	b99c      	cbnz	r4, 800ad6e <_malloc_r+0x56>
 800ad46:	4f20      	ldr	r7, [pc, #128]	; (800adc8 <_malloc_r+0xb0>)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	b923      	cbnz	r3, 800ad56 <_malloc_r+0x3e>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f000 f9a2 	bl	800b098 <_sbrk_r>
 800ad54:	6038      	str	r0, [r7, #0]
 800ad56:	4629      	mov	r1, r5
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f99d 	bl	800b098 <_sbrk_r>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d123      	bne.n	800adaa <_malloc_r+0x92>
 800ad62:	230c      	movs	r3, #12
 800ad64:	6033      	str	r3, [r6, #0]
 800ad66:	4630      	mov	r0, r6
 800ad68:	f000 fa16 	bl	800b198 <__malloc_unlock>
 800ad6c:	e7e3      	b.n	800ad36 <_malloc_r+0x1e>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	1b5b      	subs	r3, r3, r5
 800ad72:	d417      	bmi.n	800ada4 <_malloc_r+0x8c>
 800ad74:	2b0b      	cmp	r3, #11
 800ad76:	d903      	bls.n	800ad80 <_malloc_r+0x68>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	441c      	add	r4, r3
 800ad7c:	6025      	str	r5, [r4, #0]
 800ad7e:	e004      	b.n	800ad8a <_malloc_r+0x72>
 800ad80:	6863      	ldr	r3, [r4, #4]
 800ad82:	42a2      	cmp	r2, r4
 800ad84:	bf0c      	ite	eq
 800ad86:	600b      	streq	r3, [r1, #0]
 800ad88:	6053      	strne	r3, [r2, #4]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f000 fa04 	bl	800b198 <__malloc_unlock>
 800ad90:	f104 000b 	add.w	r0, r4, #11
 800ad94:	1d23      	adds	r3, r4, #4
 800ad96:	f020 0007 	bic.w	r0, r0, #7
 800ad9a:	1ac2      	subs	r2, r0, r3
 800ad9c:	d0cc      	beq.n	800ad38 <_malloc_r+0x20>
 800ad9e:	1a1b      	subs	r3, r3, r0
 800ada0:	50a3      	str	r3, [r4, r2]
 800ada2:	e7c9      	b.n	800ad38 <_malloc_r+0x20>
 800ada4:	4622      	mov	r2, r4
 800ada6:	6864      	ldr	r4, [r4, #4]
 800ada8:	e7cc      	b.n	800ad44 <_malloc_r+0x2c>
 800adaa:	1cc4      	adds	r4, r0, #3
 800adac:	f024 0403 	bic.w	r4, r4, #3
 800adb0:	42a0      	cmp	r0, r4
 800adb2:	d0e3      	beq.n	800ad7c <_malloc_r+0x64>
 800adb4:	1a21      	subs	r1, r4, r0
 800adb6:	4630      	mov	r0, r6
 800adb8:	f000 f96e 	bl	800b098 <_sbrk_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	d1dd      	bne.n	800ad7c <_malloc_r+0x64>
 800adc0:	e7cf      	b.n	800ad62 <_malloc_r+0x4a>
 800adc2:	bf00      	nop
 800adc4:	20000348 	.word	0x20000348
 800adc8:	2000034c 	.word	0x2000034c

0800adcc <__ssputs_r>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	688e      	ldr	r6, [r1, #8]
 800add2:	429e      	cmp	r6, r3
 800add4:	4682      	mov	sl, r0
 800add6:	460c      	mov	r4, r1
 800add8:	4690      	mov	r8, r2
 800adda:	461f      	mov	r7, r3
 800addc:	d838      	bhi.n	800ae50 <__ssputs_r+0x84>
 800adde:	898a      	ldrh	r2, [r1, #12]
 800ade0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ade4:	d032      	beq.n	800ae4c <__ssputs_r+0x80>
 800ade6:	6825      	ldr	r5, [r4, #0]
 800ade8:	6909      	ldr	r1, [r1, #16]
 800adea:	eba5 0901 	sub.w	r9, r5, r1
 800adee:	6965      	ldr	r5, [r4, #20]
 800adf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf8:	3301      	adds	r3, #1
 800adfa:	444b      	add	r3, r9
 800adfc:	106d      	asrs	r5, r5, #1
 800adfe:	429d      	cmp	r5, r3
 800ae00:	bf38      	it	cc
 800ae02:	461d      	movcc	r5, r3
 800ae04:	0553      	lsls	r3, r2, #21
 800ae06:	d531      	bpl.n	800ae6c <__ssputs_r+0xa0>
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7ff ff85 	bl	800ad18 <_malloc_r>
 800ae0e:	4606      	mov	r6, r0
 800ae10:	b950      	cbnz	r0, 800ae28 <__ssputs_r+0x5c>
 800ae12:	230c      	movs	r3, #12
 800ae14:	f8ca 3000 	str.w	r3, [sl]
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae28:	6921      	ldr	r1, [r4, #16]
 800ae2a:	464a      	mov	r2, r9
 800ae2c:	f7fc fae8 	bl	8007400 <memcpy>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	6126      	str	r6, [r4, #16]
 800ae3e:	6165      	str	r5, [r4, #20]
 800ae40:	444e      	add	r6, r9
 800ae42:	eba5 0509 	sub.w	r5, r5, r9
 800ae46:	6026      	str	r6, [r4, #0]
 800ae48:	60a5      	str	r5, [r4, #8]
 800ae4a:	463e      	mov	r6, r7
 800ae4c:	42be      	cmp	r6, r7
 800ae4e:	d900      	bls.n	800ae52 <__ssputs_r+0x86>
 800ae50:	463e      	mov	r6, r7
 800ae52:	4632      	mov	r2, r6
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	4641      	mov	r1, r8
 800ae58:	f000 f97e 	bl	800b158 <memmove>
 800ae5c:	68a3      	ldr	r3, [r4, #8]
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	1b9b      	subs	r3, r3, r6
 800ae62:	4432      	add	r2, r6
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6022      	str	r2, [r4, #0]
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e7db      	b.n	800ae24 <__ssputs_r+0x58>
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	f000 f999 	bl	800b1a4 <_realloc_r>
 800ae72:	4606      	mov	r6, r0
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d1e1      	bne.n	800ae3c <__ssputs_r+0x70>
 800ae78:	6921      	ldr	r1, [r4, #16]
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f7ff fefc 	bl	800ac78 <_free_r>
 800ae80:	e7c7      	b.n	800ae12 <__ssputs_r+0x46>
	...

0800ae84 <_svfiprintf_r>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4698      	mov	r8, r3
 800ae8a:	898b      	ldrh	r3, [r1, #12]
 800ae8c:	061b      	lsls	r3, r3, #24
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4607      	mov	r7, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	4614      	mov	r4, r2
 800ae96:	d50e      	bpl.n	800aeb6 <_svfiprintf_r+0x32>
 800ae98:	690b      	ldr	r3, [r1, #16]
 800ae9a:	b963      	cbnz	r3, 800aeb6 <_svfiprintf_r+0x32>
 800ae9c:	2140      	movs	r1, #64	; 0x40
 800ae9e:	f7ff ff3b 	bl	800ad18 <_malloc_r>
 800aea2:	6028      	str	r0, [r5, #0]
 800aea4:	6128      	str	r0, [r5, #16]
 800aea6:	b920      	cbnz	r0, 800aeb2 <_svfiprintf_r+0x2e>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	e0d1      	b.n	800b056 <_svfiprintf_r+0x1d2>
 800aeb2:	2340      	movs	r3, #64	; 0x40
 800aeb4:	616b      	str	r3, [r5, #20]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeba:	2320      	movs	r3, #32
 800aebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec4:	2330      	movs	r3, #48	; 0x30
 800aec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b070 <_svfiprintf_r+0x1ec>
 800aeca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aece:	f04f 0901 	mov.w	r9, #1
 800aed2:	4623      	mov	r3, r4
 800aed4:	469a      	mov	sl, r3
 800aed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeda:	b10a      	cbz	r2, 800aee0 <_svfiprintf_r+0x5c>
 800aedc:	2a25      	cmp	r2, #37	; 0x25
 800aede:	d1f9      	bne.n	800aed4 <_svfiprintf_r+0x50>
 800aee0:	ebba 0b04 	subs.w	fp, sl, r4
 800aee4:	d00b      	beq.n	800aefe <_svfiprintf_r+0x7a>
 800aee6:	465b      	mov	r3, fp
 800aee8:	4622      	mov	r2, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7ff ff6d 	bl	800adcc <__ssputs_r>
 800aef2:	3001      	adds	r0, #1
 800aef4:	f000 80aa 	beq.w	800b04c <_svfiprintf_r+0x1c8>
 800aef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefa:	445a      	add	r2, fp
 800aefc:	9209      	str	r2, [sp, #36]	; 0x24
 800aefe:	f89a 3000 	ldrb.w	r3, [sl]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80a2 	beq.w	800b04c <_svfiprintf_r+0x1c8>
 800af08:	2300      	movs	r3, #0
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af12:	f10a 0a01 	add.w	sl, sl, #1
 800af16:	9304      	str	r3, [sp, #16]
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1e:	931a      	str	r3, [sp, #104]	; 0x68
 800af20:	4654      	mov	r4, sl
 800af22:	2205      	movs	r2, #5
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	4851      	ldr	r0, [pc, #324]	; (800b070 <_svfiprintf_r+0x1ec>)
 800af2a:	f7f5 f961 	bl	80001f0 <memchr>
 800af2e:	9a04      	ldr	r2, [sp, #16]
 800af30:	b9d8      	cbnz	r0, 800af6a <_svfiprintf_r+0xe6>
 800af32:	06d0      	lsls	r0, r2, #27
 800af34:	bf44      	itt	mi
 800af36:	2320      	movmi	r3, #32
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3c:	0711      	lsls	r1, r2, #28
 800af3e:	bf44      	itt	mi
 800af40:	232b      	movmi	r3, #43	; 0x2b
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af46:	f89a 3000 	ldrb.w	r3, [sl]
 800af4a:	2b2a      	cmp	r3, #42	; 0x2a
 800af4c:	d015      	beq.n	800af7a <_svfiprintf_r+0xf6>
 800af4e:	9a07      	ldr	r2, [sp, #28]
 800af50:	4654      	mov	r4, sl
 800af52:	2000      	movs	r0, #0
 800af54:	f04f 0c0a 	mov.w	ip, #10
 800af58:	4621      	mov	r1, r4
 800af5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5e:	3b30      	subs	r3, #48	; 0x30
 800af60:	2b09      	cmp	r3, #9
 800af62:	d94e      	bls.n	800b002 <_svfiprintf_r+0x17e>
 800af64:	b1b0      	cbz	r0, 800af94 <_svfiprintf_r+0x110>
 800af66:	9207      	str	r2, [sp, #28]
 800af68:	e014      	b.n	800af94 <_svfiprintf_r+0x110>
 800af6a:	eba0 0308 	sub.w	r3, r0, r8
 800af6e:	fa09 f303 	lsl.w	r3, r9, r3
 800af72:	4313      	orrs	r3, r2
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	46a2      	mov	sl, r4
 800af78:	e7d2      	b.n	800af20 <_svfiprintf_r+0x9c>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	1d19      	adds	r1, r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	9103      	str	r1, [sp, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	bfbb      	ittet	lt
 800af86:	425b      	neglt	r3, r3
 800af88:	f042 0202 	orrlt.w	r2, r2, #2
 800af8c:	9307      	strge	r3, [sp, #28]
 800af8e:	9307      	strlt	r3, [sp, #28]
 800af90:	bfb8      	it	lt
 800af92:	9204      	strlt	r2, [sp, #16]
 800af94:	7823      	ldrb	r3, [r4, #0]
 800af96:	2b2e      	cmp	r3, #46	; 0x2e
 800af98:	d10c      	bne.n	800afb4 <_svfiprintf_r+0x130>
 800af9a:	7863      	ldrb	r3, [r4, #1]
 800af9c:	2b2a      	cmp	r3, #42	; 0x2a
 800af9e:	d135      	bne.n	800b00c <_svfiprintf_r+0x188>
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	1d1a      	adds	r2, r3, #4
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	9203      	str	r2, [sp, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bfb8      	it	lt
 800afac:	f04f 33ff 	movlt.w	r3, #4294967295
 800afb0:	3402      	adds	r4, #2
 800afb2:	9305      	str	r3, [sp, #20]
 800afb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b080 <_svfiprintf_r+0x1fc>
 800afb8:	7821      	ldrb	r1, [r4, #0]
 800afba:	2203      	movs	r2, #3
 800afbc:	4650      	mov	r0, sl
 800afbe:	f7f5 f917 	bl	80001f0 <memchr>
 800afc2:	b140      	cbz	r0, 800afd6 <_svfiprintf_r+0x152>
 800afc4:	2340      	movs	r3, #64	; 0x40
 800afc6:	eba0 000a 	sub.w	r0, r0, sl
 800afca:	fa03 f000 	lsl.w	r0, r3, r0
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	4303      	orrs	r3, r0
 800afd2:	3401      	adds	r4, #1
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afda:	4826      	ldr	r0, [pc, #152]	; (800b074 <_svfiprintf_r+0x1f0>)
 800afdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe0:	2206      	movs	r2, #6
 800afe2:	f7f5 f905 	bl	80001f0 <memchr>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d038      	beq.n	800b05c <_svfiprintf_r+0x1d8>
 800afea:	4b23      	ldr	r3, [pc, #140]	; (800b078 <_svfiprintf_r+0x1f4>)
 800afec:	bb1b      	cbnz	r3, 800b036 <_svfiprintf_r+0x1b2>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	3307      	adds	r3, #7
 800aff2:	f023 0307 	bic.w	r3, r3, #7
 800aff6:	3308      	adds	r3, #8
 800aff8:	9303      	str	r3, [sp, #12]
 800affa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affc:	4433      	add	r3, r6
 800affe:	9309      	str	r3, [sp, #36]	; 0x24
 800b000:	e767      	b.n	800aed2 <_svfiprintf_r+0x4e>
 800b002:	fb0c 3202 	mla	r2, ip, r2, r3
 800b006:	460c      	mov	r4, r1
 800b008:	2001      	movs	r0, #1
 800b00a:	e7a5      	b.n	800af58 <_svfiprintf_r+0xd4>
 800b00c:	2300      	movs	r3, #0
 800b00e:	3401      	adds	r4, #1
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	4619      	mov	r1, r3
 800b014:	f04f 0c0a 	mov.w	ip, #10
 800b018:	4620      	mov	r0, r4
 800b01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01e:	3a30      	subs	r2, #48	; 0x30
 800b020:	2a09      	cmp	r2, #9
 800b022:	d903      	bls.n	800b02c <_svfiprintf_r+0x1a8>
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0c5      	beq.n	800afb4 <_svfiprintf_r+0x130>
 800b028:	9105      	str	r1, [sp, #20]
 800b02a:	e7c3      	b.n	800afb4 <_svfiprintf_r+0x130>
 800b02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b030:	4604      	mov	r4, r0
 800b032:	2301      	movs	r3, #1
 800b034:	e7f0      	b.n	800b018 <_svfiprintf_r+0x194>
 800b036:	ab03      	add	r3, sp, #12
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	462a      	mov	r2, r5
 800b03c:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <_svfiprintf_r+0x1f8>)
 800b03e:	a904      	add	r1, sp, #16
 800b040:	4638      	mov	r0, r7
 800b042:	f7fc fa93 	bl	800756c <_printf_float>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	4606      	mov	r6, r0
 800b04a:	d1d6      	bne.n	800affa <_svfiprintf_r+0x176>
 800b04c:	89ab      	ldrh	r3, [r5, #12]
 800b04e:	065b      	lsls	r3, r3, #25
 800b050:	f53f af2c 	bmi.w	800aeac <_svfiprintf_r+0x28>
 800b054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b056:	b01d      	add	sp, #116	; 0x74
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	ab03      	add	r3, sp, #12
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	462a      	mov	r2, r5
 800b062:	4b06      	ldr	r3, [pc, #24]	; (800b07c <_svfiprintf_r+0x1f8>)
 800b064:	a904      	add	r1, sp, #16
 800b066:	4638      	mov	r0, r7
 800b068:	f7fc fd24 	bl	8007ab4 <_printf_i>
 800b06c:	e7eb      	b.n	800b046 <_svfiprintf_r+0x1c2>
 800b06e:	bf00      	nop
 800b070:	0800c2d4 	.word	0x0800c2d4
 800b074:	0800c2de 	.word	0x0800c2de
 800b078:	0800756d 	.word	0x0800756d
 800b07c:	0800adcd 	.word	0x0800adcd
 800b080:	0800c2da 	.word	0x0800c2da
 800b084:	00000000 	.word	0x00000000

0800b088 <nan>:
 800b088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b090 <nan+0x8>
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	00000000 	.word	0x00000000
 800b094:	7ff80000 	.word	0x7ff80000

0800b098 <_sbrk_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_sbrk_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f8 f938 	bl	8003318 <_sbrk>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_sbrk_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_sbrk_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20000618 	.word	0x20000618

0800b0b8 <strncmp>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	b16a      	cbz	r2, 800b0d8 <strncmp+0x20>
 800b0bc:	3901      	subs	r1, #1
 800b0be:	1884      	adds	r4, r0, r2
 800b0c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b0c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d103      	bne.n	800b0d4 <strncmp+0x1c>
 800b0cc:	42a0      	cmp	r0, r4
 800b0ce:	d001      	beq.n	800b0d4 <strncmp+0x1c>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f5      	bne.n	800b0c0 <strncmp+0x8>
 800b0d4:	1a98      	subs	r0, r3, r2
 800b0d6:	bd10      	pop	{r4, pc}
 800b0d8:	4610      	mov	r0, r2
 800b0da:	e7fc      	b.n	800b0d6 <strncmp+0x1e>

0800b0dc <__ascii_wctomb>:
 800b0dc:	b149      	cbz	r1, 800b0f2 <__ascii_wctomb+0x16>
 800b0de:	2aff      	cmp	r2, #255	; 0xff
 800b0e0:	bf85      	ittet	hi
 800b0e2:	238a      	movhi	r3, #138	; 0x8a
 800b0e4:	6003      	strhi	r3, [r0, #0]
 800b0e6:	700a      	strbls	r2, [r1, #0]
 800b0e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0ec:	bf98      	it	ls
 800b0ee:	2001      	movls	r0, #1
 800b0f0:	4770      	bx	lr
 800b0f2:	4608      	mov	r0, r1
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <__assert_func>:
 800b0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0fa:	4614      	mov	r4, r2
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4b09      	ldr	r3, [pc, #36]	; (800b124 <__assert_func+0x2c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4605      	mov	r5, r0
 800b104:	68d8      	ldr	r0, [r3, #12]
 800b106:	b14c      	cbz	r4, 800b11c <__assert_func+0x24>
 800b108:	4b07      	ldr	r3, [pc, #28]	; (800b128 <__assert_func+0x30>)
 800b10a:	9100      	str	r1, [sp, #0]
 800b10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b110:	4906      	ldr	r1, [pc, #24]	; (800b12c <__assert_func+0x34>)
 800b112:	462b      	mov	r3, r5
 800b114:	f000 f80e 	bl	800b134 <fiprintf>
 800b118:	f000 fa84 	bl	800b624 <abort>
 800b11c:	4b04      	ldr	r3, [pc, #16]	; (800b130 <__assert_func+0x38>)
 800b11e:	461c      	mov	r4, r3
 800b120:	e7f3      	b.n	800b10a <__assert_func+0x12>
 800b122:	bf00      	nop
 800b124:	200000d8 	.word	0x200000d8
 800b128:	0800c2e5 	.word	0x0800c2e5
 800b12c:	0800c2f2 	.word	0x0800c2f2
 800b130:	0800c320 	.word	0x0800c320

0800b134 <fiprintf>:
 800b134:	b40e      	push	{r1, r2, r3}
 800b136:	b503      	push	{r0, r1, lr}
 800b138:	4601      	mov	r1, r0
 800b13a:	ab03      	add	r3, sp, #12
 800b13c:	4805      	ldr	r0, [pc, #20]	; (800b154 <fiprintf+0x20>)
 800b13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b142:	6800      	ldr	r0, [r0, #0]
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	f000 f87d 	bl	800b244 <_vfiprintf_r>
 800b14a:	b002      	add	sp, #8
 800b14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b150:	b003      	add	sp, #12
 800b152:	4770      	bx	lr
 800b154:	200000d8 	.word	0x200000d8

0800b158 <memmove>:
 800b158:	4288      	cmp	r0, r1
 800b15a:	b510      	push	{r4, lr}
 800b15c:	eb01 0402 	add.w	r4, r1, r2
 800b160:	d902      	bls.n	800b168 <memmove+0x10>
 800b162:	4284      	cmp	r4, r0
 800b164:	4623      	mov	r3, r4
 800b166:	d807      	bhi.n	800b178 <memmove+0x20>
 800b168:	1e43      	subs	r3, r0, #1
 800b16a:	42a1      	cmp	r1, r4
 800b16c:	d008      	beq.n	800b180 <memmove+0x28>
 800b16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b172:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b176:	e7f8      	b.n	800b16a <memmove+0x12>
 800b178:	4402      	add	r2, r0
 800b17a:	4601      	mov	r1, r0
 800b17c:	428a      	cmp	r2, r1
 800b17e:	d100      	bne.n	800b182 <memmove+0x2a>
 800b180:	bd10      	pop	{r4, pc}
 800b182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b18a:	e7f7      	b.n	800b17c <memmove+0x24>

0800b18c <__malloc_lock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <__malloc_lock+0x8>)
 800b18e:	f000 bc09 	b.w	800b9a4 <__retarget_lock_acquire_recursive>
 800b192:	bf00      	nop
 800b194:	20000620 	.word	0x20000620

0800b198 <__malloc_unlock>:
 800b198:	4801      	ldr	r0, [pc, #4]	; (800b1a0 <__malloc_unlock+0x8>)
 800b19a:	f000 bc04 	b.w	800b9a6 <__retarget_lock_release_recursive>
 800b19e:	bf00      	nop
 800b1a0:	20000620 	.word	0x20000620

0800b1a4 <_realloc_r>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	460e      	mov	r6, r1
 800b1ac:	b921      	cbnz	r1, 800b1b8 <_realloc_r+0x14>
 800b1ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	f7ff bdb0 	b.w	800ad18 <_malloc_r>
 800b1b8:	b922      	cbnz	r2, 800b1c4 <_realloc_r+0x20>
 800b1ba:	f7ff fd5d 	bl	800ac78 <_free_r>
 800b1be:	4625      	mov	r5, r4
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c4:	f000 fc54 	bl	800ba70 <_malloc_usable_size_r>
 800b1c8:	42a0      	cmp	r0, r4
 800b1ca:	d20f      	bcs.n	800b1ec <_realloc_r+0x48>
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	f7ff fda2 	bl	800ad18 <_malloc_r>
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d0f2      	beq.n	800b1c0 <_realloc_r+0x1c>
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4622      	mov	r2, r4
 800b1de:	f7fc f90f 	bl	8007400 <memcpy>
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7ff fd47 	bl	800ac78 <_free_r>
 800b1ea:	e7e9      	b.n	800b1c0 <_realloc_r+0x1c>
 800b1ec:	4635      	mov	r5, r6
 800b1ee:	e7e7      	b.n	800b1c0 <_realloc_r+0x1c>

0800b1f0 <__sfputc_r>:
 800b1f0:	6893      	ldr	r3, [r2, #8]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	b410      	push	{r4}
 800b1f8:	6093      	str	r3, [r2, #8]
 800b1fa:	da08      	bge.n	800b20e <__sfputc_r+0x1e>
 800b1fc:	6994      	ldr	r4, [r2, #24]
 800b1fe:	42a3      	cmp	r3, r4
 800b200:	db01      	blt.n	800b206 <__sfputc_r+0x16>
 800b202:	290a      	cmp	r1, #10
 800b204:	d103      	bne.n	800b20e <__sfputc_r+0x1e>
 800b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20a:	f000 b94b 	b.w	800b4a4 <__swbuf_r>
 800b20e:	6813      	ldr	r3, [r2, #0]
 800b210:	1c58      	adds	r0, r3, #1
 800b212:	6010      	str	r0, [r2, #0]
 800b214:	7019      	strb	r1, [r3, #0]
 800b216:	4608      	mov	r0, r1
 800b218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <__sfputs_r>:
 800b21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b220:	4606      	mov	r6, r0
 800b222:	460f      	mov	r7, r1
 800b224:	4614      	mov	r4, r2
 800b226:	18d5      	adds	r5, r2, r3
 800b228:	42ac      	cmp	r4, r5
 800b22a:	d101      	bne.n	800b230 <__sfputs_r+0x12>
 800b22c:	2000      	movs	r0, #0
 800b22e:	e007      	b.n	800b240 <__sfputs_r+0x22>
 800b230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b234:	463a      	mov	r2, r7
 800b236:	4630      	mov	r0, r6
 800b238:	f7ff ffda 	bl	800b1f0 <__sfputc_r>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d1f3      	bne.n	800b228 <__sfputs_r+0xa>
 800b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b244 <_vfiprintf_r>:
 800b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	460d      	mov	r5, r1
 800b24a:	b09d      	sub	sp, #116	; 0x74
 800b24c:	4614      	mov	r4, r2
 800b24e:	4698      	mov	r8, r3
 800b250:	4606      	mov	r6, r0
 800b252:	b118      	cbz	r0, 800b25c <_vfiprintf_r+0x18>
 800b254:	6983      	ldr	r3, [r0, #24]
 800b256:	b90b      	cbnz	r3, 800b25c <_vfiprintf_r+0x18>
 800b258:	f000 fb06 	bl	800b868 <__sinit>
 800b25c:	4b89      	ldr	r3, [pc, #548]	; (800b484 <_vfiprintf_r+0x240>)
 800b25e:	429d      	cmp	r5, r3
 800b260:	d11b      	bne.n	800b29a <_vfiprintf_r+0x56>
 800b262:	6875      	ldr	r5, [r6, #4]
 800b264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b266:	07d9      	lsls	r1, r3, #31
 800b268:	d405      	bmi.n	800b276 <_vfiprintf_r+0x32>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	059a      	lsls	r2, r3, #22
 800b26e:	d402      	bmi.n	800b276 <_vfiprintf_r+0x32>
 800b270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b272:	f000 fb97 	bl	800b9a4 <__retarget_lock_acquire_recursive>
 800b276:	89ab      	ldrh	r3, [r5, #12]
 800b278:	071b      	lsls	r3, r3, #28
 800b27a:	d501      	bpl.n	800b280 <_vfiprintf_r+0x3c>
 800b27c:	692b      	ldr	r3, [r5, #16]
 800b27e:	b9eb      	cbnz	r3, 800b2bc <_vfiprintf_r+0x78>
 800b280:	4629      	mov	r1, r5
 800b282:	4630      	mov	r0, r6
 800b284:	f000 f960 	bl	800b548 <__swsetup_r>
 800b288:	b1c0      	cbz	r0, 800b2bc <_vfiprintf_r+0x78>
 800b28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b28c:	07dc      	lsls	r4, r3, #31
 800b28e:	d50e      	bpl.n	800b2ae <_vfiprintf_r+0x6a>
 800b290:	f04f 30ff 	mov.w	r0, #4294967295
 800b294:	b01d      	add	sp, #116	; 0x74
 800b296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29a:	4b7b      	ldr	r3, [pc, #492]	; (800b488 <_vfiprintf_r+0x244>)
 800b29c:	429d      	cmp	r5, r3
 800b29e:	d101      	bne.n	800b2a4 <_vfiprintf_r+0x60>
 800b2a0:	68b5      	ldr	r5, [r6, #8]
 800b2a2:	e7df      	b.n	800b264 <_vfiprintf_r+0x20>
 800b2a4:	4b79      	ldr	r3, [pc, #484]	; (800b48c <_vfiprintf_r+0x248>)
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	bf08      	it	eq
 800b2aa:	68f5      	ldreq	r5, [r6, #12]
 800b2ac:	e7da      	b.n	800b264 <_vfiprintf_r+0x20>
 800b2ae:	89ab      	ldrh	r3, [r5, #12]
 800b2b0:	0598      	lsls	r0, r3, #22
 800b2b2:	d4ed      	bmi.n	800b290 <_vfiprintf_r+0x4c>
 800b2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2b6:	f000 fb76 	bl	800b9a6 <__retarget_lock_release_recursive>
 800b2ba:	e7e9      	b.n	800b290 <_vfiprintf_r+0x4c>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c0:	2320      	movs	r3, #32
 800b2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ca:	2330      	movs	r3, #48	; 0x30
 800b2cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b490 <_vfiprintf_r+0x24c>
 800b2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2d4:	f04f 0901 	mov.w	r9, #1
 800b2d8:	4623      	mov	r3, r4
 800b2da:	469a      	mov	sl, r3
 800b2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2e0:	b10a      	cbz	r2, 800b2e6 <_vfiprintf_r+0xa2>
 800b2e2:	2a25      	cmp	r2, #37	; 0x25
 800b2e4:	d1f9      	bne.n	800b2da <_vfiprintf_r+0x96>
 800b2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ea:	d00b      	beq.n	800b304 <_vfiprintf_r+0xc0>
 800b2ec:	465b      	mov	r3, fp
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f7ff ff93 	bl	800b21e <__sfputs_r>
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	f000 80aa 	beq.w	800b452 <_vfiprintf_r+0x20e>
 800b2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b300:	445a      	add	r2, fp
 800b302:	9209      	str	r2, [sp, #36]	; 0x24
 800b304:	f89a 3000 	ldrb.w	r3, [sl]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 80a2 	beq.w	800b452 <_vfiprintf_r+0x20e>
 800b30e:	2300      	movs	r3, #0
 800b310:	f04f 32ff 	mov.w	r2, #4294967295
 800b314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b318:	f10a 0a01 	add.w	sl, sl, #1
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	9307      	str	r3, [sp, #28]
 800b320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b324:	931a      	str	r3, [sp, #104]	; 0x68
 800b326:	4654      	mov	r4, sl
 800b328:	2205      	movs	r2, #5
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	4858      	ldr	r0, [pc, #352]	; (800b490 <_vfiprintf_r+0x24c>)
 800b330:	f7f4 ff5e 	bl	80001f0 <memchr>
 800b334:	9a04      	ldr	r2, [sp, #16]
 800b336:	b9d8      	cbnz	r0, 800b370 <_vfiprintf_r+0x12c>
 800b338:	06d1      	lsls	r1, r2, #27
 800b33a:	bf44      	itt	mi
 800b33c:	2320      	movmi	r3, #32
 800b33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b342:	0713      	lsls	r3, r2, #28
 800b344:	bf44      	itt	mi
 800b346:	232b      	movmi	r3, #43	; 0x2b
 800b348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b34c:	f89a 3000 	ldrb.w	r3, [sl]
 800b350:	2b2a      	cmp	r3, #42	; 0x2a
 800b352:	d015      	beq.n	800b380 <_vfiprintf_r+0x13c>
 800b354:	9a07      	ldr	r2, [sp, #28]
 800b356:	4654      	mov	r4, sl
 800b358:	2000      	movs	r0, #0
 800b35a:	f04f 0c0a 	mov.w	ip, #10
 800b35e:	4621      	mov	r1, r4
 800b360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b364:	3b30      	subs	r3, #48	; 0x30
 800b366:	2b09      	cmp	r3, #9
 800b368:	d94e      	bls.n	800b408 <_vfiprintf_r+0x1c4>
 800b36a:	b1b0      	cbz	r0, 800b39a <_vfiprintf_r+0x156>
 800b36c:	9207      	str	r2, [sp, #28]
 800b36e:	e014      	b.n	800b39a <_vfiprintf_r+0x156>
 800b370:	eba0 0308 	sub.w	r3, r0, r8
 800b374:	fa09 f303 	lsl.w	r3, r9, r3
 800b378:	4313      	orrs	r3, r2
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	46a2      	mov	sl, r4
 800b37e:	e7d2      	b.n	800b326 <_vfiprintf_r+0xe2>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	1d19      	adds	r1, r3, #4
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	9103      	str	r1, [sp, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfbb      	ittet	lt
 800b38c:	425b      	neglt	r3, r3
 800b38e:	f042 0202 	orrlt.w	r2, r2, #2
 800b392:	9307      	strge	r3, [sp, #28]
 800b394:	9307      	strlt	r3, [sp, #28]
 800b396:	bfb8      	it	lt
 800b398:	9204      	strlt	r2, [sp, #16]
 800b39a:	7823      	ldrb	r3, [r4, #0]
 800b39c:	2b2e      	cmp	r3, #46	; 0x2e
 800b39e:	d10c      	bne.n	800b3ba <_vfiprintf_r+0x176>
 800b3a0:	7863      	ldrb	r3, [r4, #1]
 800b3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3a4:	d135      	bne.n	800b412 <_vfiprintf_r+0x1ce>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	1d1a      	adds	r2, r3, #4
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	9203      	str	r2, [sp, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfb8      	it	lt
 800b3b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3b6:	3402      	adds	r4, #2
 800b3b8:	9305      	str	r3, [sp, #20]
 800b3ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4a0 <_vfiprintf_r+0x25c>
 800b3be:	7821      	ldrb	r1, [r4, #0]
 800b3c0:	2203      	movs	r2, #3
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	f7f4 ff14 	bl	80001f0 <memchr>
 800b3c8:	b140      	cbz	r0, 800b3dc <_vfiprintf_r+0x198>
 800b3ca:	2340      	movs	r3, #64	; 0x40
 800b3cc:	eba0 000a 	sub.w	r0, r0, sl
 800b3d0:	fa03 f000 	lsl.w	r0, r3, r0
 800b3d4:	9b04      	ldr	r3, [sp, #16]
 800b3d6:	4303      	orrs	r3, r0
 800b3d8:	3401      	adds	r4, #1
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e0:	482c      	ldr	r0, [pc, #176]	; (800b494 <_vfiprintf_r+0x250>)
 800b3e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	f7f4 ff02 	bl	80001f0 <memchr>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d03f      	beq.n	800b470 <_vfiprintf_r+0x22c>
 800b3f0:	4b29      	ldr	r3, [pc, #164]	; (800b498 <_vfiprintf_r+0x254>)
 800b3f2:	bb1b      	cbnz	r3, 800b43c <_vfiprintf_r+0x1f8>
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	3307      	adds	r3, #7
 800b3f8:	f023 0307 	bic.w	r3, r3, #7
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	9303      	str	r3, [sp, #12]
 800b400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b402:	443b      	add	r3, r7
 800b404:	9309      	str	r3, [sp, #36]	; 0x24
 800b406:	e767      	b.n	800b2d8 <_vfiprintf_r+0x94>
 800b408:	fb0c 3202 	mla	r2, ip, r2, r3
 800b40c:	460c      	mov	r4, r1
 800b40e:	2001      	movs	r0, #1
 800b410:	e7a5      	b.n	800b35e <_vfiprintf_r+0x11a>
 800b412:	2300      	movs	r3, #0
 800b414:	3401      	adds	r4, #1
 800b416:	9305      	str	r3, [sp, #20]
 800b418:	4619      	mov	r1, r3
 800b41a:	f04f 0c0a 	mov.w	ip, #10
 800b41e:	4620      	mov	r0, r4
 800b420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b424:	3a30      	subs	r2, #48	; 0x30
 800b426:	2a09      	cmp	r2, #9
 800b428:	d903      	bls.n	800b432 <_vfiprintf_r+0x1ee>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0c5      	beq.n	800b3ba <_vfiprintf_r+0x176>
 800b42e:	9105      	str	r1, [sp, #20]
 800b430:	e7c3      	b.n	800b3ba <_vfiprintf_r+0x176>
 800b432:	fb0c 2101 	mla	r1, ip, r1, r2
 800b436:	4604      	mov	r4, r0
 800b438:	2301      	movs	r3, #1
 800b43a:	e7f0      	b.n	800b41e <_vfiprintf_r+0x1da>
 800b43c:	ab03      	add	r3, sp, #12
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	462a      	mov	r2, r5
 800b442:	4b16      	ldr	r3, [pc, #88]	; (800b49c <_vfiprintf_r+0x258>)
 800b444:	a904      	add	r1, sp, #16
 800b446:	4630      	mov	r0, r6
 800b448:	f7fc f890 	bl	800756c <_printf_float>
 800b44c:	4607      	mov	r7, r0
 800b44e:	1c78      	adds	r0, r7, #1
 800b450:	d1d6      	bne.n	800b400 <_vfiprintf_r+0x1bc>
 800b452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b454:	07d9      	lsls	r1, r3, #31
 800b456:	d405      	bmi.n	800b464 <_vfiprintf_r+0x220>
 800b458:	89ab      	ldrh	r3, [r5, #12]
 800b45a:	059a      	lsls	r2, r3, #22
 800b45c:	d402      	bmi.n	800b464 <_vfiprintf_r+0x220>
 800b45e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b460:	f000 faa1 	bl	800b9a6 <__retarget_lock_release_recursive>
 800b464:	89ab      	ldrh	r3, [r5, #12]
 800b466:	065b      	lsls	r3, r3, #25
 800b468:	f53f af12 	bmi.w	800b290 <_vfiprintf_r+0x4c>
 800b46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b46e:	e711      	b.n	800b294 <_vfiprintf_r+0x50>
 800b470:	ab03      	add	r3, sp, #12
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	462a      	mov	r2, r5
 800b476:	4b09      	ldr	r3, [pc, #36]	; (800b49c <_vfiprintf_r+0x258>)
 800b478:	a904      	add	r1, sp, #16
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7fc fb1a 	bl	8007ab4 <_printf_i>
 800b480:	e7e4      	b.n	800b44c <_vfiprintf_r+0x208>
 800b482:	bf00      	nop
 800b484:	0800c344 	.word	0x0800c344
 800b488:	0800c364 	.word	0x0800c364
 800b48c:	0800c324 	.word	0x0800c324
 800b490:	0800c2d4 	.word	0x0800c2d4
 800b494:	0800c2de 	.word	0x0800c2de
 800b498:	0800756d 	.word	0x0800756d
 800b49c:	0800b21f 	.word	0x0800b21f
 800b4a0:	0800c2da 	.word	0x0800c2da

0800b4a4 <__swbuf_r>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	460e      	mov	r6, r1
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	b118      	cbz	r0, 800b4b6 <__swbuf_r+0x12>
 800b4ae:	6983      	ldr	r3, [r0, #24]
 800b4b0:	b90b      	cbnz	r3, 800b4b6 <__swbuf_r+0x12>
 800b4b2:	f000 f9d9 	bl	800b868 <__sinit>
 800b4b6:	4b21      	ldr	r3, [pc, #132]	; (800b53c <__swbuf_r+0x98>)
 800b4b8:	429c      	cmp	r4, r3
 800b4ba:	d12b      	bne.n	800b514 <__swbuf_r+0x70>
 800b4bc:	686c      	ldr	r4, [r5, #4]
 800b4be:	69a3      	ldr	r3, [r4, #24]
 800b4c0:	60a3      	str	r3, [r4, #8]
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	071a      	lsls	r2, r3, #28
 800b4c6:	d52f      	bpl.n	800b528 <__swbuf_r+0x84>
 800b4c8:	6923      	ldr	r3, [r4, #16]
 800b4ca:	b36b      	cbz	r3, 800b528 <__swbuf_r+0x84>
 800b4cc:	6923      	ldr	r3, [r4, #16]
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	1ac0      	subs	r0, r0, r3
 800b4d2:	6963      	ldr	r3, [r4, #20]
 800b4d4:	b2f6      	uxtb	r6, r6
 800b4d6:	4283      	cmp	r3, r0
 800b4d8:	4637      	mov	r7, r6
 800b4da:	dc04      	bgt.n	800b4e6 <__swbuf_r+0x42>
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 f92e 	bl	800b740 <_fflush_r>
 800b4e4:	bb30      	cbnz	r0, 800b534 <__swbuf_r+0x90>
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	6022      	str	r2, [r4, #0]
 800b4f2:	701e      	strb	r6, [r3, #0]
 800b4f4:	6963      	ldr	r3, [r4, #20]
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	4283      	cmp	r3, r0
 800b4fa:	d004      	beq.n	800b506 <__swbuf_r+0x62>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	07db      	lsls	r3, r3, #31
 800b500:	d506      	bpl.n	800b510 <__swbuf_r+0x6c>
 800b502:	2e0a      	cmp	r6, #10
 800b504:	d104      	bne.n	800b510 <__swbuf_r+0x6c>
 800b506:	4621      	mov	r1, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	f000 f919 	bl	800b740 <_fflush_r>
 800b50e:	b988      	cbnz	r0, 800b534 <__swbuf_r+0x90>
 800b510:	4638      	mov	r0, r7
 800b512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b514:	4b0a      	ldr	r3, [pc, #40]	; (800b540 <__swbuf_r+0x9c>)
 800b516:	429c      	cmp	r4, r3
 800b518:	d101      	bne.n	800b51e <__swbuf_r+0x7a>
 800b51a:	68ac      	ldr	r4, [r5, #8]
 800b51c:	e7cf      	b.n	800b4be <__swbuf_r+0x1a>
 800b51e:	4b09      	ldr	r3, [pc, #36]	; (800b544 <__swbuf_r+0xa0>)
 800b520:	429c      	cmp	r4, r3
 800b522:	bf08      	it	eq
 800b524:	68ec      	ldreq	r4, [r5, #12]
 800b526:	e7ca      	b.n	800b4be <__swbuf_r+0x1a>
 800b528:	4621      	mov	r1, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	f000 f80c 	bl	800b548 <__swsetup_r>
 800b530:	2800      	cmp	r0, #0
 800b532:	d0cb      	beq.n	800b4cc <__swbuf_r+0x28>
 800b534:	f04f 37ff 	mov.w	r7, #4294967295
 800b538:	e7ea      	b.n	800b510 <__swbuf_r+0x6c>
 800b53a:	bf00      	nop
 800b53c:	0800c344 	.word	0x0800c344
 800b540:	0800c364 	.word	0x0800c364
 800b544:	0800c324 	.word	0x0800c324

0800b548 <__swsetup_r>:
 800b548:	4b32      	ldr	r3, [pc, #200]	; (800b614 <__swsetup_r+0xcc>)
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	681d      	ldr	r5, [r3, #0]
 800b54e:	4606      	mov	r6, r0
 800b550:	460c      	mov	r4, r1
 800b552:	b125      	cbz	r5, 800b55e <__swsetup_r+0x16>
 800b554:	69ab      	ldr	r3, [r5, #24]
 800b556:	b913      	cbnz	r3, 800b55e <__swsetup_r+0x16>
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 f985 	bl	800b868 <__sinit>
 800b55e:	4b2e      	ldr	r3, [pc, #184]	; (800b618 <__swsetup_r+0xd0>)
 800b560:	429c      	cmp	r4, r3
 800b562:	d10f      	bne.n	800b584 <__swsetup_r+0x3c>
 800b564:	686c      	ldr	r4, [r5, #4]
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b56c:	0719      	lsls	r1, r3, #28
 800b56e:	d42c      	bmi.n	800b5ca <__swsetup_r+0x82>
 800b570:	06dd      	lsls	r5, r3, #27
 800b572:	d411      	bmi.n	800b598 <__swsetup_r+0x50>
 800b574:	2309      	movs	r3, #9
 800b576:	6033      	str	r3, [r6, #0]
 800b578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295
 800b582:	e03e      	b.n	800b602 <__swsetup_r+0xba>
 800b584:	4b25      	ldr	r3, [pc, #148]	; (800b61c <__swsetup_r+0xd4>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <__swsetup_r+0x46>
 800b58a:	68ac      	ldr	r4, [r5, #8]
 800b58c:	e7eb      	b.n	800b566 <__swsetup_r+0x1e>
 800b58e:	4b24      	ldr	r3, [pc, #144]	; (800b620 <__swsetup_r+0xd8>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68ec      	ldreq	r4, [r5, #12]
 800b596:	e7e6      	b.n	800b566 <__swsetup_r+0x1e>
 800b598:	0758      	lsls	r0, r3, #29
 800b59a:	d512      	bpl.n	800b5c2 <__swsetup_r+0x7a>
 800b59c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b59e:	b141      	cbz	r1, 800b5b2 <__swsetup_r+0x6a>
 800b5a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__swsetup_r+0x66>
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff fb65 	bl	800ac78 <_free_r>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f043 0308 	orr.w	r3, r3, #8
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <__swsetup_r+0x9a>
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5d8:	d003      	beq.n	800b5e2 <__swsetup_r+0x9a>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f000 fa07 	bl	800b9f0 <__smakebuf_r>
 800b5e2:	89a0      	ldrh	r0, [r4, #12]
 800b5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5e8:	f010 0301 	ands.w	r3, r0, #1
 800b5ec:	d00a      	beq.n	800b604 <__swsetup_r+0xbc>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	6963      	ldr	r3, [r4, #20]
 800b5f4:	425b      	negs	r3, r3
 800b5f6:	61a3      	str	r3, [r4, #24]
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	b943      	cbnz	r3, 800b60e <__swsetup_r+0xc6>
 800b5fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b600:	d1ba      	bne.n	800b578 <__swsetup_r+0x30>
 800b602:	bd70      	pop	{r4, r5, r6, pc}
 800b604:	0781      	lsls	r1, r0, #30
 800b606:	bf58      	it	pl
 800b608:	6963      	ldrpl	r3, [r4, #20]
 800b60a:	60a3      	str	r3, [r4, #8]
 800b60c:	e7f4      	b.n	800b5f8 <__swsetup_r+0xb0>
 800b60e:	2000      	movs	r0, #0
 800b610:	e7f7      	b.n	800b602 <__swsetup_r+0xba>
 800b612:	bf00      	nop
 800b614:	200000d8 	.word	0x200000d8
 800b618:	0800c344 	.word	0x0800c344
 800b61c:	0800c364 	.word	0x0800c364
 800b620:	0800c324 	.word	0x0800c324

0800b624 <abort>:
 800b624:	b508      	push	{r3, lr}
 800b626:	2006      	movs	r0, #6
 800b628:	f000 fa52 	bl	800bad0 <raise>
 800b62c:	2001      	movs	r0, #1
 800b62e:	f7f7 fdfb 	bl	8003228 <_exit>
	...

0800b634 <__sflush_r>:
 800b634:	898a      	ldrh	r2, [r1, #12]
 800b636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	0710      	lsls	r0, r2, #28
 800b63e:	460c      	mov	r4, r1
 800b640:	d458      	bmi.n	800b6f4 <__sflush_r+0xc0>
 800b642:	684b      	ldr	r3, [r1, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dc05      	bgt.n	800b654 <__sflush_r+0x20>
 800b648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dc02      	bgt.n	800b654 <__sflush_r+0x20>
 800b64e:	2000      	movs	r0, #0
 800b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b656:	2e00      	cmp	r6, #0
 800b658:	d0f9      	beq.n	800b64e <__sflush_r+0x1a>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b660:	682f      	ldr	r7, [r5, #0]
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	d032      	beq.n	800b6cc <__sflush_r+0x98>
 800b666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	075a      	lsls	r2, r3, #29
 800b66c:	d505      	bpl.n	800b67a <__sflush_r+0x46>
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	1ac0      	subs	r0, r0, r3
 800b672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b674:	b10b      	cbz	r3, 800b67a <__sflush_r+0x46>
 800b676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b678:	1ac0      	subs	r0, r0, r3
 800b67a:	2300      	movs	r3, #0
 800b67c:	4602      	mov	r2, r0
 800b67e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b680:	6a21      	ldr	r1, [r4, #32]
 800b682:	4628      	mov	r0, r5
 800b684:	47b0      	blx	r6
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	d106      	bne.n	800b69a <__sflush_r+0x66>
 800b68c:	6829      	ldr	r1, [r5, #0]
 800b68e:	291d      	cmp	r1, #29
 800b690:	d82c      	bhi.n	800b6ec <__sflush_r+0xb8>
 800b692:	4a2a      	ldr	r2, [pc, #168]	; (800b73c <__sflush_r+0x108>)
 800b694:	40ca      	lsrs	r2, r1
 800b696:	07d6      	lsls	r6, r2, #31
 800b698:	d528      	bpl.n	800b6ec <__sflush_r+0xb8>
 800b69a:	2200      	movs	r2, #0
 800b69c:	6062      	str	r2, [r4, #4]
 800b69e:	04d9      	lsls	r1, r3, #19
 800b6a0:	6922      	ldr	r2, [r4, #16]
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	d504      	bpl.n	800b6b0 <__sflush_r+0x7c>
 800b6a6:	1c42      	adds	r2, r0, #1
 800b6a8:	d101      	bne.n	800b6ae <__sflush_r+0x7a>
 800b6aa:	682b      	ldr	r3, [r5, #0]
 800b6ac:	b903      	cbnz	r3, 800b6b0 <__sflush_r+0x7c>
 800b6ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b2:	602f      	str	r7, [r5, #0]
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d0ca      	beq.n	800b64e <__sflush_r+0x1a>
 800b6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6bc:	4299      	cmp	r1, r3
 800b6be:	d002      	beq.n	800b6c6 <__sflush_r+0x92>
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f7ff fad9 	bl	800ac78 <_free_r>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b6ca:	e7c1      	b.n	800b650 <__sflush_r+0x1c>
 800b6cc:	6a21      	ldr	r1, [r4, #32]
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b0      	blx	r6
 800b6d4:	1c41      	adds	r1, r0, #1
 800b6d6:	d1c7      	bne.n	800b668 <__sflush_r+0x34>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0c4      	beq.n	800b668 <__sflush_r+0x34>
 800b6de:	2b1d      	cmp	r3, #29
 800b6e0:	d001      	beq.n	800b6e6 <__sflush_r+0xb2>
 800b6e2:	2b16      	cmp	r3, #22
 800b6e4:	d101      	bne.n	800b6ea <__sflush_r+0xb6>
 800b6e6:	602f      	str	r7, [r5, #0]
 800b6e8:	e7b1      	b.n	800b64e <__sflush_r+0x1a>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	e7ad      	b.n	800b650 <__sflush_r+0x1c>
 800b6f4:	690f      	ldr	r7, [r1, #16]
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d0a9      	beq.n	800b64e <__sflush_r+0x1a>
 800b6fa:	0793      	lsls	r3, r2, #30
 800b6fc:	680e      	ldr	r6, [r1, #0]
 800b6fe:	bf08      	it	eq
 800b700:	694b      	ldreq	r3, [r1, #20]
 800b702:	600f      	str	r7, [r1, #0]
 800b704:	bf18      	it	ne
 800b706:	2300      	movne	r3, #0
 800b708:	eba6 0807 	sub.w	r8, r6, r7
 800b70c:	608b      	str	r3, [r1, #8]
 800b70e:	f1b8 0f00 	cmp.w	r8, #0
 800b712:	dd9c      	ble.n	800b64e <__sflush_r+0x1a>
 800b714:	6a21      	ldr	r1, [r4, #32]
 800b716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b718:	4643      	mov	r3, r8
 800b71a:	463a      	mov	r2, r7
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b0      	blx	r6
 800b720:	2800      	cmp	r0, #0
 800b722:	dc06      	bgt.n	800b732 <__sflush_r+0xfe>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	e78e      	b.n	800b650 <__sflush_r+0x1c>
 800b732:	4407      	add	r7, r0
 800b734:	eba8 0800 	sub.w	r8, r8, r0
 800b738:	e7e9      	b.n	800b70e <__sflush_r+0xda>
 800b73a:	bf00      	nop
 800b73c:	20400001 	.word	0x20400001

0800b740 <_fflush_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	690b      	ldr	r3, [r1, #16]
 800b744:	4605      	mov	r5, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b913      	cbnz	r3, 800b750 <_fflush_r+0x10>
 800b74a:	2500      	movs	r5, #0
 800b74c:	4628      	mov	r0, r5
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	b118      	cbz	r0, 800b75a <_fflush_r+0x1a>
 800b752:	6983      	ldr	r3, [r0, #24]
 800b754:	b90b      	cbnz	r3, 800b75a <_fflush_r+0x1a>
 800b756:	f000 f887 	bl	800b868 <__sinit>
 800b75a:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <_fflush_r+0x6c>)
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d11b      	bne.n	800b798 <_fflush_r+0x58>
 800b760:	686c      	ldr	r4, [r5, #4]
 800b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0ef      	beq.n	800b74a <_fflush_r+0xa>
 800b76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b76c:	07d0      	lsls	r0, r2, #31
 800b76e:	d404      	bmi.n	800b77a <_fflush_r+0x3a>
 800b770:	0599      	lsls	r1, r3, #22
 800b772:	d402      	bmi.n	800b77a <_fflush_r+0x3a>
 800b774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b776:	f000 f915 	bl	800b9a4 <__retarget_lock_acquire_recursive>
 800b77a:	4628      	mov	r0, r5
 800b77c:	4621      	mov	r1, r4
 800b77e:	f7ff ff59 	bl	800b634 <__sflush_r>
 800b782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b784:	07da      	lsls	r2, r3, #31
 800b786:	4605      	mov	r5, r0
 800b788:	d4e0      	bmi.n	800b74c <_fflush_r+0xc>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	059b      	lsls	r3, r3, #22
 800b78e:	d4dd      	bmi.n	800b74c <_fflush_r+0xc>
 800b790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b792:	f000 f908 	bl	800b9a6 <__retarget_lock_release_recursive>
 800b796:	e7d9      	b.n	800b74c <_fflush_r+0xc>
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <_fflush_r+0x70>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d101      	bne.n	800b7a2 <_fflush_r+0x62>
 800b79e:	68ac      	ldr	r4, [r5, #8]
 800b7a0:	e7df      	b.n	800b762 <_fflush_r+0x22>
 800b7a2:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <_fflush_r+0x74>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	bf08      	it	eq
 800b7a8:	68ec      	ldreq	r4, [r5, #12]
 800b7aa:	e7da      	b.n	800b762 <_fflush_r+0x22>
 800b7ac:	0800c344 	.word	0x0800c344
 800b7b0:	0800c364 	.word	0x0800c364
 800b7b4:	0800c324 	.word	0x0800c324

0800b7b8 <std>:
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	4604      	mov	r4, r0
 800b7be:	e9c0 3300 	strd	r3, r3, [r0]
 800b7c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7c6:	6083      	str	r3, [r0, #8]
 800b7c8:	8181      	strh	r1, [r0, #12]
 800b7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b7cc:	81c2      	strh	r2, [r0, #14]
 800b7ce:	6183      	str	r3, [r0, #24]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	305c      	adds	r0, #92	; 0x5c
 800b7d6:	f7fb fe21 	bl	800741c <memset>
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <std+0x38>)
 800b7dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <std+0x3c>)
 800b7e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <std+0x40>)
 800b7e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std+0x44>)
 800b7e8:	6224      	str	r4, [r4, #32]
 800b7ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800bb09 	.word	0x0800bb09
 800b7f4:	0800bb2b 	.word	0x0800bb2b
 800b7f8:	0800bb63 	.word	0x0800bb63
 800b7fc:	0800bb87 	.word	0x0800bb87

0800b800 <_cleanup_r>:
 800b800:	4901      	ldr	r1, [pc, #4]	; (800b808 <_cleanup_r+0x8>)
 800b802:	f000 b8af 	b.w	800b964 <_fwalk_reent>
 800b806:	bf00      	nop
 800b808:	0800b741 	.word	0x0800b741

0800b80c <__sfmoreglue>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	1e4a      	subs	r2, r1, #1
 800b810:	2568      	movs	r5, #104	; 0x68
 800b812:	4355      	muls	r5, r2
 800b814:	460e      	mov	r6, r1
 800b816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b81a:	f7ff fa7d 	bl	800ad18 <_malloc_r>
 800b81e:	4604      	mov	r4, r0
 800b820:	b140      	cbz	r0, 800b834 <__sfmoreglue+0x28>
 800b822:	2100      	movs	r1, #0
 800b824:	e9c0 1600 	strd	r1, r6, [r0]
 800b828:	300c      	adds	r0, #12
 800b82a:	60a0      	str	r0, [r4, #8]
 800b82c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b830:	f7fb fdf4 	bl	800741c <memset>
 800b834:	4620      	mov	r0, r4
 800b836:	bd70      	pop	{r4, r5, r6, pc}

0800b838 <__sfp_lock_acquire>:
 800b838:	4801      	ldr	r0, [pc, #4]	; (800b840 <__sfp_lock_acquire+0x8>)
 800b83a:	f000 b8b3 	b.w	800b9a4 <__retarget_lock_acquire_recursive>
 800b83e:	bf00      	nop
 800b840:	20000624 	.word	0x20000624

0800b844 <__sfp_lock_release>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__sfp_lock_release+0x8>)
 800b846:	f000 b8ae 	b.w	800b9a6 <__retarget_lock_release_recursive>
 800b84a:	bf00      	nop
 800b84c:	20000624 	.word	0x20000624

0800b850 <__sinit_lock_acquire>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__sinit_lock_acquire+0x8>)
 800b852:	f000 b8a7 	b.w	800b9a4 <__retarget_lock_acquire_recursive>
 800b856:	bf00      	nop
 800b858:	2000061f 	.word	0x2000061f

0800b85c <__sinit_lock_release>:
 800b85c:	4801      	ldr	r0, [pc, #4]	; (800b864 <__sinit_lock_release+0x8>)
 800b85e:	f000 b8a2 	b.w	800b9a6 <__retarget_lock_release_recursive>
 800b862:	bf00      	nop
 800b864:	2000061f 	.word	0x2000061f

0800b868 <__sinit>:
 800b868:	b510      	push	{r4, lr}
 800b86a:	4604      	mov	r4, r0
 800b86c:	f7ff fff0 	bl	800b850 <__sinit_lock_acquire>
 800b870:	69a3      	ldr	r3, [r4, #24]
 800b872:	b11b      	cbz	r3, 800b87c <__sinit+0x14>
 800b874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b878:	f7ff bff0 	b.w	800b85c <__sinit_lock_release>
 800b87c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b880:	6523      	str	r3, [r4, #80]	; 0x50
 800b882:	4b13      	ldr	r3, [pc, #76]	; (800b8d0 <__sinit+0x68>)
 800b884:	4a13      	ldr	r2, [pc, #76]	; (800b8d4 <__sinit+0x6c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	62a2      	str	r2, [r4, #40]	; 0x28
 800b88a:	42a3      	cmp	r3, r4
 800b88c:	bf04      	itt	eq
 800b88e:	2301      	moveq	r3, #1
 800b890:	61a3      	streq	r3, [r4, #24]
 800b892:	4620      	mov	r0, r4
 800b894:	f000 f820 	bl	800b8d8 <__sfp>
 800b898:	6060      	str	r0, [r4, #4]
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 f81c 	bl	800b8d8 <__sfp>
 800b8a0:	60a0      	str	r0, [r4, #8]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 f818 	bl	800b8d8 <__sfp>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	60e0      	str	r0, [r4, #12]
 800b8ac:	2104      	movs	r1, #4
 800b8ae:	6860      	ldr	r0, [r4, #4]
 800b8b0:	f7ff ff82 	bl	800b7b8 <std>
 800b8b4:	68a0      	ldr	r0, [r4, #8]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	2109      	movs	r1, #9
 800b8ba:	f7ff ff7d 	bl	800b7b8 <std>
 800b8be:	68e0      	ldr	r0, [r4, #12]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	2112      	movs	r1, #18
 800b8c4:	f7ff ff78 	bl	800b7b8 <std>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	61a3      	str	r3, [r4, #24]
 800b8cc:	e7d2      	b.n	800b874 <__sinit+0xc>
 800b8ce:	bf00      	nop
 800b8d0:	0800bed0 	.word	0x0800bed0
 800b8d4:	0800b801 	.word	0x0800b801

0800b8d8 <__sfp>:
 800b8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8da:	4607      	mov	r7, r0
 800b8dc:	f7ff ffac 	bl	800b838 <__sfp_lock_acquire>
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <__sfp+0x84>)
 800b8e2:	681e      	ldr	r6, [r3, #0]
 800b8e4:	69b3      	ldr	r3, [r6, #24]
 800b8e6:	b913      	cbnz	r3, 800b8ee <__sfp+0x16>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7ff ffbd 	bl	800b868 <__sinit>
 800b8ee:	3648      	adds	r6, #72	; 0x48
 800b8f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	d503      	bpl.n	800b900 <__sfp+0x28>
 800b8f8:	6833      	ldr	r3, [r6, #0]
 800b8fa:	b30b      	cbz	r3, 800b940 <__sfp+0x68>
 800b8fc:	6836      	ldr	r6, [r6, #0]
 800b8fe:	e7f7      	b.n	800b8f0 <__sfp+0x18>
 800b900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b904:	b9d5      	cbnz	r5, 800b93c <__sfp+0x64>
 800b906:	4b16      	ldr	r3, [pc, #88]	; (800b960 <__sfp+0x88>)
 800b908:	60e3      	str	r3, [r4, #12]
 800b90a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b90e:	6665      	str	r5, [r4, #100]	; 0x64
 800b910:	f000 f847 	bl	800b9a2 <__retarget_lock_init_recursive>
 800b914:	f7ff ff96 	bl	800b844 <__sfp_lock_release>
 800b918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b91c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b920:	6025      	str	r5, [r4, #0]
 800b922:	61a5      	str	r5, [r4, #24]
 800b924:	2208      	movs	r2, #8
 800b926:	4629      	mov	r1, r5
 800b928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b92c:	f7fb fd76 	bl	800741c <memset>
 800b930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b938:	4620      	mov	r0, r4
 800b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b93c:	3468      	adds	r4, #104	; 0x68
 800b93e:	e7d9      	b.n	800b8f4 <__sfp+0x1c>
 800b940:	2104      	movs	r1, #4
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ff62 	bl	800b80c <__sfmoreglue>
 800b948:	4604      	mov	r4, r0
 800b94a:	6030      	str	r0, [r6, #0]
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d1d5      	bne.n	800b8fc <__sfp+0x24>
 800b950:	f7ff ff78 	bl	800b844 <__sfp_lock_release>
 800b954:	230c      	movs	r3, #12
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	e7ee      	b.n	800b938 <__sfp+0x60>
 800b95a:	bf00      	nop
 800b95c:	0800bed0 	.word	0x0800bed0
 800b960:	ffff0001 	.word	0xffff0001

0800b964 <_fwalk_reent>:
 800b964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b968:	4606      	mov	r6, r0
 800b96a:	4688      	mov	r8, r1
 800b96c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b970:	2700      	movs	r7, #0
 800b972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b976:	f1b9 0901 	subs.w	r9, r9, #1
 800b97a:	d505      	bpl.n	800b988 <_fwalk_reent+0x24>
 800b97c:	6824      	ldr	r4, [r4, #0]
 800b97e:	2c00      	cmp	r4, #0
 800b980:	d1f7      	bne.n	800b972 <_fwalk_reent+0xe>
 800b982:	4638      	mov	r0, r7
 800b984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b988:	89ab      	ldrh	r3, [r5, #12]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d907      	bls.n	800b99e <_fwalk_reent+0x3a>
 800b98e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b992:	3301      	adds	r3, #1
 800b994:	d003      	beq.n	800b99e <_fwalk_reent+0x3a>
 800b996:	4629      	mov	r1, r5
 800b998:	4630      	mov	r0, r6
 800b99a:	47c0      	blx	r8
 800b99c:	4307      	orrs	r7, r0
 800b99e:	3568      	adds	r5, #104	; 0x68
 800b9a0:	e7e9      	b.n	800b976 <_fwalk_reent+0x12>

0800b9a2 <__retarget_lock_init_recursive>:
 800b9a2:	4770      	bx	lr

0800b9a4 <__retarget_lock_acquire_recursive>:
 800b9a4:	4770      	bx	lr

0800b9a6 <__retarget_lock_release_recursive>:
 800b9a6:	4770      	bx	lr

0800b9a8 <__swhatbuf_r>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	460e      	mov	r6, r1
 800b9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	b096      	sub	sp, #88	; 0x58
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	461d      	mov	r5, r3
 800b9b8:	da07      	bge.n	800b9ca <__swhatbuf_r+0x22>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	89b3      	ldrh	r3, [r6, #12]
 800b9c0:	061a      	lsls	r2, r3, #24
 800b9c2:	d410      	bmi.n	800b9e6 <__swhatbuf_r+0x3e>
 800b9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9c8:	e00e      	b.n	800b9e8 <__swhatbuf_r+0x40>
 800b9ca:	466a      	mov	r2, sp
 800b9cc:	f000 f902 	bl	800bbd4 <_fstat_r>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dbf2      	blt.n	800b9ba <__swhatbuf_r+0x12>
 800b9d4:	9a01      	ldr	r2, [sp, #4]
 800b9d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9de:	425a      	negs	r2, r3
 800b9e0:	415a      	adcs	r2, r3
 800b9e2:	602a      	str	r2, [r5, #0]
 800b9e4:	e7ee      	b.n	800b9c4 <__swhatbuf_r+0x1c>
 800b9e6:	2340      	movs	r3, #64	; 0x40
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	b016      	add	sp, #88	; 0x58
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}

0800b9f0 <__smakebuf_r>:
 800b9f0:	898b      	ldrh	r3, [r1, #12]
 800b9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9f4:	079d      	lsls	r5, r3, #30
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	d507      	bpl.n	800ba0c <__smakebuf_r+0x1c>
 800b9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	6123      	str	r3, [r4, #16]
 800ba04:	2301      	movs	r3, #1
 800ba06:	6163      	str	r3, [r4, #20]
 800ba08:	b002      	add	sp, #8
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	ab01      	add	r3, sp, #4
 800ba0e:	466a      	mov	r2, sp
 800ba10:	f7ff ffca 	bl	800b9a8 <__swhatbuf_r>
 800ba14:	9900      	ldr	r1, [sp, #0]
 800ba16:	4605      	mov	r5, r0
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff f97d 	bl	800ad18 <_malloc_r>
 800ba1e:	b948      	cbnz	r0, 800ba34 <__smakebuf_r+0x44>
 800ba20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba24:	059a      	lsls	r2, r3, #22
 800ba26:	d4ef      	bmi.n	800ba08 <__smakebuf_r+0x18>
 800ba28:	f023 0303 	bic.w	r3, r3, #3
 800ba2c:	f043 0302 	orr.w	r3, r3, #2
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	e7e3      	b.n	800b9fc <__smakebuf_r+0xc>
 800ba34:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <__smakebuf_r+0x7c>)
 800ba36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	9b00      	ldr	r3, [sp, #0]
 800ba44:	6163      	str	r3, [r4, #20]
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	6120      	str	r0, [r4, #16]
 800ba4a:	b15b      	cbz	r3, 800ba64 <__smakebuf_r+0x74>
 800ba4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba50:	4630      	mov	r0, r6
 800ba52:	f000 f8d1 	bl	800bbf8 <_isatty_r>
 800ba56:	b128      	cbz	r0, 800ba64 <__smakebuf_r+0x74>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f023 0303 	bic.w	r3, r3, #3
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	89a0      	ldrh	r0, [r4, #12]
 800ba66:	4305      	orrs	r5, r0
 800ba68:	81a5      	strh	r5, [r4, #12]
 800ba6a:	e7cd      	b.n	800ba08 <__smakebuf_r+0x18>
 800ba6c:	0800b801 	.word	0x0800b801

0800ba70 <_malloc_usable_size_r>:
 800ba70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba74:	1f18      	subs	r0, r3, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bfbc      	itt	lt
 800ba7a:	580b      	ldrlt	r3, [r1, r0]
 800ba7c:	18c0      	addlt	r0, r0, r3
 800ba7e:	4770      	bx	lr

0800ba80 <_raise_r>:
 800ba80:	291f      	cmp	r1, #31
 800ba82:	b538      	push	{r3, r4, r5, lr}
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	d904      	bls.n	800ba94 <_raise_r+0x14>
 800ba8a:	2316      	movs	r3, #22
 800ba8c:	6003      	str	r3, [r0, #0]
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba96:	b112      	cbz	r2, 800ba9e <_raise_r+0x1e>
 800ba98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba9c:	b94b      	cbnz	r3, 800bab2 <_raise_r+0x32>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f830 	bl	800bb04 <_getpid_r>
 800baa4:	462a      	mov	r2, r5
 800baa6:	4601      	mov	r1, r0
 800baa8:	4620      	mov	r0, r4
 800baaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baae:	f000 b817 	b.w	800bae0 <_kill_r>
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d00a      	beq.n	800bacc <_raise_r+0x4c>
 800bab6:	1c59      	adds	r1, r3, #1
 800bab8:	d103      	bne.n	800bac2 <_raise_r+0x42>
 800baba:	2316      	movs	r3, #22
 800babc:	6003      	str	r3, [r0, #0]
 800babe:	2001      	movs	r0, #1
 800bac0:	e7e7      	b.n	800ba92 <_raise_r+0x12>
 800bac2:	2400      	movs	r4, #0
 800bac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bac8:	4628      	mov	r0, r5
 800baca:	4798      	blx	r3
 800bacc:	2000      	movs	r0, #0
 800bace:	e7e0      	b.n	800ba92 <_raise_r+0x12>

0800bad0 <raise>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	; (800badc <raise+0xc>)
 800bad2:	4601      	mov	r1, r0
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f7ff bfd3 	b.w	800ba80 <_raise_r>
 800bada:	bf00      	nop
 800badc:	200000d8 	.word	0x200000d8

0800bae0 <_kill_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d07      	ldr	r5, [pc, #28]	; (800bb00 <_kill_r+0x20>)
 800bae4:	2300      	movs	r3, #0
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	4611      	mov	r1, r2
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	f7f7 fb8b 	bl	8003208 <_kill>
 800baf2:	1c43      	adds	r3, r0, #1
 800baf4:	d102      	bne.n	800bafc <_kill_r+0x1c>
 800baf6:	682b      	ldr	r3, [r5, #0]
 800baf8:	b103      	cbz	r3, 800bafc <_kill_r+0x1c>
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	bd38      	pop	{r3, r4, r5, pc}
 800bafe:	bf00      	nop
 800bb00:	20000618 	.word	0x20000618

0800bb04 <_getpid_r>:
 800bb04:	f7f7 bb78 	b.w	80031f8 <_getpid>

0800bb08 <__sread>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb10:	f000 f894 	bl	800bc3c <_read_r>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	bfab      	itete	ge
 800bb18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb1c:	181b      	addge	r3, r3, r0
 800bb1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb22:	bfac      	ite	ge
 800bb24:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb26:	81a3      	strhlt	r3, [r4, #12]
 800bb28:	bd10      	pop	{r4, pc}

0800bb2a <__swrite>:
 800bb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2e:	461f      	mov	r7, r3
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	05db      	lsls	r3, r3, #23
 800bb34:	4605      	mov	r5, r0
 800bb36:	460c      	mov	r4, r1
 800bb38:	4616      	mov	r6, r2
 800bb3a:	d505      	bpl.n	800bb48 <__swrite+0x1e>
 800bb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb40:	2302      	movs	r3, #2
 800bb42:	2200      	movs	r2, #0
 800bb44:	f000 f868 	bl	800bc18 <_lseek_r>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	4632      	mov	r2, r6
 800bb56:	463b      	mov	r3, r7
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5e:	f000 b817 	b.w	800bb90 <_write_r>

0800bb62 <__sseek>:
 800bb62:	b510      	push	{r4, lr}
 800bb64:	460c      	mov	r4, r1
 800bb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6a:	f000 f855 	bl	800bc18 <_lseek_r>
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	bf15      	itete	ne
 800bb74:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb7e:	81a3      	strheq	r3, [r4, #12]
 800bb80:	bf18      	it	ne
 800bb82:	81a3      	strhne	r3, [r4, #12]
 800bb84:	bd10      	pop	{r4, pc}

0800bb86 <__sclose>:
 800bb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8a:	f000 b813 	b.w	800bbb4 <_close_r>
	...

0800bb90 <_write_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d07      	ldr	r5, [pc, #28]	; (800bbb0 <_write_r+0x20>)
 800bb94:	4604      	mov	r4, r0
 800bb96:	4608      	mov	r0, r1
 800bb98:	4611      	mov	r1, r2
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	602a      	str	r2, [r5, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f7f7 fb69 	bl	8003276 <_write>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d102      	bne.n	800bbae <_write_r+0x1e>
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	b103      	cbz	r3, 800bbae <_write_r+0x1e>
 800bbac:	6023      	str	r3, [r4, #0]
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	20000618 	.word	0x20000618

0800bbb4 <_close_r>:
 800bbb4:	b538      	push	{r3, r4, r5, lr}
 800bbb6:	4d06      	ldr	r5, [pc, #24]	; (800bbd0 <_close_r+0x1c>)
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	602b      	str	r3, [r5, #0]
 800bbc0:	f7f7 fb75 	bl	80032ae <_close>
 800bbc4:	1c43      	adds	r3, r0, #1
 800bbc6:	d102      	bne.n	800bbce <_close_r+0x1a>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	b103      	cbz	r3, 800bbce <_close_r+0x1a>
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20000618 	.word	0x20000618

0800bbd4 <_fstat_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	; (800bbf4 <_fstat_r+0x20>)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4604      	mov	r4, r0
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	f7f7 fb70 	bl	80032c6 <_fstat>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	d102      	bne.n	800bbf0 <_fstat_r+0x1c>
 800bbea:	682b      	ldr	r3, [r5, #0]
 800bbec:	b103      	cbz	r3, 800bbf0 <_fstat_r+0x1c>
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	bd38      	pop	{r3, r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000618 	.word	0x20000618

0800bbf8 <_isatty_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d06      	ldr	r5, [pc, #24]	; (800bc14 <_isatty_r+0x1c>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	f7f7 fb6f 	bl	80032e6 <_isatty>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_isatty_r+0x1a>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_isatty_r+0x1a>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	20000618 	.word	0x20000618

0800bc18 <_lseek_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4d07      	ldr	r5, [pc, #28]	; (800bc38 <_lseek_r+0x20>)
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	4608      	mov	r0, r1
 800bc20:	4611      	mov	r1, r2
 800bc22:	2200      	movs	r2, #0
 800bc24:	602a      	str	r2, [r5, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	f7f7 fb68 	bl	80032fc <_lseek>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_lseek_r+0x1e>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_lseek_r+0x1e>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	20000618 	.word	0x20000618

0800bc3c <_read_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d07      	ldr	r5, [pc, #28]	; (800bc5c <_read_r+0x20>)
 800bc40:	4604      	mov	r4, r0
 800bc42:	4608      	mov	r0, r1
 800bc44:	4611      	mov	r1, r2
 800bc46:	2200      	movs	r2, #0
 800bc48:	602a      	str	r2, [r5, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f7f7 faf6 	bl	800323c <_read>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_read_r+0x1e>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_read_r+0x1e>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	20000618 	.word	0x20000618

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
