
whiteroom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800ae10  0800ae10  0001ae10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e4  0800b2e4  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ec  0800b2ec  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800b2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200002dc  0800b5d0  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800b5d0  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c7c  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c8  00000000  00000000  00032f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00035950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d4  00000000  00000000  00037af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001330d  00000000  00000000  0004fec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009239f  00000000  00000000  000631d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ecc  00000000  00000000  000f55c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002dc 	.word	0x200002dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800adf8 	.word	0x0800adf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e0 	.word	0x200002e0
 80001dc:	0800adf8 	.word	0x0800adf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <BH1750_Init>:
 * 			     the configuration information for the specified I2C.
 * @param Address Target BH1750 device address. The device 7 bits address value in datasheet must
 *                be shifted to the left before calling by I2C function.
 * @retval BH1750 Status
 */
BH1750_STATUS BH1750_Init(BH1750_HandleTypeDef *hbh1750, I2C_HandleTypeDef *hi2c, uint16_t Address) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]
    hbh1750->I2C_channel = hi2c;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]
	hbh1750->Address = Address;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	809a      	strh	r2, [r3, #4]
	if(BH1750_OK == BH1750_Reset(hbh1750))
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f811 	bl	800103e <BH1750_Reset>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d108      	bne.n	8001034 <BH1750_Init+0x38>
	{
		if(BH1750_OK == BH1750_SetMtreg(hbh1750, BH1750_DEFAULT_MTREG)) // Set default value;
 8001022:	2145      	movs	r1, #69	; 0x45
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f847 	bl	80010b8 <BH1750_SetMtreg>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <BH1750_Init+0x38>
			return BH1750_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <BH1750_Init+0x3a>
	}
	return BH1750_ERROR;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <BH1750_Reset>:
/* 
 * @brief Reset all registers to default value.
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_Reset(BH1750_HandleTypeDef *hbh1750) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af02      	add	r7, sp, #8
 8001044:	6078      	str	r0, [r7, #4]
    uint8_t tmp = BH1750_RESET;
 8001046:	2307      	movs	r3, #7
 8001048:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp, 1, 10))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	8899      	ldrh	r1, [r3, #4]
 8001052:	f107 020f 	add.w	r2, r7, #15
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	f002 f97e 	bl	800335c <HAL_I2C_Master_Transmit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <BH1750_Reset+0x2c>
        return BH1750_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <BH1750_Reset+0x2e>
    return BH1750_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <BH1750_PowerState>:
 * @param PowerOn
 *          @arg 0: Power down, low current, no active state.
 *          @arg 1: Ready for measurement command. 
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_PowerState(BH1750_HandleTypeDef *hbh1750, uint8_t PowerOn) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    PowerOn = (PowerOn ? 1 : 0);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	70fb      	strb	r3, [r7, #3]
    if (HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &PowerOn, 1, 10))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8899      	ldrh	r1, [r3, #4]
 8001096:	1cfa      	adds	r2, r7, #3
 8001098:	230a      	movs	r3, #10
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f002 f95d 	bl	800335c <HAL_I2C_Master_Transmit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <BH1750_PowerState+0x38>
        return BH1750_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e000      	b.n	80010ae <BH1750_PowerState+0x3a>
    return BH1750_ERROR;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <BH1750_SetMtreg>:
 * @brief Adjust measurement result for influence of optical window. (sensor sensitivity adjusting) 
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @param Mtreg The modified value of measurement time register. (31 <= Mtreg <=254) (miliseconds)
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_SetMtreg(BH1750_HandleTypeDef *hbh1750, uint8_t Mtreg) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	d902      	bls.n	80010d0 <BH1750_SetMtreg+0x18>
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d101      	bne.n	80010d4 <BH1750_SetMtreg+0x1c>
		return BH1750_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e039      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	BH1750_Mtreg = Mtreg;
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <BH1750_SetMtreg+0x98>)
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));     // High bit 01000_MT[7,6,5]
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));   // Low bit  011_MT[4,3,2,1,0] 
 80010e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp[0], 1, 10);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8899      	ldrh	r1, [r3, #4]
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	230a      	movs	r3, #10
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	f002 f925 	bl	800335c <HAL_I2C_Master_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <BH1750_SetMtreg+0x68>
		return BH1750_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e013      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	retCode = HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &tmp[1], 1, 10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8899      	ldrh	r1, [r3, #4]
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	230a      	movs	r3, #10
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	f002 f912 	bl	800335c <HAL_I2C_Master_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <BH1750_SetMtreg+0x8e>
		return BH1750_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <BH1750_SetMtreg+0x90>
	}

	return BH1750_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000309 	.word	0x20000309

08001154 <BH1750_SetMode>:
 *              @arg ONETIME_L_RES_MODE:     Start measurement at 4lx resolution.
 *                                           Measurement Time is typically 16ms. 
 *                                           It is automatically set to Power Down mode after measurement.
 * @retval BH1750 status
 */
BH1750_STATUS BH1750_SetMode(BH1750_HandleTypeDef *hbh1750, bh1750_mode Mode) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
    if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <BH1750_SetMode+0x24>
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <BH1750_SetMode+0x24>
 8001174:	2301      	movs	r3, #1
 8001176:	e019      	b.n	80011ac <BH1750_SetMode+0x58>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <BH1750_SetMode+0x32>
 8001182:	2301      	movs	r3, #1
 8001184:	e012      	b.n	80011ac <BH1750_SetMode+0x58>

	BH1750_Mode = Mode;
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <BH1750_SetMode+0x60>)
 800118a:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(hbh1750->I2C_channel, hbh1750->Address, &Mode, 1, 10))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	8899      	ldrh	r1, [r3, #4]
 8001194:	1cfa      	adds	r2, r7, #3
 8001196:	230a      	movs	r3, #10
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	f002 f8de 	bl	800335c <HAL_I2C_Master_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <BH1750_SetMode+0x56>
		return BH1750_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <BH1750_SetMode+0x58>

	return BH1750_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000308 	.word	0x20000308

080011b8 <BH1750_ReadLight>:
 * @brief Read the converted value and calculate the result.
 * @param hbh1750 Pointer to a BH1750_HandleTypeDef
 * @param Result Pointer to your variable for getting result.
 * @retval BH1750 Status
 */
BH1750_STATUS BH1750_ReadLight(BH1750_HandleTypeDef *hbh1750, float *Result) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
 	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(hbh1750->I2C_channel, hbh1750->Address, tmp, 2, 10))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	8899      	ldrh	r1, [r3, #4]
 80011ca:	f107 0208 	add.w	r2, r7, #8
 80011ce:	230a      	movs	r3, #10
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2302      	movs	r3, #2
 80011d4:	f002 f9c0 	bl	8003558 <HAL_I2C_Master_Receive>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d138      	bne.n	8001250 <BH1750_ReadLight+0x98>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80011de:	7a3b      	ldrb	r3, [r7, #8]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	7a7a      	ldrb	r2, [r7, #9]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	edc7 7a03 	vstr	s15, [r7, #12]

		if(BH1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <BH1750_ReadLight+0xa4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b45      	cmp	r3, #69	; 0x45
 80011f8:	d00f      	beq.n	800121a <BH1750_ReadLight+0x62>
		{
			result *= (float)((uint8_t)(BH1750_DEFAULT_MTREG) / (float)BH1750_Mtreg);
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <BH1750_ReadLight+0xa4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001206:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001260 <BH1750_ReadLight+0xa8>
 800120a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(BH1750_Mode == ONETIME_H_RES_MODE2 || BH1750_Mode == CONTINUOUS_H_RES_MODE2)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <BH1750_ReadLight+0xac>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b21      	cmp	r3, #33	; 0x21
 8001220:	d003      	beq.n	800122a <BH1750_ReadLight+0x72>
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <BH1750_ReadLight+0xac>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b11      	cmp	r3, #17
 8001228:	d107      	bne.n	800123a <BH1750_ReadLight+0x82>
		{
			result /= 2.0;
 800122a:	ed97 7a03 	vldr	s14, [r7, #12]
 800122e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001236:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800123a:	ed97 7a03 	vldr	s14, [r7, #12]
 800123e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001268 <BH1750_ReadLight+0xb0>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	e000      	b.n	8001252 <BH1750_ReadLight+0x9a>
	}
	return BH1750_ERROR;
 8001250:	2301      	movs	r3, #1
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000309 	.word	0x20000309
 8001260:	428a0000 	.word	0x428a0000
 8001264:	20000308 	.word	0x20000308
 8001268:	3f99999a 	.word	0x3f99999a

0800126c <PCA9685_Init>:
uint32_t _oscillator_freq;

void PCA9685_Init(PCA9685_HandleTypeDef *hpca9685, 
									I2C_HandleTypeDef *hi2c,
									uint8_t addr,
									uint8_t prescale) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	460b      	mov	r3, r1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4613      	mov	r3, r2
 8001280:	71bb      	strb	r3, [r7, #6]
	hpca9685->Address = addr;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	711a      	strb	r2, [r3, #4]
	hpca9685->hi2c = hi2c;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
	PCA9685_Reset(hpca9685);
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f81a 	bl	80012c8 <PCA9685_Reset>
	if (prescale) {
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <PCA9685_Init+0x3a>
		PCA9685_SetExtClk(hpca9685, prescale);
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f822 	bl	80012e8 <PCA9685_SetExtClk>
 80012a4:	e004      	b.n	80012b0 <PCA9685_Init+0x44>
	} else {
		// set a default frequency
		PCA9685_SetPWMFreq(hpca9685, 1000);
 80012a6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80012c0 <PCA9685_Init+0x54>
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f85e 	bl	800136c <PCA9685_SetPWMFreq>
	}
	// set the default internal frequency
	PCA9685_SetOscillatorFrequency(hpca9685, FREQUENCY_OSCILLATOR);
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <PCA9685_Init+0x58>)
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f908 	bl	80014c8 <PCA9685_SetOscillatorFrequency>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	447a0000 	.word	0x447a0000
 80012c4:	017d7840 	.word	0x017d7840

080012c8 <PCA9685_Reset>:
									
void PCA9685_Reset(PCA9685_HandleTypeDef *hpca9685) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, MODE1_RESTART);
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	2100      	movs	r1, #0
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f93a 	bl	800154e <PCA9685_Write8>
	HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 fb94 	bl	8002a08 <HAL_Delay>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <PCA9685_SetExtClk>:
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &sleep);
	uint8_t wakeup = sleep & ~MODE1_SLEEP; // set sleep bit low
	PCA9685_Write8(hpca9685, PCA9685_MODE1, wakeup);
}

void PCA9685_SetExtClk(PCA9685_HandleTypeDef *hpca9685, uint8_t prescale) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	uint8_t oldmode;
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &oldmode);
 80012f4:	f107 030e 	add.w	r3, r7, #14
 80012f8:	461a      	mov	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f942 	bl	8001586 <PCA9685_Read8>
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800130a:	b25b      	sxtb	r3, r3
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	b25b      	sxtb	r3, r3
 8001312:	73fb      	strb	r3, [r7, #15]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, newmode); // go to sleep, turn off internal oscillator
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	461a      	mov	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f917 	bl	800154e <PCA9685_Write8>
	
	// This sets both the SLEEP and EXTCLK bits of the MODE1 register to switch to
	// use the external clock.
	PCA9685_Write8(hpca9685, PCA9685_MODE1, (newmode |= MODE1_EXTCLK));
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	461a      	mov	r2, r3
 800132c:	2100      	movs	r1, #0
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f90d 	bl	800154e <PCA9685_Write8>
	
	PCA9685_Write8(hpca9685, PCA9685_PRESCALE, prescale); // set the prescaler
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	461a      	mov	r2, r3
 8001338:	21fe      	movs	r1, #254	; 0xfe
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f907 	bl	800154e <PCA9685_Write8>
	
	HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f001 fb61 	bl	8002a08 <HAL_Delay>
	// clear the SLEEP bit to start
	PCA9685_Write8(hpca9685, PCA9685_MODE1, (newmode & ~MODE1_SLEEP) | MODE1_RESTART | MODE1_AI);
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	f003 034f 	and.w	r3, r3, #79	; 0x4f
 800134e:	b25b      	sxtb	r3, r3
 8001350:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001354:	b25b      	sxtb	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f8f6 	bl	800154e <PCA9685_Write8>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <PCA9685_SetPWMFreq>:

void PCA9685_SetPWMFreq(PCA9685_HandleTypeDef *hpca9685, float freq) {
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	ed87 0a02 	vstr	s0, [r7, #8]
	// Range output modulation frequency is dependant on oscillator
	if (freq < 1) 		freq = 1;
 8001378:	edd7 7a02 	vldr	s15, [r7, #8]
 800137c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d502      	bpl.n	8001390 <PCA9685_SetPWMFreq+0x24>
 800138a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800138e:	60bb      	str	r3, [r7, #8]
	if (freq > 3500)	freq = 3500; // Datasheet limit is 3052=50MHz/(4*4096)
 8001390:	edd7 7a02 	vldr	s15, [r7, #8]
 8001394:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80014a4 <PCA9685_SetPWMFreq+0x138>
 8001398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	dd01      	ble.n	80013a6 <PCA9685_SetPWMFreq+0x3a>
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <PCA9685_SetPWMFreq+0x13c>)
 80013a4:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((_oscillator_freq / (freq * 4096.0)) + 0.5) - 1;
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <PCA9685_SetPWMFreq+0x140>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8b2 	bl	8000514 <__aeabi_ui2d>
 80013b0:	4604      	mov	r4, r0
 80013b2:	460d      	mov	r5, r1
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f7ff f8cf 	bl	8000558 <__aeabi_f2d>
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <PCA9685_SetPWMFreq+0x144>)
 80013c0:	f7ff f922 	bl	8000608 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4620      	mov	r0, r4
 80013ca:	4629      	mov	r1, r5
 80013cc:	f7ff fa46 	bl	800085c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <PCA9685_SetPWMFreq+0x148>)
 80013de:	f7fe ff5d 	bl	800029c <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <PCA9685_SetPWMFreq+0x14c>)
 80013f0:	f7fe ff52 	bl	8000298 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbfc 	bl	8000bf8 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	617b      	str	r3, [r7, #20]
	if (prescaleval < PCA9685_PRESCALE_MIN)
 8001404:	edd7 7a05 	vldr	s15, [r7, #20]
 8001408:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800140c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d501      	bpl.n	800141a <PCA9685_SetPWMFreq+0xae>
    prescaleval = PCA9685_PRESCALE_MIN;
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <PCA9685_SetPWMFreq+0x150>)
 8001418:	617b      	str	r3, [r7, #20]
	if (prescaleval > PCA9685_PRESCALE_MAX)
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014c0 <PCA9685_SetPWMFreq+0x154>
 8001422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	dd01      	ble.n	8001430 <PCA9685_SetPWMFreq+0xc4>
    prescaleval = PCA9685_PRESCALE_MAX;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <PCA9685_SetPWMFreq+0x158>)
 800142e:	617b      	str	r3, [r7, #20]
	uint8_t prescale = (uint8_t)prescaleval;
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001438:	edc7 7a01 	vstr	s15, [r7, #4]
 800143c:	793b      	ldrb	r3, [r7, #4]
 800143e:	74fb      	strb	r3, [r7, #19]
	
	uint8_t oldmode;
	PCA9685_Read8(hpca9685, PCA9685_MODE1, &oldmode);
 8001440:	f107 0311 	add.w	r3, r7, #17
 8001444:	461a      	mov	r2, r3
 8001446:	2100      	movs	r1, #0
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f89c 	bl	8001586 <PCA9685_Read8>
	uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP; // sleep
 800144e:	7c7b      	ldrb	r3, [r7, #17]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	b25b      	sxtb	r3, r3
 800145e:	74bb      	strb	r3, [r7, #18]
	PCA9685_Write8(hpca9685, PCA9685_MODE1, newmode);          	// go to sleep
 8001460:	7cbb      	ldrb	r3, [r7, #18]
 8001462:	461a      	mov	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f871 	bl	800154e <PCA9685_Write8>
	PCA9685_Write8(hpca9685, PCA9685_PRESCALE, prescale); 		// set the prescaler
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	461a      	mov	r2, r3
 8001470:	21fe      	movs	r1, #254	; 0xfe
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f86b 	bl	800154e <PCA9685_Write8>
	PCA9685_Write8(hpca9685, PCA9685_MODE1, oldmode);
 8001478:	7c7b      	ldrb	r3, [r7, #17]
 800147a:	461a      	mov	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f865 	bl	800154e <PCA9685_Write8>
	HAL_Delay(5);
 8001484:	2005      	movs	r0, #5
 8001486:	f001 fabf 	bl	8002a08 <HAL_Delay>
	// This sets the MODE1 register to turn on auto increment.
	PCA9685_Write8(hpca9685, PCA9685_MODE1, oldmode | MODE1_RESTART | MODE1_AI);
 800148a:	7c7b      	ldrb	r3, [r7, #17]
 800148c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001490:	b2db      	uxtb	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	2100      	movs	r1, #0
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f859 	bl	800154e <PCA9685_Write8>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}
 80014a4:	455ac000 	.word	0x455ac000
 80014a8:	455ac000 	.word	0x455ac000
 80014ac:	2000030c 	.word	0x2000030c
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	3fe00000 	.word	0x3fe00000
 80014b8:	3ff00000 	.word	0x3ff00000
 80014bc:	40400000 	.word	0x40400000
 80014c0:	437f0000 	.word	0x437f0000
 80014c4:	437f0000 	.word	0x437f0000

080014c8 <PCA9685_SetOscillatorFrequency>:

void PCA9685_SetOscillatorFrequency(PCA9685_HandleTypeDef *hpca9685, uint32_t freq) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	_oscillator_freq = freq;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <PCA9685_SetOscillatorFrequency+0x1c>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	2000030c 	.word	0x2000030c

080014e8 <PCA9685_SetPWM>:

void PCA9685_SetPWM(PCA9685_HandleTypeDef *hpca9685, uint8_t num, uint16_t on, uint16_t off) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	72fb      	strb	r3, [r7, #11]
 80014fa:	460b      	mov	r3, r1
 80014fc:	813b      	strh	r3, [r7, #8]
 80014fe:	4613      	mov	r3, r2
 8001500:	80fb      	strh	r3, [r7, #6]
	uint8_t outputBuffer[5] = {PCA9685_LED0_ON_L + 4*num, on, (on >> 8), off, (off >> 8)};
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3306      	adds	r3, #6
 800150a:	b2db      	uxtb	r3, r3
 800150c:	743b      	strb	r3, [r7, #16]
 800150e:	893b      	ldrh	r3, [r7, #8]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	747b      	strb	r3, [r7, #17]
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	74bb      	strb	r3, [r7, #18]
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	74fb      	strb	r3, [r7, #19]
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hpca9685->hi2c, hpca9685->Address, outputBuffer, 5, 1);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	b299      	uxth	r1, r3
 8001538:	f107 0210 	add.w	r2, r7, #16
 800153c:	2301      	movs	r3, #1
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2305      	movs	r3, #5
 8001542:	f001 ff0b 	bl	800335c <HAL_I2C_Master_Transmit>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <PCA9685_Write8>:

			
/******************* Low level I2C interface */
void PCA9685_Write8(PCA9685_HandleTypeDef *hpca9685, uint8_t addr, uint8_t d) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af04      	add	r7, sp, #16
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	460b      	mov	r3, r1
 8001558:	70fb      	strb	r3, [r7, #3]
 800155a:	4613      	mov	r3, r2
 800155c:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(hpca9685->hi2c, hpca9685->Address, addr, 1, &d, 1, 1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	b299      	uxth	r1, r3
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	b29a      	uxth	r2, r3
 800156c:	2301      	movs	r3, #1
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	1cbb      	adds	r3, r7, #2
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	f002 fa13 	bl	80039a4 <HAL_I2C_Mem_Write>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <PCA9685_Read8>:

void PCA9685_Read8(PCA9685_HandleTypeDef *hpca9685, uint8_t addr, uint8_t *data) {
 8001586:	b580      	push	{r7, lr}
 8001588:	b088      	sub	sp, #32
 800158a:	af04      	add	r7, sp, #16
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	460b      	mov	r3, r1
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(hpca9685->hi2c, hpca9685->Address, addr, 1, data, 1, 1);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	b299      	uxth	r1, r3
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	2301      	movs	r3, #1
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	2301      	movs	r3, #1
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2301      	movs	r3, #1
 80015b0:	f002 faf2 	bl	8003b98 <HAL_I2C_Mem_Read>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <StepperInit>:
STEPPER_STATUS StepperInit(Stepper_HandleTypeDef *stepper,
		                   GPIO_TypeDef* port,
						   uint16_t pin_Dir,
						   uint16_t pin_Pulse,
						   uint8_t microstep,
						   uint16_t currentPos) {
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	460b      	mov	r3, r1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80bb      	strh	r3, [r7, #4]
	stepper->Port           = port;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	601a      	str	r2, [r3, #0]
	stepper->GPIO_Pin_Dir   = pin_Dir;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	88fa      	ldrh	r2, [r7, #6]
 80015dc:	809a      	strh	r2, [r3, #4]
	stepper->GPIO_Pin_Pulse = pin_Pulse;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	88ba      	ldrh	r2, [r7, #4]
 80015e2:	80da      	strh	r2, [r3, #6]
	stepper->Microstep      = microstep;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	7e3a      	ldrb	r2, [r7, #24]
 80015e8:	721a      	strb	r2, [r3, #8]
	stepper->CurrentPulse   = currentPos * FACTOR;
 80015ea:	8bba      	ldrh	r2, [r7, #28]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	015b      	lsls	r3, r3, #5
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	60da      	str	r2, [r3, #12]
	stepper->TargetPulse    = currentPos * FACTOR;
 80015fa:	8bba      	ldrh	r2, [r7, #28]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	611a      	str	r2, [r3, #16]

	return STEPPER_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <setCurrentPos>:


STEPPER_STATUS setCurrentPos(Stepper_HandleTypeDef *stepper, uint16_t current) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
	stepper->CurrentPulse = current * FACTOR;
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	015b      	lsls	r3, r3, #5
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	60da      	str	r2, [r3, #12]
	stepper->TargetPulse = current * FACTOR;
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	611a      	str	r2, [r3, #16]
	return STEPPER_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <setTargetPos>:

STEPPER_STATUS setTargetPos(Stepper_HandleTypeDef *stepper, uint16_t target) {
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
	stepper->TargetPulse = target * FACTOR;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	611a      	str	r2, [r3, #16]
	return STEPPER_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <setDirCCW>:

STEPPER_STATUS setDirCCW(Stepper_HandleTypeDef *stepper) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Dir, GPIO_PIN_SET);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	889b      	ldrh	r3, [r3, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	4619      	mov	r1, r3
 8001690:	f001 fd06 	bl	80030a0 <HAL_GPIO_WritePin>
	return STEPPER_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <setDirCW>:

STEPPER_STATUS setDirCW(Stepper_HandleTypeDef *stepper) {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Dir, GPIO_PIN_RESET);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	889b      	ldrh	r3, [r3, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f001 fcf5 	bl	80030a0 <HAL_GPIO_WritePin>
	return STEPPER_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <runToTarget>:
   *  __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
   *  while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) < us);
   */
}

STEPPER_STATUS runToTarget(Stepper_HandleTypeDef *stepper) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

	if (stepper->TargetPulse != stepper->CurrentPulse) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d046      	beq.n	8001762 <runToTarget+0xa2>
		// convert Position in millimeters to pulses base on microstep
		
		if (stepper->TargetPulse > stepper->CurrentPulse) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d91f      	bls.n	8001720 <runToTarget+0x60>
			setDirCCW(stepper);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffcb 	bl	800167c <setDirCCW>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_SET);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	88db      	ldrh	r3, [r3, #6]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	f001 fcd5 	bl	80030a0 <HAL_GPIO_WritePin>
			delay_us(TdelayON);
 80016f6:	2032      	movs	r0, #50	; 0x32
 80016f8:	f000 f99a 	bl	8001a30 <delay_us>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	88db      	ldrh	r3, [r3, #6]
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	f001 fcca 	bl	80030a0 <HAL_GPIO_WritePin>
			delay_us(TdelayOFF);
 800170c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001710:	f000 f98e 	bl	8001a30 <delay_us>
			stepper->CurrentPulse++;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e01e      	b.n	800175e <runToTarget+0x9e>
		}
		else {
			setDirCW(stepper);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffbc 	bl	800169e <setDirCW>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_SET);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	88db      	ldrh	r3, [r3, #6]
 800172e:	2201      	movs	r2, #1
 8001730:	4619      	mov	r1, r3
 8001732:	f001 fcb5 	bl	80030a0 <HAL_GPIO_WritePin>
			delay_us(TdelayON);
 8001736:	2032      	movs	r0, #50	; 0x32
 8001738:	f000 f97a 	bl	8001a30 <delay_us>
			HAL_GPIO_WritePin(stepper->Port, stepper->GPIO_Pin_Pulse, GPIO_PIN_RESET);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	88db      	ldrh	r3, [r3, #6]
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	f001 fcaa 	bl	80030a0 <HAL_GPIO_WritePin>
			delay_us(TdelayOFF);
 800174c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001750:	f000 f96e 	bl	8001a30 <delay_us>
			stepper->CurrentPulse--;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60da      	str	r2, [r3, #12]
		}
		return STEPPER_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <runToTarget+0xa4>
	}
	return STEPPER_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <TCA9548A_Init>:
 * 			     the configuration information for the specified I2C.
 * @param address Target BH1750 device address. The device 7 bits address value in datasheet must
 *                be shifted to the left before calling by I2C function.
 * @retval TCA9548A Status
 */
TCA9548A_STATUS TCA9548A_Init(TCA9548A_HandleTypeDef *htca9548a, I2C_HandleTypeDef *hi2c, uint16_t address) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
    htca9548a->I2C_channel = hi2c;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	601a      	str	r2, [r3, #0]
    htca9548a->Address = address;
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	711a      	strb	r2, [r3, #4]

    if (TCA9548A_OK == TCA9548A_DisableAllChannel(htca9548a)) {
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f831 	bl	80017f0 <TCA9548A_DisableAllChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <TCA9548A_Init+0x2c>
        return TCA9548A_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <TCA9548A_Init+0x2e>
    }
    return TCA9548A_ERROR;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <TCA9548A_SelectSingleChannel>:
 * @brief Initialize
 * @param htca9548a Pointer to a TCA9548A_HandleTypeDef
 * @param channel From 0 to 7, is channel 0 to channel 7 on TCA9548A
 * @retval TCA9548A Status
 */
TCA9548A_STATUS TCA9548A_SelectSingleChannel(TCA9548A_HandleTypeDef *htca9548a, uint8_t channel) {
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af02      	add	r7, sp, #8
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70fb      	strb	r3, [r7, #3]
    if (channel > 7) {
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d901      	bls.n	80017b8 <TCA9548A_SelectSingleChannel+0x16>
        return TCA9548A_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e017      	b.n	80017e8 <TCA9548A_SelectSingleChannel+0x46>
    }
    uint8_t tmp = (1 << channel);
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2201      	movs	r2, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(htca9548a->I2C_channel, htca9548a->Address, &tmp, 1, 10)) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	b299      	uxth	r1, r3
 80017ce:	f107 020f 	add.w	r2, r7, #15
 80017d2:	230a      	movs	r3, #10
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	f001 fdc0 	bl	800335c <HAL_I2C_Master_Transmit>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <TCA9548A_SelectSingleChannel+0x44>
        return TCA9548A_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <TCA9548A_SelectSingleChannel+0x46>
    }
    return TCA9548A_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <TCA9548A_DisableAllChannel>:
    }
    return 0;
}


TCA9548A_STATUS TCA9548A_DisableAllChannel(TCA9548A_HandleTypeDef *htca9548a) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
    uint8_t tmp = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
    if (HAL_OK == HAL_I2C_Master_Transmit(htca9548a->I2C_channel, htca9548a->Address, &tmp, 1, 10)) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	b299      	uxth	r1, r3
 8001806:	f107 020f 	add.w	r2, r7, #15
 800180a:	230a      	movs	r3, #10
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	f001 fda4 	bl	800335c <HAL_I2C_Master_Transmit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <TCA9548A_DisableAllChannel+0x2e>
        return TCA9548A_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <TCA9548A_DisableAllChannel+0x30>
    }
    return TCA9548A_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <userStepperInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Init Stepper, Sensor, TCA, PCA
void userStepperInit() {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af02      	add	r7, sp, #8
	StepperInit(&Step0, GPIOA, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
 800182e:	2300      	movs	r3, #0
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2320      	movs	r3, #32
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <userStepperInit+0x50>)
 8001840:	480e      	ldr	r0, [pc, #56]	; (800187c <userStepperInit+0x54>)
 8001842:	f7ff febb 	bl	80015bc <StepperInit>
	StepperInit(&Step1, GPIOC, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
 8001846:	2300      	movs	r3, #0
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2320      	movs	r3, #32
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <userStepperInit+0x58>)
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <userStepperInit+0x5c>)
 800185a:	f7ff feaf 	bl	80015bc <StepperInit>
	StepperInit(&Step2, GPIOC, GPIO_PIN_7, GPIO_PIN_6, 32, 0);
 800185e:	2300      	movs	r3, #0
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2320      	movs	r3, #32
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	4905      	ldr	r1, [pc, #20]	; (8001880 <userStepperInit+0x58>)
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <userStepperInit+0x60>)
 800186e:	f7ff fea5 	bl	80015bc <StepperInit>
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40020000 	.word	0x40020000
 800187c:	20000434 	.word	0x20000434
 8001880:	40020800 	.word	0x40020800
 8001884:	200003ec 	.word	0x200003ec
 8001888:	20000420 	.word	0x20000420

0800188c <userSensorInit>:

void userSensorInit() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	TCA9548A_Init(&i2cHub, &hi2c1, TCA_ADDRESS);
 8001892:	22e0      	movs	r2, #224	; 0xe0
 8001894:	4917      	ldr	r1, [pc, #92]	; (80018f4 <userSensorInit+0x68>)
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <userSensorInit+0x6c>)
 8001898:	f7ff ff68 	bl	800176c <TCA9548A_Init>
	for (uint8_t i = 0; i < 4; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	e020      	b.n	80018e4 <userSensorInit+0x58>
		TCA9548A_SelectSingleChannel(&i2cHub, i);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4814      	ldr	r0, [pc, #80]	; (80018f8 <userSensorInit+0x6c>)
 80018a8:	f7ff ff7b 	bl	80017a2 <TCA9548A_SelectSingleChannel>
		BH1750_Init(&sensor[i], &hi2c1, BH1750_ADDRESS_LOW);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <userSensorInit+0x70>)
 80018b2:	4413      	add	r3, r2
 80018b4:	2246      	movs	r2, #70	; 0x46
 80018b6:	490f      	ldr	r1, [pc, #60]	; (80018f4 <userSensorInit+0x68>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb9f 	bl	8000ffc <BH1750_Init>
		BH1750_PowerState(&sensor[i], 1);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <userSensorInit+0x70>)
 80018c4:	4413      	add	r3, r2
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fbd3 	bl	8001074 <BH1750_PowerState>
		BH1750_SetMode(&sensor[i], CONTINUOUS_H_RES_MODE);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <userSensorInit+0x70>)
 80018d4:	4413      	add	r3, r2
 80018d6:	2110      	movs	r1, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc3b 	bl	8001154 <BH1750_SetMode>
	for (uint8_t i = 0; i < 4; i++) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	3301      	adds	r3, #1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d9db      	bls.n	80018a2 <userSensorInit+0x16>
	}
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000334 	.word	0x20000334
 80018f8:	200004fc 	.word	0x200004fc
 80018fc:	20000448 	.word	0x20000448

08001900 <userPCAInit>:

void userPCAInit() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	PCA9685_Init(&pcaHub, &hi2c2, PCA9685_I2C_ADDRESS, 0);
 8001904:	2300      	movs	r3, #0
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <userPCAInit+0x28>)
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <userPCAInit+0x2c>)
 800190c:	f7ff fcae 	bl	800126c <PCA9685_Init>
	PCA9685_SetOscillatorFrequency(&pcaHub, 27000000);
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <userPCAInit+0x30>)
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <userPCAInit+0x2c>)
 8001914:	f7ff fdd8 	bl	80014c8 <PCA9685_SetOscillatorFrequency>
	PCA9685_SetPWMFreq(&pcaHub, 1600);
 8001918:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001934 <userPCAInit+0x34>
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <userPCAInit+0x2c>)
 800191e:	f7ff fd25 	bl	800136c <PCA9685_SetPWMFreq>
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000388 	.word	0x20000388
 800192c:	20000400 	.word	0x20000400
 8001930:	019bfcc0 	.word	0x019bfcc0
 8001934:	44c80000 	.word	0x44c80000

08001938 <ManualControl>:


// CHOOSE THE MANUAL CONTROL PROGRAM (It's still under UART interrupt function)
void ManualControl() {
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
	switch (dataReceived[1]) {
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <ManualControl+0x98>)
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	3b41      	subs	r3, #65	; 0x41
 8001942:	2b13      	cmp	r3, #19
 8001944:	d83e      	bhi.n	80019c4 <ManualControl+0x8c>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <ManualControl+0x14>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019ad 	.word	0x080019ad
 8001950:	080019c5 	.word	0x080019c5
 8001954:	080019c5 	.word	0x080019c5
 8001958:	080019c5 	.word	0x080019c5
 800195c:	080019c5 	.word	0x080019c5
 8001960:	080019c5 	.word	0x080019c5
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c5 	.word	0x080019c5
 800196c:	080019a5 	.word	0x080019a5
 8001970:	080019c5 	.word	0x080019c5
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019bd 	.word	0x080019bd
 800197c:	080019c5 	.word	0x080019c5
 8001980:	080019c5 	.word	0x080019c5
 8001984:	080019c5 	.word	0x080019c5
 8001988:	080019c5 	.word	0x080019c5
 800198c:	080019c5 	.word	0x080019c5
 8001990:	080019c5 	.word	0x080019c5
 8001994:	080019c5 	.word	0x080019c5
 8001998:	0800199d 	.word	0x0800199d
	case 'T':
		program = TEST_UART;
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <ManualControl+0x9c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
		break;
 80019a2:	e00f      	b.n	80019c4 <ManualControl+0x8c>
	case 'I':
		program = SET_INIT_COOR;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <ManualControl+0x9c>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
		break;
 80019aa:	e00b      	b.n	80019c4 <ManualControl+0x8c>
	case 'A':
		program = SET_TARGET_COOR;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <ManualControl+0x9c>)
 80019ae:	2203      	movs	r2, #3
 80019b0:	701a      	strb	r2, [r3, #0]
		break;
 80019b2:	e007      	b.n	80019c4 <ManualControl+0x8c>
	case 'G':
		program = GET_SENSOR;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <ManualControl+0x9c>)
 80019b6:	2205      	movs	r2, #5
 80019b8:	701a      	strb	r2, [r3, #0]
		break;
 80019ba:	e003      	b.n	80019c4 <ManualControl+0x8c>
	case 'L':
		program = CONTROL_LED;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <ManualControl+0x9c>)
 80019be:	2206      	movs	r2, #6
 80019c0:	701a      	strb	r2, [r3, #0]
		break;
 80019c2:	bf00      	nop
	}
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200003e0 	.word	0x200003e0
 80019d4:	200002f8 	.word	0x200002f8

080019d8 <AutoControl>:

// CHOOSE THE AUTO CONTROL PROGRAM (It's still under UART interrupt function)
void AutoControl() {
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_UART_RxCpltCallback>:

// Select PROGRAM
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_UART_RxCpltCallback+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d110      	bne.n	8001a1e <HAL_UART_RxCpltCallback+0x36>
		switch (dataReceived[0]) {
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_UART_RxCpltCallback+0x44>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b41      	cmp	r3, #65	; 0x41
 8001a02:	d004      	beq.n	8001a0e <HAL_UART_RxCpltCallback+0x26>
 8001a04:	2b4d      	cmp	r3, #77	; 0x4d
 8001a06:	d105      	bne.n	8001a14 <HAL_UART_RxCpltCallback+0x2c>
		case 'M':
		  ManualControl();
 8001a08:	f7ff ff96 	bl	8001938 <ManualControl>
		  break;
 8001a0c:	e002      	b.n	8001a14 <HAL_UART_RxCpltCallback+0x2c>
		case 'A':
		  AutoControl();
 8001a0e:	f7ff ffe3 	bl	80019d8 <AutoControl>
		  break;
 8001a12:	bf00      	nop
		}
		HAL_UART_Receive_IT(huart, dataReceived, SIZE_DATA);
 8001a14:	220b      	movs	r2, #11
 8001a16:	4905      	ldr	r1, [pc, #20]	; (8001a2c <HAL_UART_RxCpltCallback+0x44>)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f003 ffd8 	bl	80059ce <HAL_UART_Receive_IT>
	}

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200004b0 	.word	0x200004b0
 8001a2c:	200003e0 	.word	0x200003e0

08001a30 <delay_us>:

// Additions function
void delay_us(uint16_t us)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <delay_us+0x30>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001a42:	bf00      	nop
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <delay_us+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8f8      	bhi.n	8001a44 <delay_us+0x14>
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000468 	.word	0x20000468

08001a64 <DecryptData>:

void DecryptData() {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	info[0] = (dataReceived[2] - '0') * 100 + (dataReceived[3] - '0') * 10 + (dataReceived[4]  - '0');
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <DecryptData+0xdc>)
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	3b30      	subs	r3, #48	; 0x30
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	0091      	lsls	r1, r2, #2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <DecryptData+0xdc>)
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	3b30      	subs	r3, #48	; 0x30
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	0089      	lsls	r1, r1, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <DecryptData+0xdc>)
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <DecryptData+0xe0>)
 8001aaa:	801a      	strh	r2, [r3, #0]
	info[1] = (dataReceived[5] - '0') * 100 + (dataReceived[6] - '0') * 10 + (dataReceived[7]  - '0');
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <DecryptData+0xdc>)
 8001aae:	795b      	ldrb	r3, [r3, #5]
 8001ab0:	3b30      	subs	r3, #48	; 0x30
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	0091      	lsls	r1, r2, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <DecryptData+0xdc>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	3b30      	subs	r3, #48	; 0x30
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	0089      	lsls	r1, r1, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <DecryptData+0xdc>)
 8001ae0:	79db      	ldrb	r3, [r3, #7]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b30      	subs	r3, #48	; 0x30
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <DecryptData+0xe0>)
 8001aee:	805a      	strh	r2, [r3, #2]
	info[2] = (dataReceived[8] - '0') * 100 + (dataReceived[9] - '0') * 10 + (dataReceived[10] - '0');
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <DecryptData+0xdc>)
 8001af2:	7a1b      	ldrb	r3, [r3, #8]
 8001af4:	3b30      	subs	r3, #48	; 0x30
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	0091      	lsls	r1, r2, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <DecryptData+0xdc>)
 8001b0e:	7a5b      	ldrb	r3, [r3, #9]
 8001b10:	3b30      	subs	r3, #48	; 0x30
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	0089      	lsls	r1, r1, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <DecryptData+0xdc>)
 8001b24:	7a9b      	ldrb	r3, [r3, #10]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b30      	subs	r3, #48	; 0x30
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <DecryptData+0xe0>)
 8001b32:	809a      	strh	r2, [r3, #4]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200003e0 	.word	0x200003e0
 8001b44:	20000310 	.word	0x20000310

08001b48 <keepMotorSafe>:

// Hold 3 board to avoid collision
void keepMotorSafe() {
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
	uint32_t X0, X1, X2;
	X0 = Step0.TargetPulse;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <keepMotorSafe+0xc0>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	60fb      	str	r3, [r7, #12]
	X1 = Step1.TargetPulse;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <keepMotorSafe+0xc4>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	60bb      	str	r3, [r7, #8]
	X2 = Step2.TargetPulse;
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <keepMotorSafe+0xc8>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	607b      	str	r3, [r7, #4]

	// Step 1
	if (X1 > (STEP1_MAX * FACTOR))			X1 = STEP1_MAX * FACTOR;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f24e 0260 	movw	r2, #57440	; 0xe060
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d902      	bls.n	8001b70 <keepMotorSafe+0x28>
 8001b6a:	f24e 0360 	movw	r3, #57440	; 0xe060
 8001b6e:	60bb      	str	r3, [r7, #8]
	if (X1 < (STEP1_MIN * FACTOR))			X1 = STEP1_MIN * FACTOR;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f244 525f 	movw	r2, #17759	; 0x455f
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d802      	bhi.n	8001b80 <keepMotorSafe+0x38>
 8001b7a:	f244 5360 	movw	r3, #17760	; 0x4560
 8001b7e:	60bb      	str	r3, [r7, #8]

	// Step 2
	if (X2 > (STEP2_MAX * FACTOR)) 			X2 = STEP2_MAX * FACTOR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <keepMotorSafe+0xcc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <keepMotorSafe+0x44>
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <keepMotorSafe+0xcc>)
 8001b8a:	607b      	str	r3, [r7, #4]
	if (X2 < (STEP2_MIN * FACTOR))			X2 = STEP2_MIN * FACTOR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f248 52bf 	movw	r2, #34239	; 0x85bf
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d802      	bhi.n	8001b9c <keepMotorSafe+0x54>
 8001b96:	f248 53c0 	movw	r3, #34240	; 0x85c0
 8001b9a:	607b      	str	r3, [r7, #4]
	if (X2 < (X1 + SAFE_DISTANCE * FACTOR)) X2 = X1 + SAFE_DISTANCE * FACTOR;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ba2:	3360      	adds	r3, #96	; 0x60
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d204      	bcs.n	8001bb4 <keepMotorSafe+0x6c>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001bb0:	3360      	adds	r3, #96	; 0x60
 8001bb2:	607b      	str	r3, [r7, #4]

	// Step0
	if (X0 > (STEP0_MAX * FACTOR)) 			X0 = STEP0_MAX * FACTOR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001bba:	d902      	bls.n	8001bc2 <keepMotorSafe+0x7a>
 8001bbc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bc0:	60fb      	str	r3, [r7, #12]
	if (X0 < (STEP0_MIN * FACTOR)) 			X0 = STEP0_MIN * FACTOR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001bc8:	d202      	bcs.n	8001bd0 <keepMotorSafe+0x88>
 8001bca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001bce:	60fb      	str	r3, [r7, #12]
	if (X0 > (X1 - SAFE_DISTANCE * FACTOR)) X0 = X1 - SAFE_DISTANCE * FACTOR;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001bd6:	3b60      	subs	r3, #96	; 0x60
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d904      	bls.n	8001be8 <keepMotorSafe+0xa0>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001be4:	3b60      	subs	r3, #96	; 0x60
 8001be6:	60fb      	str	r3, [r7, #12]

	Step0.TargetPulse = X0;
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <keepMotorSafe+0xc0>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6113      	str	r3, [r2, #16]
	Step1.TargetPulse = X1;
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <keepMotorSafe+0xc4>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	6113      	str	r3, [r2, #16]
	Step2.TargetPulse = X2;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <keepMotorSafe+0xc8>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6113      	str	r3, [r2, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000434 	.word	0x20000434
 8001c0c:	200003ec 	.word	0x200003ec
 8001c10:	20000420 	.word	0x20000420
 8001c14:	000120c0 	.word	0x000120c0

08001c18 <sendUARTaInt>:

void sendUARTaInt(uint16_t num) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	char result[4];
	sprintf(result, "%d", num);
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4908      	ldr	r1, [pc, #32]	; (8001c4c <sendUARTaInt+0x34>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fb3e 	bl	80072ac <siprintf>
	result[3] = '\n';
 8001c30:	230a      	movs	r3, #10
 8001c32:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 1000);
 8001c34:	f107 010c 	add.w	r1, r7, #12
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4804      	ldr	r0, [pc, #16]	; (8001c50 <sendUARTaInt+0x38>)
 8001c40:	f003 fe33 	bl	80058aa <HAL_UART_Transmit>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	0800ae10 	.word	0x0800ae10
 8001c50:	200004b0 	.word	0x200004b0

08001c54 <sendInfoPWM>:

void sendInfoPWM() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
	uint16_t LEDOnTime;
	for (uint8_t channel = 0; channel < 6; channel++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e035      	b.n	8001ccc <sendInfoPWM+0x78>
		channelON[channel] = DELAY_LED - 1;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <sendInfoPWM+0x88>)
 8001c64:	f240 1199 	movw	r1, #409	; 0x199
 8001c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		LEDOnTime = intensity[channel / 2] * 4096 / 1000;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <sendInfoPWM+0x8c>)
 8001c76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c7a:	031b      	lsls	r3, r3, #12
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <sendInfoPWM+0x90>)
 8001c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c82:	1192      	asrs	r2, r2, #6
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	80bb      	strh	r3, [r7, #4]
		channelOFF[channel]  = (LEDOnTime + DELAY_LED > 4096
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	f640 6266 	movw	r2, #3686	; 0xe66
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d904      	bls.n	8001c9e <sendInfoPWM+0x4a>
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	f6a3 6366 	subw	r3, r3, #3686	; 0xe66
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	e003      	b.n	8001ca6 <sendInfoPWM+0x52>
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	f203 1399 	addw	r3, r3, #409	; 0x199
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	490f      	ldr	r1, [pc, #60]	; (8001ce8 <sendInfoPWM+0x94>)
 8001caa:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
								? LEDOnTime + DELAY_LED - 4096
								: LEDOnTime + DELAY_LED - 1);
		PCA9685_SetPWM(&pcaHub, channel, channelON[channel], channelOFF[channel]);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <sendInfoPWM+0x88>)
 8001cb2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	490b      	ldr	r1, [pc, #44]	; (8001ce8 <sendInfoPWM+0x94>)
 8001cba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cbe:	79f9      	ldrb	r1, [r7, #7]
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <sendInfoPWM+0x98>)
 8001cc2:	f7ff fc11 	bl	80014e8 <PCA9685_SetPWM>
	for (uint8_t channel = 0; channel < 6; channel++) {
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d9c6      	bls.n	8001c60 <sendInfoPWM+0xc>
	}
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000318 	.word	0x20000318
 8001ce0:	200004f4 	.word	0x200004f4
 8001ce4:	10624dd3 	.word	0x10624dd3
 8001ce8:	20000408 	.word	0x20000408
 8001cec:	20000400 	.word	0x20000400

08001cf0 <TestUART>:

// THE MAIN PROGRAMS
void TestUART() { // DONE
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
 8001cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf8:	2237      	movs	r2, #55	; 0x37
 8001cfa:	4904      	ldr	r1, [pc, #16]	; (8001d0c <TestUART+0x1c>)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <TestUART+0x20>)
 8001cfe:	f003 fdd4 	bl	80058aa <HAL_UART_Transmit>
	program = IDLE;
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <TestUART+0x24>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	200004b0 	.word	0x200004b0
 8001d14:	200002f8 	.word	0x200002f8

08001d18 <SetInitCoorStepper>:

void SetInitCoorStepper() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, InitStepperMessage, sizeof(InitStepperMessage), 1000);
 8001d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d20:	2228      	movs	r2, #40	; 0x28
 8001d22:	4921      	ldr	r1, [pc, #132]	; (8001da8 <SetInitCoorStepper+0x90>)
 8001d24:	4821      	ldr	r0, [pc, #132]	; (8001dac <SetInitCoorStepper+0x94>)
 8001d26:	f003 fdc0 	bl	80058aa <HAL_UART_Transmit>
	DecryptData();
 8001d2a:	f7ff fe9b 	bl	8001a64 <DecryptData>
	setCurrentPos(&Step0, info[0]);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <SetInitCoorStepper+0x98>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <SetInitCoorStepper+0x9c>)
 8001d36:	f7ff fc6f 	bl	8001618 <setCurrentPos>
	setCurrentPos(&Step1, info[1]);
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <SetInitCoorStepper+0x98>)
 8001d3c:	885b      	ldrh	r3, [r3, #2]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481d      	ldr	r0, [pc, #116]	; (8001db8 <SetInitCoorStepper+0xa0>)
 8001d42:	f7ff fc69 	bl	8001618 <setCurrentPos>
	setCurrentPos(&Step2, info[2]);
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <SetInitCoorStepper+0x98>)
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	481b      	ldr	r0, [pc, #108]	; (8001dbc <SetInitCoorStepper+0xa4>)
 8001d4e:	f7ff fc63 	bl	8001618 <setCurrentPos>
	sendUARTaInt(Step0.CurrentPulse / FACTOR);
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <SetInitCoorStepper+0x9c>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <SetInitCoorStepper+0xa8>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	09db      	lsrs	r3, r3, #7
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff59 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(Step1.CurrentPulse / FACTOR);
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <SetInitCoorStepper+0xa0>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <SetInitCoorStepper+0xa8>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	09db      	lsrs	r3, r3, #7
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff4f 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(Step2.CurrentPulse / FACTOR);
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <SetInitCoorStepper+0xa4>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <SetInitCoorStepper+0xa8>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	09db      	lsrs	r3, r3, #7
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff45 	bl	8001c18 <sendUARTaInt>
	HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	2208      	movs	r2, #8
 8001d94:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <SetInitCoorStepper+0xac>)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <SetInitCoorStepper+0x94>)
 8001d98:	f003 fd87 	bl	80058aa <HAL_UART_Transmit>
	program = IDLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <SetInitCoorStepper+0xb0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000038 	.word	0x20000038
 8001dac:	200004b0 	.word	0x200004b0
 8001db0:	20000310 	.word	0x20000310
 8001db4:	20000434 	.word	0x20000434
 8001db8:	200003ec 	.word	0x200003ec
 8001dbc:	20000420 	.word	0x20000420
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	20000088 	.word	0x20000088
 8001dc8:	200002f8 	.word	0x200002f8

08001dcc <SetTargetCoorStepper>:

void SetTargetCoorStepper() {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, TargetStepperMessage, sizeof(TargetStepperMessage), 1000);
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	2227      	movs	r2, #39	; 0x27
 8001dd6:	4925      	ldr	r1, [pc, #148]	; (8001e6c <SetTargetCoorStepper+0xa0>)
 8001dd8:	4825      	ldr	r0, [pc, #148]	; (8001e70 <SetTargetCoorStepper+0xa4>)
 8001dda:	f003 fd66 	bl	80058aa <HAL_UART_Transmit>
	DecryptData();
 8001dde:	f7ff fe41 	bl	8001a64 <DecryptData>
	setTargetPos(&Step0, info[0]);
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <SetTargetCoorStepper+0xa8>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <SetTargetCoorStepper+0xac>)
 8001dea:	f7ff fc32 	bl	8001652 <setTargetPos>
	setTargetPos(&Step1, info[1]);
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <SetTargetCoorStepper+0xa8>)
 8001df0:	885b      	ldrh	r3, [r3, #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4821      	ldr	r0, [pc, #132]	; (8001e7c <SetTargetCoorStepper+0xb0>)
 8001df6:	f7ff fc2c 	bl	8001652 <setTargetPos>
	setTargetPos(&Step2, info[2]);
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <SetTargetCoorStepper+0xa8>)
 8001dfc:	889b      	ldrh	r3, [r3, #4]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481f      	ldr	r0, [pc, #124]	; (8001e80 <SetTargetCoorStepper+0xb4>)
 8001e02:	f7ff fc26 	bl	8001652 <setTargetPos>
	keepMotorSafe();
 8001e06:	f7ff fe9f 	bl	8001b48 <keepMotorSafe>
	sendUARTaInt(Step0.TargetPulse / FACTOR);
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <SetTargetCoorStepper+0xac>)
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <SetTargetCoorStepper+0xb8>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	09db      	lsrs	r3, r3, #7
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fefd 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(Step1.TargetPulse / FACTOR);
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <SetTargetCoorStepper+0xb0>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <SetTargetCoorStepper+0xb8>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	09db      	lsrs	r3, r3, #7
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fef3 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(Step2.TargetPulse / FACTOR);
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <SetTargetCoorStepper+0xb4>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <SetTargetCoorStepper+0xb8>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	09db      	lsrs	r3, r3, #7
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fee9 	bl	8001c18 <sendUARTaInt>
	HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <SetTargetCoorStepper+0xbc>)
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <SetTargetCoorStepper+0xa4>)
 8001e50:	f003 fd2b 	bl	80058aa <HAL_UART_Transmit>
	program = RUN_STEPPER;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <SetTargetCoorStepper+0xc0>)
 8001e56:	2204      	movs	r2, #4
 8001e58:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, RunStepperMessage, sizeof(RunStepperMessage), 1000);
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	222b      	movs	r2, #43	; 0x2b
 8001e60:	490b      	ldr	r1, [pc, #44]	; (8001e90 <SetTargetCoorStepper+0xc4>)
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <SetTargetCoorStepper+0xa4>)
 8001e64:	f003 fd21 	bl	80058aa <HAL_UART_Transmit>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000060 	.word	0x20000060
 8001e70:	200004b0 	.word	0x200004b0
 8001e74:	20000310 	.word	0x20000310
 8001e78:	20000434 	.word	0x20000434
 8001e7c:	200003ec 	.word	0x200003ec
 8001e80:	20000420 	.word	0x20000420
 8001e84:	cccccccd 	.word	0xcccccccd
 8001e88:	20000088 	.word	0x20000088
 8001e8c:	200002f8 	.word	0x200002f8
 8001e90:	20000090 	.word	0x20000090

08001e94 <RunStepper>:

void RunStepper() {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step0) == STEPPER_ERROR) flag = 1;
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <RunStepper+0x5c>)
 8001ea0:	f7ff fc0e 	bl	80016c0 <runToTarget>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <RunStepper+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step1) == STEPPER_ERROR) flag = 1;
 8001eae:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <RunStepper+0x60>)
 8001eb0:	f7ff fc06 	bl	80016c0 <runToTarget>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <RunStepper+0x2a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	71fb      	strb	r3, [r7, #7]
	if (runToTarget(&Step2) == STEPPER_ERROR) flag = 1;
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <RunStepper+0x64>)
 8001ec0:	f7ff fbfe 	bl	80016c0 <runToTarget>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <RunStepper+0x3a>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	71fb      	strb	r3, [r7, #7]
	if (flag == 0) {
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <RunStepper+0x54>
		HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
 8001ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <RunStepper+0x68>)
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <RunStepper+0x6c>)
 8001ede:	f003 fce4 	bl	80058aa <HAL_UART_Transmit>
		program = IDLE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <RunStepper+0x70>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000434 	.word	0x20000434
 8001ef4:	200003ec 	.word	0x200003ec
 8001ef8:	20000420 	.word	0x20000420
 8001efc:	20000088 	.word	0x20000088
 8001f00:	200004b0 	.word	0x200004b0
 8001f04:	200002f8 	.word	0x200002f8

08001f08 <GetSensor>:

void GetSensor() {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
	HAL_UART_Transmit(&huart2, GetSensorMessage, sizeof(GetSensorMessage), 1000);
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	221b      	movs	r2, #27
 8001f14:	4924      	ldr	r1, [pc, #144]	; (8001fa8 <GetSensor+0xa0>)
 8001f16:	4825      	ldr	r0, [pc, #148]	; (8001fac <GetSensor+0xa4>)
 8001f18:	f003 fcc7 	bl	80058aa <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 4; i++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	e038      	b.n	8001f94 <GetSensor+0x8c>
		TCA9548A_SelectSingleChannel(&i2cHub, i);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <GetSensor+0xa8>)
 8001f28:	f7ff fc3b 	bl	80017a2 <TCA9548A_SelectSingleChannel>
		BH1750_ReadLight(&sensor[i], &dataSensor[i]);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <GetSensor+0xac>)
 8001f32:	441a      	add	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	491f      	ldr	r1, [pc, #124]	; (8001fb8 <GetSensor+0xb0>)
 8001f3a:	440b      	add	r3, r1
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f7ff f93a 	bl	80011b8 <BH1750_ReadLight>

		ret = snprintf(dataSensorMessage, sizeof(dataSensorMessage), "%f", dataSensor[i]);
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <GetSensor+0xb0>)
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb02 	bl	8000558 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	e9cd 2300 	strd	r2, r3, [sp]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <GetSensor+0xb4>)
 8001f5e:	210a      	movs	r1, #10
 8001f60:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <GetSensor+0xb8>)
 8001f62:	f005 f96f 	bl	8007244 <sniprintf>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <GetSensor+0xbc>)
 8001f6c:	701a      	strb	r2, [r3, #0]
		if (i < 3) dataSensorMessage[9] = ' ';
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d803      	bhi.n	8001f7c <GetSensor+0x74>
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <GetSensor+0xb8>)
 8001f76:	2220      	movs	r2, #32
 8001f78:	725a      	strb	r2, [r3, #9]
 8001f7a:	e002      	b.n	8001f82 <GetSensor+0x7a>
		else dataSensorMessage[9] = '\n';
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <GetSensor+0xb8>)
 8001f7e:	220a      	movs	r2, #10
 8001f80:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit(&huart2, (uint8_t *)dataSensorMessage, 10, 10);
 8001f82:	230a      	movs	r3, #10
 8001f84:	220a      	movs	r2, #10
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <GetSensor+0xb8>)
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <GetSensor+0xa4>)
 8001f8a:	f003 fc8e 	bl	80058aa <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 4; i++) {
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	3301      	adds	r3, #1
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d9c3      	bls.n	8001f22 <GetSensor+0x1a>
	}
	program = IDLE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <GetSensor+0xc0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200000bc 	.word	0x200000bc
 8001fac:	200004b0 	.word	0x200004b0
 8001fb0:	200004fc 	.word	0x200004fc
 8001fb4:	20000448 	.word	0x20000448
 8001fb8:	20000324 	.word	0x20000324
 8001fbc:	0800ae14 	.word	0x0800ae14
 8001fc0:	20000414 	.word	0x20000414
 8001fc4:	200004fa 	.word	0x200004fa
 8001fc8:	200002f8 	.word	0x200002f8

08001fcc <ControlLED>:

void ControlLED() {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, ControlLEDMessage, sizeof(ControlLEDMessage), 1000);
 8001fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd4:	2224      	movs	r2, #36	; 0x24
 8001fd6:	4917      	ldr	r1, [pc, #92]	; (8002034 <ControlLED+0x68>)
 8001fd8:	4817      	ldr	r0, [pc, #92]	; (8002038 <ControlLED+0x6c>)
 8001fda:	f003 fc66 	bl	80058aa <HAL_UART_Transmit>
	DecryptData();
 8001fde:	f7ff fd41 	bl	8001a64 <DecryptData>
	intensity[0] = info[0];
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <ControlLED+0x70>)
 8001fe4:	881a      	ldrh	r2, [r3, #0]
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <ControlLED+0x74>)
 8001fe8:	801a      	strh	r2, [r3, #0]
	intensity[1] = info[1];
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <ControlLED+0x70>)
 8001fec:	885a      	ldrh	r2, [r3, #2]
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <ControlLED+0x74>)
 8001ff0:	805a      	strh	r2, [r3, #2]
	intensity[2] = info[2];
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <ControlLED+0x70>)
 8001ff4:	889a      	ldrh	r2, [r3, #4]
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <ControlLED+0x74>)
 8001ff8:	809a      	strh	r2, [r3, #4]
	sendUARTaInt(intensity[0]);
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <ControlLED+0x74>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe0a 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(intensity[1]);
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <ControlLED+0x74>)
 8002006:	885b      	ldrh	r3, [r3, #2]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe05 	bl	8001c18 <sendUARTaInt>
	sendUARTaInt(intensity[2]);
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <ControlLED+0x74>)
 8002010:	889b      	ldrh	r3, [r3, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe00 	bl	8001c18 <sendUARTaInt>
	sendInfoPWM();
 8002018:	f7ff fe1c 	bl	8001c54 <sendInfoPWM>
	HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
 800201c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002020:	2208      	movs	r2, #8
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <ControlLED+0x78>)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <ControlLED+0x6c>)
 8002026:	f003 fc40 	bl	80058aa <HAL_UART_Transmit>
	program = IDLE;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <ControlLED+0x7c>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200000d8 	.word	0x200000d8
 8002038:	200004b0 	.word	0x200004b0
 800203c:	20000310 	.word	0x20000310
 8002040:	200004f4 	.word	0x200004f4
 8002044:	20000088 	.word	0x20000088
 8002048:	200002f8 	.word	0x200002f8

0800204c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002050:	f000 fc68 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002054:	f000 f854 	bl	8002100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002058:	f000 f98c 	bl	8002374 <MX_GPIO_Init>
  MX_I2C1_Init();
 800205c:	f000 f8b8 	bl	80021d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002060:	f000 f8e4 	bl	800222c <MX_I2C2_Init>
  MX_TIM2_Init();
 8002064:	f000 f910 	bl	8002288 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002068:	f000 f95a 	bl	8002320 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800206c:	481f      	ldr	r0, [pc, #124]	; (80020ec <main+0xa0>)
 800206e:	f003 f929 	bl	80052c4 <HAL_TIM_Base_Start>

  HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	2237      	movs	r2, #55	; 0x37
 8002078:	491d      	ldr	r1, [pc, #116]	; (80020f0 <main+0xa4>)
 800207a:	481e      	ldr	r0, [pc, #120]	; (80020f4 <main+0xa8>)
 800207c:	f003 fc15 	bl	80058aa <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, dataReceived, SIZE_DATA);
 8002080:	220b      	movs	r2, #11
 8002082:	491d      	ldr	r1, [pc, #116]	; (80020f8 <main+0xac>)
 8002084:	481b      	ldr	r0, [pc, #108]	; (80020f4 <main+0xa8>)
 8002086:	f003 fca2 	bl	80059ce <HAL_UART_Receive_IT>

  // User Init
  userStepperInit();
 800208a:	f7ff fbcd 	bl	8001828 <userStepperInit>
  userSensorInit();
 800208e:	f7ff fbfd 	bl	800188c <userSensorInit>
  userPCAInit();
 8002092:	f7ff fc35 	bl	8001900 <userPCAInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (program == TEST_UART) {
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <main+0xb0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <main+0x58>
		  TestUART();
 800209e:	f7ff fe27 	bl	8001cf0 <TestUART>
 80020a2:	e7f8      	b.n	8002096 <main+0x4a>
	  } else if (program == SET_INIT_COOR) {
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <main+0xb0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d102      	bne.n	80020b2 <main+0x66>
		  SetInitCoorStepper();
 80020ac:	f7ff fe34 	bl	8001d18 <SetInitCoorStepper>
 80020b0:	e7f1      	b.n	8002096 <main+0x4a>
	  } else if (program == SET_TARGET_COOR) {
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <main+0xb0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d102      	bne.n	80020c0 <main+0x74>
		  SetTargetCoorStepper();
 80020ba:	f7ff fe87 	bl	8001dcc <SetTargetCoorStepper>
 80020be:	e7ea      	b.n	8002096 <main+0x4a>
	  } else if (program == RUN_STEPPER) {
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <main+0xb0>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d102      	bne.n	80020ce <main+0x82>
		  RunStepper();
 80020c8:	f7ff fee4 	bl	8001e94 <RunStepper>
 80020cc:	e7e3      	b.n	8002096 <main+0x4a>
	  } else if (program == GET_SENSOR) {
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <main+0xb0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d102      	bne.n	80020dc <main+0x90>
		  GetSensor();
 80020d6:	f7ff ff17 	bl	8001f08 <GetSensor>
 80020da:	e7dc      	b.n	8002096 <main+0x4a>
	  } else if (program == CONTROL_LED) {
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <main+0xb0>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d1d8      	bne.n	8002096 <main+0x4a>
		  ControlLED();
 80020e4:	f7ff ff72 	bl	8001fcc <ControlLED>
	  if (program == TEST_UART) {
 80020e8:	e7d5      	b.n	8002096 <main+0x4a>
 80020ea:	bf00      	nop
 80020ec:	20000468 	.word	0x20000468
 80020f0:	20000000 	.word	0x20000000
 80020f4:	200004b0 	.word	0x200004b0
 80020f8:	200003e0 	.word	0x200003e0
 80020fc:	200002f8 	.word	0x200002f8

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b094      	sub	sp, #80	; 0x50
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fa10 	bl	8006534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <SystemClock_Config+0xc8>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <SystemClock_Config+0xc8>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <SystemClock_Config+0xc8>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <SystemClock_Config+0xcc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a20      	ldr	r2, [pc, #128]	; (80021cc <SystemClock_Config+0xcc>)
 800214a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <SystemClock_Config+0xcc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800215c:	2301      	movs	r3, #1
 800215e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002166:	2302      	movs	r3, #2
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002170:	2304      	movs	r3, #4
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002174:	2332      	movs	r3, #50	; 0x32
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002178:	2302      	movs	r3, #2
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800217c:	2304      	movs	r3, #4
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002180:	f107 0320 	add.w	r3, r7, #32
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fbd9 	bl	800493c <HAL_RCC_OscConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002190:	f000 f968 	bl	8002464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002194:	230f      	movs	r3, #15
 8002196:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fe3c 	bl	8004e2c <HAL_RCC_ClockConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80021ba:	f000 f953 	bl	8002464 <Error_Handler>
  }
}
 80021be:	bf00      	nop
 80021c0:	3750      	adds	r7, #80	; 0x50
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000

080021d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MX_I2C1_Init+0x50>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <MX_I2C1_Init+0x54>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_I2C1_Init+0x50>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_I2C1_Init+0x58>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_I2C1_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_I2C1_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_I2C1_Init+0x50>)
 80021ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <MX_I2C1_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_I2C1_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <MX_I2C1_Init+0x50>)
 800220e:	f000 ff61 	bl	80030d4 <HAL_I2C_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002218:	f000 f924 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000334 	.word	0x20000334
 8002224:	40005400 	.word	0x40005400
 8002228:	000186a0 	.word	0x000186a0

0800222c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_I2C2_Init+0x50>)
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <MX_I2C2_Init+0x54>)
 8002234:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_I2C2_Init+0x50>)
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <MX_I2C2_Init+0x58>)
 800223a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_I2C2_Init+0x50>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_I2C2_Init+0x50>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_I2C2_Init+0x50>)
 800224a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <MX_I2C2_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_I2C2_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_I2C2_Init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_I2C2_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_I2C2_Init+0x50>)
 800226a:	f000 ff33 	bl	80030d4 <HAL_I2C_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002274:	f000 f8f6 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000388 	.word	0x20000388
 8002280:	40005800 	.word	0x40005800
 8002284:	000186a0 	.word	0x000186a0

08002288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM2_Init+0x94>)
 80022a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50 - 1;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM2_Init+0x94>)
 80022ae:	2231      	movs	r2, #49	; 0x31
 80022b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_TIM2_Init+0x94>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF - 1;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_TIM2_Init+0x94>)
 80022ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_TIM2_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_TIM2_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <MX_TIM2_Init+0x94>)
 80022ce:	f002 ffa9 	bl	8005224 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d8:	f000 f8c4 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM2_Init+0x94>)
 80022ea:	f003 f845 	bl	8005378 <HAL_TIM_ConfigClockSource>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022f4:	f000 f8b6 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_TIM2_Init+0x94>)
 8002306:	f003 fa15 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002310:	f000 f8a8 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000468 	.word	0x20000468

08002320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_USART2_UART_Init+0x50>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_USART2_UART_Init+0x4c>)
 8002358:	f003 fa5a 	bl	8005810 <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002362:	f000 f87f 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200004b0 	.word	0x200004b0
 8002370:	40004400 	.word	0x40004400

08002374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b32      	ldr	r3, [pc, #200]	; (8002458 <MX_GPIO_Init+0xe4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a31      	ldr	r2, [pc, #196]	; (8002458 <MX_GPIO_Init+0xe4>)
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <MX_GPIO_Init+0xe4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_GPIO_Init+0xe4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002400:	4816      	ldr	r0, [pc, #88]	; (800245c <MX_GPIO_Init+0xe8>)
 8002402:	f000 fe4d 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 7140 	mov.w	r1, #768	; 0x300
 800240c:	4814      	ldr	r0, [pc, #80]	; (8002460 <MX_GPIO_Init+0xec>)
 800240e:	f000 fe47 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002412:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002418:	2301      	movs	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	480c      	ldr	r0, [pc, #48]	; (800245c <MX_GPIO_Init+0xe8>)
 800242c:	f000 fcb4 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002430:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_GPIO_Init+0xec>)
 800244a:	f000 fca5 	bl	8002d98 <HAL_GPIO_Init>

}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40020800 	.word	0x40020800
 8002460:	40020000 	.word	0x40020000

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	e7fe      	b.n	800246c <Error_Handler+0x8>
	...

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <HAL_I2C_MspInit+0x108>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12c      	bne.n	800253c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4b39      	ldr	r3, [pc, #228]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002502:	2312      	movs	r3, #18
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002506:	2301      	movs	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800250e:	2304      	movs	r3, #4
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	482d      	ldr	r0, [pc, #180]	; (80025d0 <HAL_I2C_MspInit+0x110>)
 800251a:	f000 fc3d 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 8002528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800253a:	e041      	b.n	80025c0 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <HAL_I2C_MspInit+0x114>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13c      	bne.n	80025c0 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002568:	2312      	movs	r3, #18
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002574:	2304      	movs	r3, #4
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	4814      	ldr	r0, [pc, #80]	; (80025d0 <HAL_I2C_MspInit+0x110>)
 8002580:	f000 fc0a 	bl	8002d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002584:	2308      	movs	r3, #8
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002588:	2312      	movs	r3, #18
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002594:	2309      	movs	r3, #9
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	480c      	ldr	r0, [pc, #48]	; (80025d0 <HAL_I2C_MspInit+0x110>)
 80025a0:	f000 fbfa 	bl	8002d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80025ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_I2C_MspInit+0x10c>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40005400 	.word	0x40005400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40005800 	.word	0x40005800

080025d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d10d      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_TIM_Base_MspInit+0x3c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_UART_MspInit+0x94>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d133      	bne.n	80026a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_UART_MspInit+0x98>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_UART_MspInit+0x98>)
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_UART_MspInit+0x98>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_UART_MspInit+0x98>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_UART_MspInit+0x98>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_UART_MspInit+0x98>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002672:	230c      	movs	r3, #12
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002682:	2307      	movs	r3, #7
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4809      	ldr	r0, [pc, #36]	; (80026b4 <HAL_UART_MspInit+0x9c>)
 800268e:	f000 fb83 	bl	8002d98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2026      	movs	r0, #38	; 0x26
 8002698:	f000 fab5 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800269c:	2026      	movs	r0, #38	; 0x26
 800269e:	f000 face 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40004400 	.word	0x40004400
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <MemManage_Handler+0x4>

080026ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002704:	f000 f960 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <USART2_IRQHandler+0x10>)
 8002712:	f003 f98d 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200004b0 	.word	0x200004b0

08002720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
	return 1;
 8002724:	2301      	movs	r3, #1
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_kill>:

int _kill(int pid, int sig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800273a:	f003 fed1 	bl	80064e0 <__errno>
 800273e:	4603      	mov	r3, r0
 8002740:	2216      	movs	r2, #22
 8002742:	601a      	str	r2, [r3, #0]
	return -1;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_exit>:

void _exit (int status)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffe7 	bl	8002730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002762:	e7fe      	b.n	8002762 <_exit+0x12>

08002764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e00a      	b.n	800278c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002776:	f3af 8000 	nop.w
 800277a:	4601      	mov	r1, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf0      	blt.n	8002776 <_read+0x12>
	}

return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
	}
	return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_close>:

int _close(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
	return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_isatty>:

int _isatty(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	return 1;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
	return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f003 fe36 	bl	80064e0 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20020000 	.word	0x20020000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	200002fc 	.word	0x200002fc
 80028a8:	20000518 	.word	0x20000518

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028d6:	490e      	ldr	r1, [pc, #56]	; (8002910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028ec:	4c0b      	ldr	r4, [pc, #44]	; (800291c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028fa:	f7ff ffd7 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f003 fdf5 	bl	80064ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff fba3 	bl	800204c <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002914:	0800b2f4 	.word	0x0800b2f4
  ldr r2, =_sbss
 8002918:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 800291c:	20000518 	.word	0x20000518

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 f94f 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fd8a 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f967 	bl	8002c5a <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a4:	f000 f92f 	bl	8002c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200000fc 	.word	0x200000fc
 80029c0:	20000104 	.word	0x20000104
 80029c4:	20000100 	.word	0x20000100

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000104 	.word	0x20000104
 80029ec:	20000504 	.word	0x20000504

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000504 	.word	0x20000504

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000104 	.word	0x20000104

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
         );
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d301      	bcc.n	8002bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <SysTick_Config+0x40>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bca:	210f      	movs	r1, #15
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd0:	f7ff ff8e 	bl	8002af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <SysTick_Config+0x40>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <SysTick_Config+0x40>)
 8002bdc:	2207      	movs	r2, #7
 8002bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff29 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff3e 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff8e 	bl	8002b44 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5d 	bl	8002af0 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff31 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffa2 	bl	8002bac <SysTick_Config>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff feb6 	bl	80029f0 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d008      	beq.n	8002ca4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e052      	b.n	8002d4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0216 	bic.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <HAL_DMA_Abort+0x62>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0208 	bic.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf4:	e013      	b.n	8002d1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf6:	f7ff fe7b 	bl	80029f0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d90c      	bls.n	8002d1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e015      	b.n	8002d4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e4      	bne.n	8002cf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	223f      	movs	r2, #63	; 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e00c      	b.n	8002d8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2205      	movs	r2, #5
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e159      	b.n	8003068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db4:	2201      	movs	r2, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	f040 8148 	bne.w	8003062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d005      	beq.n	8002dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d130      	bne.n	8002e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0201 	and.w	r2, r3, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d017      	beq.n	8002e88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d123      	bne.n	8002edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	08da      	lsrs	r2, r3, #3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3208      	adds	r2, #8
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	08da      	lsrs	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3208      	adds	r2, #8
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a2 	beq.w	8003062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_GPIO_Init+0x2e8>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	4a56      	ldr	r2, [pc, #344]	; (8003080 <HAL_GPIO_Init+0x2e8>)
 8002f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_GPIO_Init+0x2e8>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f3a:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_GPIO_Init+0x2ec>)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a49      	ldr	r2, [pc, #292]	; (8003088 <HAL_GPIO_Init+0x2f0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x202>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a48      	ldr	r2, [pc, #288]	; (800308c <HAL_GPIO_Init+0x2f4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x1fe>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a47      	ldr	r2, [pc, #284]	; (8003090 <HAL_GPIO_Init+0x2f8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x1fa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a46      	ldr	r2, [pc, #280]	; (8003094 <HAL_GPIO_Init+0x2fc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a45      	ldr	r2, [pc, #276]	; (8003098 <HAL_GPIO_Init+0x300>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x1f2>
 8002f86:	2304      	movs	r3, #4
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x204>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x204>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x204>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x204>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x204>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x2ec>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_GPIO_Init+0x304>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fde:	4a2f      	ldr	r2, [pc, #188]	; (800309c <HAL_GPIO_Init+0x304>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_GPIO_Init+0x304>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003008:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_GPIO_Init+0x304>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_GPIO_Init+0x304>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_GPIO_Init+0x304>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_GPIO_Init+0x304>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_GPIO_Init+0x304>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f aea2 	bls.w	8002db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff f9e0 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f002 f84c 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	; (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	; (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	; (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	; (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
 800336c:	4613      	mov	r3, r2
 800336e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff fb3e 	bl	80029f0 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 80e0 	bne.w	8003544 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2319      	movs	r3, #25
 800338a:	2201      	movs	r2, #1
 800338c:	4970      	ldr	r1, [pc, #448]	; (8003550 <HAL_I2C_Master_Transmit+0x1f4>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 f8f6 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e0d3      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_Master_Transmit+0x50>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0cc      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2221      	movs	r2, #33	; 0x21
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2210      	movs	r2, #16
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	893a      	ldrh	r2, [r7, #8]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_I2C_Master_Transmit+0x1f8>)
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003414:	8979      	ldrh	r1, [r7, #10]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fde2 	bl	8003fe4 <I2C_MasterRequestWrite>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e08d      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003440:	e066      	b.n	8003510 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	6a39      	ldr	r1, [r7, #32]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f001 f970 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d107      	bne.n	800346a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d11b      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0x188>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f001 f960 	bl	80047ae <I2C_WaitOnBTFFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e01a      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d194      	bne.n	8003442 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	00100002 	.word	0x00100002
 8003554:	ffff0000 	.word	0xffff0000

08003558 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
 8003568:	4613      	mov	r3, r2
 800356a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff fa40 	bl	80029f0 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 820b 	bne.w	8003996 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	497c      	ldr	r1, [pc, #496]	; (800377c <HAL_I2C_Master_Receive+0x224>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fff8 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	e1fe      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Master_Receive+0x50>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e1f7      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d007      	beq.n	80035ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2222      	movs	r2, #34	; 0x22
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2210      	movs	r2, #16
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_I2C_Master_Receive+0x228>)
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fd66 	bl	80040e8 <I2C_MasterRequestRead>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1b8      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e18c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b01      	cmp	r3, #1
 800365c:	d11b      	bne.n	8003696 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e16c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b02      	cmp	r3, #2
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	e14c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036fc:	e138      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	2b03      	cmp	r3, #3
 8003704:	f200 80f1 	bhi.w	80038ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b01      	cmp	r3, #1
 800370e:	d123      	bne.n	8003758 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f001 f88b 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e139      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003756:	e10b      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	2b02      	cmp	r3, #2
 800375e:	d14e      	bne.n	80037fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <HAL_I2C_Master_Receive+0x22c>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 ff08 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e10e      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037fc:	e0b8      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	4966      	ldr	r1, [pc, #408]	; (80039a0 <HAL_I2C_Master_Receive+0x448>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 feb9 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0bf      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	494f      	ldr	r1, [pc, #316]	; (80039a0 <HAL_I2C_Master_Receive+0x448>)
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fe8b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e091      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e8:	e042      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 ff9e 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e04c      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d118      	bne.n	8003970 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f aec2 	bne.w	80036fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00010004 	.word	0x00010004

080039a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff f817 	bl	80029f0 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	f040 80d9 	bne.w	8003b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2319      	movs	r3, #25
 80039d8:	2201      	movs	r2, #1
 80039da:	496d      	ldr	r1, [pc, #436]	; (8003b90 <HAL_I2C_Mem_Write+0x1ec>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fdcf 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0cc      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Mem_Write+0x56>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0c5      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d007      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a4d      	ldr	r2, [pc, #308]	; (8003b94 <HAL_I2C_Mem_Write+0x1f0>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a62:	88f8      	ldrh	r0, [r7, #6]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fc06 	bl	8004284 <I2C_RequestMemoryWrite>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d052      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e081      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fe50 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d11b      	bne.n	8003b24 <HAL_I2C_Mem_Write+0x180>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1aa      	bne.n	8003a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fe3c 	bl	80047ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d107      	bne.n	8003b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e016      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00100002 	.word	0x00100002
 8003b94:	ffff0000 	.word	0xffff0000

08003b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fe ff1d 	bl	80029f0 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	f040 8208 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2319      	movs	r3, #25
 8003bcc:	2201      	movs	r2, #1
 8003bce:	497b      	ldr	r1, [pc, #492]	; (8003dbc <HAL_I2C_Mem_Read+0x224>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fcd5 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e1fb      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Mem_Read+0x56>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e1f4      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d007      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2222      	movs	r2, #34	; 0x22
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a5b      	ldr	r2, [pc, #364]	; (8003dc0 <HAL_I2C_Mem_Read+0x228>)
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c56:	88f8      	ldrh	r0, [r7, #6]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fba2 	bl	80043b0 <I2C_RequestMemoryRead>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1b0      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e184      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d11b      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e164      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	e144      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d3c:	e138      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 80f1 	bhi.w	8003f2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d123      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fd6b 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e139      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d96:	e10b      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d14e      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2200      	movs	r2, #0
 8003da8:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <HAL_I2C_Mem_Read+0x22c>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fbe8 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e10e      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e0b8      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	4966      	ldr	r1, [pc, #408]	; (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb99 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0bf      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	494f      	ldr	r1, [pc, #316]	; (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fb6b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e091      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f28:	e042      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fc7e 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04c      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d118      	bne.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f aec2 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00010004 	.word	0x00010004

08003fe4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d006      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d003      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e00b      	b.n	8004038 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b12      	cmp	r3, #18
 8004026:	d107      	bne.n	8004038 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fa9b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d103      	bne.n	8004068 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e035      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004074:	d108      	bne.n	8004088 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e01b      	b.n	80040c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	11db      	asrs	r3, r3, #7
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0306 	and.w	r3, r3, #6
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f063 030f 	orn	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <I2C_MasterRequestWrite+0xfc>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fac1 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e010      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <I2C_MasterRequestWrite+0x100>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fab1 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	00010008 	.word	0x00010008
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	460b      	mov	r3, r1
 80040f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800410c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d006      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d003      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004120:	d108      	bne.n	8004134 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e00b      	b.n	800414c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b11      	cmp	r3, #17
 800413a:	d107      	bne.n	800414c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa11 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d103      	bne.n	800417c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e079      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d108      	bne.n	800419c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	e05f      	b.n	800425c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	11db      	asrs	r3, r3, #7
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f063 030f 	orn	r3, r3, #15
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4930      	ldr	r1, [pc, #192]	; (800427c <I2C_MasterRequestRead+0x194>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fa37 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e054      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4929      	ldr	r1, [pc, #164]	; (8004280 <I2C_MasterRequestRead+0x198>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa27 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e044      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f9af 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004236:	d103      	bne.n	8004240 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e017      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030e 	orn	r3, r3, #14
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4907      	ldr	r1, [pc, #28]	; (8004280 <I2C_MasterRequestRead+0x198>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9e3 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010008 	.word	0x00010008
 8004280:	00010002 	.word	0x00010002

08004284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f960 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d4:	d103      	bne.n	80042de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e05f      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	492d      	ldr	r1, [pc, #180]	; (80043ac <I2C_RequestMemoryWrite+0x128>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f998 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e04c      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa02 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b04      	cmp	r3, #4
 8004334:	d107      	bne.n	8004346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02b      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e021      	b.n	80043a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b29b      	uxth	r3, r3
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f9dc 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e005      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	893b      	ldrh	r3, [r7, #8]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00010002 	.word	0x00010002

080043b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	460b      	mov	r3, r1
 80043c4:	813b      	strh	r3, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8c2 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004410:	d103      	bne.n	800441a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0aa      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800442c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	4952      	ldr	r1, [pc, #328]	; (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8fa 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e097      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f964 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e076      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e021      	b.n	80044dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f93e 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e050      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	6a39      	ldr	r1, [r7, #32]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f923 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d107      	bne.n	8004504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e035      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2200      	movs	r2, #0
 8004520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f82b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453e:	d103      	bne.n	8004548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e013      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	4906      	ldr	r1, [pc, #24]	; (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f863 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	00010002 	.word	0x00010002

08004580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	e025      	b.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d021      	beq.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe fa29 	bl	80029f0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e023      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10d      	bne.n	8004604 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	e00c      	b.n	800461e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0b6      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800463c:	e051      	b.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464c:	d123      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004666:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0204 	orr.w	r2, r3, #4
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e046      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469c:	d021      	beq.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fe f9a7 	bl	80029f0 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e020      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10c      	bne.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e00b      	b.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	43da      	mvns	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4013      	ands	r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d18d      	bne.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	e02d      	b.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8ce 	bl	80048dc <I2C_IsAcknowledgeFailed>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e02d      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004750:	d021      	beq.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fe f94d 	bl	80029f0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d116      	bne.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e007      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b80      	cmp	r3, #128	; 0x80
 80047a2:	d1ca      	bne.n	800473a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047ba:	e02d      	b.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f88d 	bl	80048dc <I2C_IsAcknowledgeFailed>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e02d      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d2:	d021      	beq.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d4:	f7fe f90c 	bl	80029f0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d116      	bne.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e007      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d1ca      	bne.n	80047bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800483c:	e042      	b.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d119      	bne.n	8004880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0210 	mvn.w	r2, #16
 8004854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e029      	b.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fe f8b6 	bl	80029f0 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d116      	bne.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e007      	b.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d1b5      	bne.n	800483e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d11b      	bne.n	800492c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e264      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d075      	beq.n	8004a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495a:	4ba3      	ldr	r3, [pc, #652]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d00c      	beq.n	8004980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4ba0      	ldr	r3, [pc, #640]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800496e:	2b08      	cmp	r3, #8
 8004970:	d112      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497e:	d10b      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05b      	beq.n	8004a44 <HAL_RCC_OscConfig+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d157      	bne.n	8004a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e23f      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d106      	bne.n	80049b0 <HAL_RCC_OscConfig+0x74>
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x98>
 80049ba:	4b8b      	ldr	r3, [pc, #556]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a8a      	ldr	r2, [pc, #552]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a87      	ldr	r2, [pc, #540]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049d4:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a83      	ldr	r2, [pc, #524]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a80      	ldr	r2, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fd fffc 	bl	80029f0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fd fff8 	bl	80029f0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e204      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xc0>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd ffe8 	bl	80029f0 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd ffe4 	bl	80029f0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1f0      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0xe8>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a52:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1c4      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4952      	ldr	r1, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd ff9d 	bl	80029f0 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fd ff99 	bl	80029f0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1a5      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4940      	ldr	r1, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd ff7c 	bl	80029f0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fd ff78 	bl	80029f0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e184      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d030      	beq.n	8004b88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd ff5c 	bl	80029f0 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd ff58 	bl	80029f0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e164      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x200>
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fd ff45 	bl	80029f0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fd ff41 	bl	80029f0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e14d      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a0 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d121      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bde:	f7fd ff07 	bl	80029f0 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	e011      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470000 	.word	0x42470000
 8004bf0:	42470e80 	.word	0x42470e80
 8004bf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf8:	f7fd fefa 	bl	80029f0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e106      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCC_OscConfig+0x4e4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2f0>
 8004c1e:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a80      	ldr	r2, [pc, #512]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	e01c      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCC_OscConfig+0x312>
 8004c34:	4b7b      	ldr	r3, [pc, #492]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a7a      	ldr	r2, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	4b78      	ldr	r3, [pc, #480]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a77      	ldr	r2, [pc, #476]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4c:	e00b      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c4e:	4b75      	ldr	r3, [pc, #468]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a74      	ldr	r2, [pc, #464]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	4b72      	ldr	r3, [pc, #456]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a71      	ldr	r2, [pc, #452]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d015      	beq.n	8004c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fd febf 	bl	80029f0 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fd febb 	bl	80029f0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0c5      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <HAL_RCC_OscConfig+0x33a>
 8004c98:	e014      	b.n	8004cc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd fea9 	bl	80029f0 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd fea5 	bl	80029f0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0af      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ee      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a55      	ldr	r2, [pc, #340]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 809b 	beq.w	8004e16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d05c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d141      	bne.n	8004d78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf4:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fe79 	bl	80029f0 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd fe75 	bl	80029f0 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e081      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d14:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	019b      	lsls	r3, r3, #6
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fd fe4e 	bl	80029f0 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd fe4a 	bl	80029f0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e056      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x41c>
 8004d76:	e04e      	b.n	8004e16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fd fe37 	bl	80029f0 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fd fe33 	bl	80029f0 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e03f      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x44a>
 8004da4:	e037      	b.n	8004e16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e032      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d028      	beq.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d11a      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de2:	4013      	ands	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40007000 	.word	0x40007000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	42470060 	.word	0x42470060

08004e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0cc      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b68      	ldr	r3, [pc, #416]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d90c      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e80:	4b59      	ldr	r3, [pc, #356]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e98:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4a52      	ldr	r2, [pc, #328]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea4:	4b50      	ldr	r3, [pc, #320]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	494d      	ldr	r1, [pc, #308]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d044      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b47      	ldr	r3, [pc, #284]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d119      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e067      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4934      	ldr	r1, [pc, #208]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f1c:	f7fd fd68 	bl	80029f0 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7fd fd64 	bl	80029f0 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e04f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d20c      	bcs.n	8004f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e032      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb2:	f000 f821 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	490a      	ldr	r1, [pc, #40]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004fc4:	5ccb      	ldrb	r3, [r1, r3]
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fd fcc8 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023c00 	.word	0x40023c00
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0800ae18 	.word	0x0800ae18
 8004ff0:	200000fc 	.word	0x200000fc
 8004ff4:	20000100 	.word	0x20000100

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005010:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d00d      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x40>
 800501c:	2b08      	cmp	r3, #8
 800501e:	f200 80bd 	bhi.w	800519c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x34>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x3a>
 800502a:	e0b7      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b61      	ldr	r3, [pc, #388]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800502e:	60bb      	str	r3, [r7, #8]
       break;
 8005030:	e0b7      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005032:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005034:	60bb      	str	r3, [r7, #8]
      break;
 8005036:	e0b4      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005038:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005040:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005042:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04d      	beq.n	80050ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800504e:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	ea02 0800 	and.w	r8, r2, r0
 8005066:	ea03 0901 	and.w	r9, r3, r1
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	014b      	lsls	r3, r1, #5
 8005078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800507c:	0142      	lsls	r2, r0, #5
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	ebb0 0008 	subs.w	r0, r0, r8
 8005086:	eb61 0109 	sbc.w	r1, r1, r9
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	018b      	lsls	r3, r1, #6
 8005094:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005098:	0182      	lsls	r2, r0, #6
 800509a:	1a12      	subs	r2, r2, r0
 800509c:	eb63 0301 	sbc.w	r3, r3, r1
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	00d9      	lsls	r1, r3, #3
 80050aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ae:	00d0      	lsls	r0, r2, #3
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	eb12 0208 	adds.w	r2, r2, r8
 80050b8:	eb43 0309 	adc.w	r3, r3, r9
 80050bc:	f04f 0000 	mov.w	r0, #0
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	0259      	lsls	r1, r3, #9
 80050c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ca:	0250      	lsls	r0, r2, #9
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f7fb fddc 	bl	8000c98 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4613      	mov	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e04a      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	461a      	mov	r2, r3
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	ea02 0400 	and.w	r4, r2, r0
 8005102:	ea03 0501 	and.w	r5, r3, r1
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	014b      	lsls	r3, r1, #5
 8005114:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005118:	0142      	lsls	r2, r0, #5
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	1b00      	subs	r0, r0, r4
 8005120:	eb61 0105 	sbc.w	r1, r1, r5
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	018b      	lsls	r3, r1, #6
 800512e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005132:	0182      	lsls	r2, r0, #6
 8005134:	1a12      	subs	r2, r2, r0
 8005136:	eb63 0301 	sbc.w	r3, r3, r1
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	00d9      	lsls	r1, r3, #3
 8005144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005148:	00d0      	lsls	r0, r2, #3
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	1912      	adds	r2, r2, r4
 8005150:	eb45 0303 	adc.w	r3, r5, r3
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	0299      	lsls	r1, r3, #10
 800515e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005162:	0290      	lsls	r0, r2, #10
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	f7fb fd90 	bl	8000c98 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	60bb      	str	r3, [r7, #8]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800519e:	60bb      	str	r3, [r7, #8]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	68bb      	ldr	r3, [r7, #8]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	007a1200 	.word	0x007a1200

080051bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	200000fc 	.word	0x200000fc

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d8:	f7ff fff0 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0a9b      	lsrs	r3, r3, #10
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4903      	ldr	r1, [pc, #12]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40023800 	.word	0x40023800
 80051f8:	0800ae28 	.word	0x0800ae28

080051fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005200:	f7ff ffdc 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0b5b      	lsrs	r3, r3, #13
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4903      	ldr	r1, [pc, #12]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	0800ae28 	.word	0x0800ae28

08005224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e041      	b.n	80052ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd f9c4 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f000 f94c 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e03c      	b.n	8005356 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <HAL_TIM_Base_Start+0xa0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_TIM_Base_Start+0x5c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d013      	beq.n	8005320 <HAL_TIM_Base_Start+0x5c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_TIM_Base_Start+0xa4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_TIM_Base_Start+0x5c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_TIM_Base_Start+0xa8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_TIM_Base_Start+0x5c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_TIM_Base_Start+0xac>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_Base_Start+0x5c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIM_Base_Start+0xb0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d111      	bne.n	8005344 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d010      	beq.n	8005354 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005342:	e007      	b.n	8005354 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40014000 	.word	0x40014000

08005378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIM_ConfigClockSource+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e0b3      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x180>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d03e      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0xd0>
 80053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ce:	f200 8087 	bhi.w	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	f000 8085 	beq.w	80054e4 <HAL_TIM_ConfigClockSource+0x16c>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d87f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053e0:	2b70      	cmp	r3, #112	; 0x70
 80053e2:	d01a      	beq.n	800541a <HAL_TIM_ConfigClockSource+0xa2>
 80053e4:	2b70      	cmp	r3, #112	; 0x70
 80053e6:	d87b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d050      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x116>
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d877      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053f0:	2b50      	cmp	r3, #80	; 0x50
 80053f2:	d03c      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xf6>
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d873      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d058      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x136>
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d86f      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d064      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 8005404:	2b30      	cmp	r3, #48	; 0x30
 8005406:	d86b      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005408:	2b20      	cmp	r3, #32
 800540a:	d060      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 800540c:	2b20      	cmp	r3, #32
 800540e:	d867      	bhi.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05c      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
 8005414:	2b10      	cmp	r3, #16
 8005416:	d05a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005418:	e062      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f000 f963 	bl	80056f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800543c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
      break;
 8005446:	e04e      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6899      	ldr	r1, [r3, #8]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 f94c 	bl	80056f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	609a      	str	r2, [r3, #8]
      break;
 800546c:	e03b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 f8c0 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2150      	movs	r1, #80	; 0x50
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f919 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 800548c:	e02b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 f8df 	bl	800565e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2160      	movs	r1, #96	; 0x60
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f909 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 80054ac:	e01b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 f8a0 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2140      	movs	r1, #64	; 0x40
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f8f9 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f000 f8f0 	bl	80056be <TIM_ITRx_SetConfig>
        break;
 80054de:	e002      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <TIM_Base_SetConfig+0xe4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0x38>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0x38>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a31      	ldr	r2, [pc, #196]	; (80055e8 <TIM_Base_SetConfig+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0x38>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a30      	ldr	r2, [pc, #192]	; (80055ec <TIM_Base_SetConfig+0xec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0x38>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2f      	ldr	r2, [pc, #188]	; (80055f0 <TIM_Base_SetConfig+0xf0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <TIM_Base_SetConfig+0xe4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01b      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d017      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <TIM_Base_SetConfig+0xe8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a21      	ldr	r2, [pc, #132]	; (80055ec <TIM_Base_SetConfig+0xec>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <TIM_Base_SetConfig+0xf0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <TIM_Base_SetConfig+0xf4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <TIM_Base_SetConfig+0xf8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0x8a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <TIM_Base_SetConfig+0xfc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <TIM_Base_SetConfig+0xe4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400
 80055fc:	40014800 	.word	0x40014800

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0210 	bic.w	r2, r3, #16
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	f043 0307 	orr.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	021a      	lsls	r2, r3, #8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	431a      	orrs	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	609a      	str	r2, [r3, #8]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e050      	b.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d013      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10c      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e03f      	b.n	80058a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc feee 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fc7b 	bl	8006150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08a      	sub	sp, #40	; 0x28
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d17c      	bne.n	80059c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_UART_Transmit+0x2c>
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e075      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_UART_Transmit+0x3e>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e06e      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2221      	movs	r2, #33	; 0x21
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fe:	f7fd f877 	bl	80029f0 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005918:	d108      	bne.n	800592c <HAL_UART_Transmit+0x82>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e003      	b.n	8005934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800593c:	e02a      	b.n	8005994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa3d 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e036      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800596c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3302      	adds	r3, #2
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e007      	b.n	8005986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1cf      	bne.n	800593e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fa0d 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e006      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d11d      	bne.n	8005a24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_UART_Receive_IT+0x26>
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e016      	b.n	8005a26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Receive_IT+0x38>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e00f      	b.n	8005a26 <HAL_UART_Receive_IT+0x58>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa1e 	bl	8005e5c <UART_Start_Receive_IT>
 8005a20:	4603      	mov	r3, r0
 8005a22:	e000      	b.n	8005a26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_UART_IRQHandler+0x52>
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fad1 	bl	8006022 <UART_Receive_IT>
      return;
 8005a80:	e17c      	b.n	8005d7c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80b1 	beq.w	8005bec <HAL_UART_IRQHandler+0x1bc>
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x70>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80a6 	beq.w	8005bec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x90>
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f043 0201 	orr.w	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_UART_IRQHandler+0xb0>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f043 0202 	orr.w	r2, r3, #2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_UART_IRQHandler+0xd0>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f043 0204 	orr.w	r2, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00f      	beq.n	8005b2a <HAL_UART_IRQHandler+0xfa>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <HAL_UART_IRQHandler+0xee>
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 811f 	beq.w	8005d72 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_UART_IRQHandler+0x11e>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa6a 	bl	8006022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_UART_IRQHandler+0x146>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d031      	beq.n	8005bda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9aa 	bl	8005ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d123      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d013      	beq.n	8005bca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	4a77      	ldr	r2, [pc, #476]	; (8005d84 <HAL_UART_IRQHandler+0x354>)
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fd f8cf 	bl	8002d52 <HAL_DMA_Abort_IT>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e00e      	b.n	8005be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8e6 	bl	8005d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e00a      	b.n	8005be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8e2 	bl	8005d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	e006      	b.n	8005be8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8de 	bl	8005d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005be6:	e0c4      	b.n	8005d72 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	bf00      	nop
    return;
 8005bea:	e0c2      	b.n	8005d72 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 80a2 	bne.w	8005d3a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 809c 	beq.w	8005d3a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8096 	beq.w	8005d3a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d14f      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c3c:	8a3b      	ldrh	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8099 	beq.w	8005d76 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c48:	8a3a      	ldrh	r2, [r7, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	f080 8093 	bcs.w	8005d76 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8a3a      	ldrh	r2, [r7, #16]
 8005c54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c60:	d02b      	beq.n	8005cba <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c70:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c90:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0210 	bic.w	r2, r2, #16
 8005cae:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fc ffdc 	bl	8002c72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f870 	bl	8005db0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cd0:	e051      	b.n	8005d76 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d047      	beq.n	8005d7a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005cea:	8a7b      	ldrh	r3, [r7, #18]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d044      	beq.n	8005d7a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cfe:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0210 	bic.w	r2, r2, #16
 8005d2c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d2e:	8a7b      	ldrh	r3, [r7, #18]
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f83c 	bl	8005db0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d38:	e01f      	b.n	8005d7a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_UART_IRQHandler+0x326>
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f8ff 	bl	8005f52 <UART_Transmit_IT>
    return;
 8005d54:	e012      	b.n	8005d7c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <HAL_UART_IRQHandler+0x34c>
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f941 	bl	8005ff2 <UART_EndTransmit_IT>
    return;
 8005d70:	e004      	b.n	8005d7c <HAL_UART_IRQHandler+0x34c>
    return;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_UART_IRQHandler+0x34c>
      return;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_UART_IRQHandler+0x34c>
      return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	3728      	adds	r7, #40	; 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08005f2b 	.word	0x08005f2b

08005d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd8:	e02c      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d028      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005de8:	f7fc fe02 	bl	80029f0 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d21d      	bcs.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695a      	ldr	r2, [r3, #20]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00f      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d0c3      	beq.n	8005dda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2222      	movs	r2, #34	; 0x22
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0220 	orr.w	r2, r2, #32
 8005ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ee6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0210 	bic.w	r2, r2, #16
 8005f0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff ff29 	bl	8005d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b21      	cmp	r3, #33	; 0x21
 8005f64:	d13e      	bne.n	8005fe4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d114      	bne.n	8005f9a <UART_Transmit_IT+0x48>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d110      	bne.n	8005f9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	621a      	str	r2, [r3, #32]
 8005f98:	e008      	b.n	8005fac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1c59      	adds	r1, r3, #1
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6211      	str	r1, [r2, #32]
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff feb8 	bl	8005d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b22      	cmp	r3, #34	; 0x22
 8006034:	f040 8087 	bne.w	8006146 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d117      	bne.n	8006072 <UART_Receive_IT+0x50>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d113      	bne.n	8006072 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	b29a      	uxth	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	1c9a      	adds	r2, r3, #2
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	; 0x28
 8006070:	e026      	b.n	80060c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006084:	d007      	beq.n	8006096 <UART_Receive_IT+0x74>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <UART_Receive_IT+0x82>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e008      	b.n	80060b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4619      	mov	r1, r3
 80060ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d136      	bne.n	8006142 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0220 	bic.w	r2, r2, #32
 80060e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	d10e      	bne.n	8006132 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0210 	bic.w	r2, r2, #16
 8006122:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff fe40 	bl	8005db0 <HAL_UARTEx_RxEventCallback>
 8006130:	e002      	b.n	8006138 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fb fc58 	bl	80019e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e002      	b.n	8006148 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e000      	b.n	8006148 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
  }
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	b09f      	sub	sp, #124	; 0x7c
 8006156:	af00      	add	r7, sp, #0
 8006158:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	ea40 0301 	orr.w	r3, r0, r1
 8006170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	431a      	orrs	r2, r3
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	431a      	orrs	r2, r3
 8006182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	4313      	orrs	r3, r2
 8006188:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800618a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006194:	f021 010c 	bic.w	r1, r1, #12
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619e:	430b      	orrs	r3, r1
 80061a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	6999      	ldr	r1, [r3, #24]
 80061b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	ea40 0301 	orr.w	r3, r0, r1
 80061b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4bc5      	ldr	r3, [pc, #788]	; (80064d4 <UART_SetConfig+0x384>)
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d004      	beq.n	80061ce <UART_SetConfig+0x7e>
 80061c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4bc3      	ldr	r3, [pc, #780]	; (80064d8 <UART_SetConfig+0x388>)
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d103      	bne.n	80061d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ce:	f7ff f815 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 80061d2:	6778      	str	r0, [r7, #116]	; 0x74
 80061d4:	e002      	b.n	80061dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061d6:	f7fe fffd 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 80061da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	f040 80b6 	bne.w	8006354 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ea:	461c      	mov	r4, r3
 80061ec:	f04f 0500 	mov.w	r5, #0
 80061f0:	4622      	mov	r2, r4
 80061f2:	462b      	mov	r3, r5
 80061f4:	1891      	adds	r1, r2, r2
 80061f6:	6439      	str	r1, [r7, #64]	; 0x40
 80061f8:	415b      	adcs	r3, r3
 80061fa:	647b      	str	r3, [r7, #68]	; 0x44
 80061fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006200:	1912      	adds	r2, r2, r4
 8006202:	eb45 0303 	adc.w	r3, r5, r3
 8006206:	f04f 0000 	mov.w	r0, #0
 800620a:	f04f 0100 	mov.w	r1, #0
 800620e:	00d9      	lsls	r1, r3, #3
 8006210:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006214:	00d0      	lsls	r0, r2, #3
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	1911      	adds	r1, r2, r4
 800621c:	6639      	str	r1, [r7, #96]	; 0x60
 800621e:	416b      	adcs	r3, r5
 8006220:	667b      	str	r3, [r7, #100]	; 0x64
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	461a      	mov	r2, r3
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	1891      	adds	r1, r2, r2
 800622e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006230:	415b      	adcs	r3, r3
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006238:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800623c:	f7fa fd2c 	bl	8000c98 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4ba5      	ldr	r3, [pc, #660]	; (80064dc <UART_SetConfig+0x38c>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011e      	lsls	r6, r3, #4
 800624e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006250:	461c      	mov	r4, r3
 8006252:	f04f 0500 	mov.w	r5, #0
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	1891      	adds	r1, r2, r2
 800625c:	6339      	str	r1, [r7, #48]	; 0x30
 800625e:	415b      	adcs	r3, r3
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006266:	1912      	adds	r2, r2, r4
 8006268:	eb45 0303 	adc.w	r3, r5, r3
 800626c:	f04f 0000 	mov.w	r0, #0
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	00d9      	lsls	r1, r3, #3
 8006276:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800627a:	00d0      	lsls	r0, r2, #3
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	1911      	adds	r1, r2, r4
 8006282:	65b9      	str	r1, [r7, #88]	; 0x58
 8006284:	416b      	adcs	r3, r5
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	461a      	mov	r2, r3
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	1891      	adds	r1, r2, r2
 8006294:	62b9      	str	r1, [r7, #40]	; 0x28
 8006296:	415b      	adcs	r3, r3
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800629e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80062a2:	f7fa fcf9 	bl	8000c98 <__aeabi_uldivmod>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4b8c      	ldr	r3, [pc, #560]	; (80064dc <UART_SetConfig+0x38c>)
 80062ac:	fba3 1302 	umull	r1, r3, r3, r2
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	2164      	movs	r1, #100	; 0x64
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	3332      	adds	r3, #50	; 0x32
 80062be:	4a87      	ldr	r2, [pc, #540]	; (80064dc <UART_SetConfig+0x38c>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062cc:	441e      	add	r6, r3
 80062ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d0:	4618      	mov	r0, r3
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	1894      	adds	r4, r2, r2
 80062dc:	623c      	str	r4, [r7, #32]
 80062de:	415b      	adcs	r3, r3
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062e6:	1812      	adds	r2, r2, r0
 80062e8:	eb41 0303 	adc.w	r3, r1, r3
 80062ec:	f04f 0400 	mov.w	r4, #0
 80062f0:	f04f 0500 	mov.w	r5, #0
 80062f4:	00dd      	lsls	r5, r3, #3
 80062f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062fa:	00d4      	lsls	r4, r2, #3
 80062fc:	4622      	mov	r2, r4
 80062fe:	462b      	mov	r3, r5
 8006300:	1814      	adds	r4, r2, r0
 8006302:	653c      	str	r4, [r7, #80]	; 0x50
 8006304:	414b      	adcs	r3, r1
 8006306:	657b      	str	r3, [r7, #84]	; 0x54
 8006308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	461a      	mov	r2, r3
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	1891      	adds	r1, r2, r2
 8006314:	61b9      	str	r1, [r7, #24]
 8006316:	415b      	adcs	r3, r3
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800631e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006322:	f7fa fcb9 	bl	8000c98 <__aeabi_uldivmod>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4b6c      	ldr	r3, [pc, #432]	; (80064dc <UART_SetConfig+0x38c>)
 800632c:	fba3 1302 	umull	r1, r3, r3, r2
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	2164      	movs	r1, #100	; 0x64
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	3332      	adds	r3, #50	; 0x32
 800633e:	4a67      	ldr	r2, [pc, #412]	; (80064dc <UART_SetConfig+0x38c>)
 8006340:	fba2 2303 	umull	r2, r3, r2, r3
 8006344:	095b      	lsrs	r3, r3, #5
 8006346:	f003 0207 	and.w	r2, r3, #7
 800634a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4432      	add	r2, r6
 8006350:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006352:	e0b9      	b.n	80064c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006356:	461c      	mov	r4, r3
 8006358:	f04f 0500 	mov.w	r5, #0
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	1891      	adds	r1, r2, r2
 8006362:	6139      	str	r1, [r7, #16]
 8006364:	415b      	adcs	r3, r3
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800636c:	1912      	adds	r2, r2, r4
 800636e:	eb45 0303 	adc.w	r3, r5, r3
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	00d9      	lsls	r1, r3, #3
 800637c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006380:	00d0      	lsls	r0, r2, #3
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	eb12 0804 	adds.w	r8, r2, r4
 800638a:	eb43 0905 	adc.w	r9, r3, r5
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	4618      	mov	r0, r3
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	008b      	lsls	r3, r1, #2
 80063a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063a6:	0082      	lsls	r2, r0, #2
 80063a8:	4640      	mov	r0, r8
 80063aa:	4649      	mov	r1, r9
 80063ac:	f7fa fc74 	bl	8000c98 <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4b49      	ldr	r3, [pc, #292]	; (80064dc <UART_SetConfig+0x38c>)
 80063b6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	011e      	lsls	r6, r3, #4
 80063be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c0:	4618      	mov	r0, r3
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	1894      	adds	r4, r2, r2
 80063cc:	60bc      	str	r4, [r7, #8]
 80063ce:	415b      	adcs	r3, r3
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063d6:	1812      	adds	r2, r2, r0
 80063d8:	eb41 0303 	adc.w	r3, r1, r3
 80063dc:	f04f 0400 	mov.w	r4, #0
 80063e0:	f04f 0500 	mov.w	r5, #0
 80063e4:	00dd      	lsls	r5, r3, #3
 80063e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063ea:	00d4      	lsls	r4, r2, #3
 80063ec:	4622      	mov	r2, r4
 80063ee:	462b      	mov	r3, r5
 80063f0:	1814      	adds	r4, r2, r0
 80063f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80063f4:	414b      	adcs	r3, r1
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f04f 0100 	mov.w	r1, #0
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006410:	0082      	lsls	r2, r0, #2
 8006412:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006416:	f7fa fc3f 	bl	8000c98 <__aeabi_uldivmod>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <UART_SetConfig+0x38c>)
 8006420:	fba3 1302 	umull	r1, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	2164      	movs	r1, #100	; 0x64
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	3332      	adds	r3, #50	; 0x32
 8006432:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <UART_SetConfig+0x38c>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643e:	441e      	add	r6, r3
 8006440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006442:	4618      	mov	r0, r3
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	1894      	adds	r4, r2, r2
 800644e:	603c      	str	r4, [r7, #0]
 8006450:	415b      	adcs	r3, r3
 8006452:	607b      	str	r3, [r7, #4]
 8006454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006458:	1812      	adds	r2, r2, r0
 800645a:	eb41 0303 	adc.w	r3, r1, r3
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	f04f 0500 	mov.w	r5, #0
 8006466:	00dd      	lsls	r5, r3, #3
 8006468:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800646c:	00d4      	lsls	r4, r2, #3
 800646e:	4622      	mov	r2, r4
 8006470:	462b      	mov	r3, r5
 8006472:	eb12 0a00 	adds.w	sl, r2, r0
 8006476:	eb43 0b01 	adc.w	fp, r3, r1
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	008b      	lsls	r3, r1, #2
 800648e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006492:	0082      	lsls	r2, r0, #2
 8006494:	4650      	mov	r0, sl
 8006496:	4659      	mov	r1, fp
 8006498:	f7fa fbfe 	bl	8000c98 <__aeabi_uldivmod>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <UART_SetConfig+0x38c>)
 80064a2:	fba3 1302 	umull	r1, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2164      	movs	r1, #100	; 0x64
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	3332      	adds	r3, #50	; 0x32
 80064b4:	4a09      	ldr	r2, [pc, #36]	; (80064dc <UART_SetConfig+0x38c>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	f003 020f 	and.w	r2, r3, #15
 80064c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4432      	add	r2, r6
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	377c      	adds	r7, #124	; 0x7c
 80064cc:	46bd      	mov	sp, r7
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	bf00      	nop
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	51eb851f 	.word	0x51eb851f

080064e0 <__errno>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <__errno+0x8>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000108 	.word	0x20000108

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4d0d      	ldr	r5, [pc, #52]	; (8006524 <__libc_init_array+0x38>)
 80064f0:	4c0d      	ldr	r4, [pc, #52]	; (8006528 <__libc_init_array+0x3c>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	2600      	movs	r6, #0
 80064f8:	42a6      	cmp	r6, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	4d0b      	ldr	r5, [pc, #44]	; (800652c <__libc_init_array+0x40>)
 80064fe:	4c0c      	ldr	r4, [pc, #48]	; (8006530 <__libc_init_array+0x44>)
 8006500:	f004 fc7a 	bl	800adf8 <_init>
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	2600      	movs	r6, #0
 800650a:	42a6      	cmp	r6, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f855 3b04 	ldr.w	r3, [r5], #4
 8006514:	4798      	blx	r3
 8006516:	3601      	adds	r6, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f855 3b04 	ldr.w	r3, [r5], #4
 800651e:	4798      	blx	r3
 8006520:	3601      	adds	r6, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	0800b2ec 	.word	0x0800b2ec
 8006528:	0800b2ec 	.word	0x0800b2ec
 800652c:	0800b2ec 	.word	0x0800b2ec
 8006530:	0800b2f0 	.word	0x0800b2f0

08006534 <memset>:
 8006534:	4402      	add	r2, r0
 8006536:	4603      	mov	r3, r0
 8006538:	4293      	cmp	r3, r2
 800653a:	d100      	bne.n	800653e <memset+0xa>
 800653c:	4770      	bx	lr
 800653e:	f803 1b01 	strb.w	r1, [r3], #1
 8006542:	e7f9      	b.n	8006538 <memset+0x4>

08006544 <__cvt>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	ec55 4b10 	vmov	r4, r5, d0
 800654c:	2d00      	cmp	r5, #0
 800654e:	460e      	mov	r6, r1
 8006550:	4619      	mov	r1, r3
 8006552:	462b      	mov	r3, r5
 8006554:	bfbb      	ittet	lt
 8006556:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800655a:	461d      	movlt	r5, r3
 800655c:	2300      	movge	r3, #0
 800655e:	232d      	movlt	r3, #45	; 0x2d
 8006560:	700b      	strb	r3, [r1, #0]
 8006562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006564:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006568:	4691      	mov	r9, r2
 800656a:	f023 0820 	bic.w	r8, r3, #32
 800656e:	bfbc      	itt	lt
 8006570:	4622      	movlt	r2, r4
 8006572:	4614      	movlt	r4, r2
 8006574:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006578:	d005      	beq.n	8006586 <__cvt+0x42>
 800657a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800657e:	d100      	bne.n	8006582 <__cvt+0x3e>
 8006580:	3601      	adds	r6, #1
 8006582:	2102      	movs	r1, #2
 8006584:	e000      	b.n	8006588 <__cvt+0x44>
 8006586:	2103      	movs	r1, #3
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	ab02      	add	r3, sp, #8
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	ec45 4b10 	vmov	d0, r4, r5
 8006594:	4653      	mov	r3, sl
 8006596:	4632      	mov	r2, r6
 8006598:	f001 fdea 	bl	8008170 <_dtoa_r>
 800659c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065a0:	4607      	mov	r7, r0
 80065a2:	d102      	bne.n	80065aa <__cvt+0x66>
 80065a4:	f019 0f01 	tst.w	r9, #1
 80065a8:	d022      	beq.n	80065f0 <__cvt+0xac>
 80065aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065ae:	eb07 0906 	add.w	r9, r7, r6
 80065b2:	d110      	bne.n	80065d6 <__cvt+0x92>
 80065b4:	783b      	ldrb	r3, [r7, #0]
 80065b6:	2b30      	cmp	r3, #48	; 0x30
 80065b8:	d10a      	bne.n	80065d0 <__cvt+0x8c>
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7fa fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c6:	b918      	cbnz	r0, 80065d0 <__cvt+0x8c>
 80065c8:	f1c6 0601 	rsb	r6, r6, #1
 80065cc:	f8ca 6000 	str.w	r6, [sl]
 80065d0:	f8da 3000 	ldr.w	r3, [sl]
 80065d4:	4499      	add	r9, r3
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7fa fa7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80065e2:	b108      	cbz	r0, 80065e8 <__cvt+0xa4>
 80065e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065e8:	2230      	movs	r2, #48	; 0x30
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	454b      	cmp	r3, r9
 80065ee:	d307      	bcc.n	8006600 <__cvt+0xbc>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f4:	1bdb      	subs	r3, r3, r7
 80065f6:	4638      	mov	r0, r7
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	b004      	add	sp, #16
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	9103      	str	r1, [sp, #12]
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e7f0      	b.n	80065ea <__cvt+0xa6>

08006608 <__exponent>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	4603      	mov	r3, r0
 800660c:	2900      	cmp	r1, #0
 800660e:	bfb8      	it	lt
 8006610:	4249      	neglt	r1, r1
 8006612:	f803 2b02 	strb.w	r2, [r3], #2
 8006616:	bfb4      	ite	lt
 8006618:	222d      	movlt	r2, #45	; 0x2d
 800661a:	222b      	movge	r2, #43	; 0x2b
 800661c:	2909      	cmp	r1, #9
 800661e:	7042      	strb	r2, [r0, #1]
 8006620:	dd2a      	ble.n	8006678 <__exponent+0x70>
 8006622:	f10d 0407 	add.w	r4, sp, #7
 8006626:	46a4      	mov	ip, r4
 8006628:	270a      	movs	r7, #10
 800662a:	46a6      	mov	lr, r4
 800662c:	460a      	mov	r2, r1
 800662e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006632:	fb07 1516 	mls	r5, r7, r6, r1
 8006636:	3530      	adds	r5, #48	; 0x30
 8006638:	2a63      	cmp	r2, #99	; 0x63
 800663a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800663e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006642:	4631      	mov	r1, r6
 8006644:	dcf1      	bgt.n	800662a <__exponent+0x22>
 8006646:	3130      	adds	r1, #48	; 0x30
 8006648:	f1ae 0502 	sub.w	r5, lr, #2
 800664c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006650:	1c44      	adds	r4, r0, #1
 8006652:	4629      	mov	r1, r5
 8006654:	4561      	cmp	r1, ip
 8006656:	d30a      	bcc.n	800666e <__exponent+0x66>
 8006658:	f10d 0209 	add.w	r2, sp, #9
 800665c:	eba2 020e 	sub.w	r2, r2, lr
 8006660:	4565      	cmp	r5, ip
 8006662:	bf88      	it	hi
 8006664:	2200      	movhi	r2, #0
 8006666:	4413      	add	r3, r2
 8006668:	1a18      	subs	r0, r3, r0
 800666a:	b003      	add	sp, #12
 800666c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006672:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006676:	e7ed      	b.n	8006654 <__exponent+0x4c>
 8006678:	2330      	movs	r3, #48	; 0x30
 800667a:	3130      	adds	r1, #48	; 0x30
 800667c:	7083      	strb	r3, [r0, #2]
 800667e:	70c1      	strb	r1, [r0, #3]
 8006680:	1d03      	adds	r3, r0, #4
 8006682:	e7f1      	b.n	8006668 <__exponent+0x60>

08006684 <_printf_float>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	ed2d 8b02 	vpush	{d8}
 800668c:	b08d      	sub	sp, #52	; 0x34
 800668e:	460c      	mov	r4, r1
 8006690:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006694:	4616      	mov	r6, r2
 8006696:	461f      	mov	r7, r3
 8006698:	4605      	mov	r5, r0
 800669a:	f002 fec5 	bl	8009428 <_localeconv_r>
 800669e:	f8d0 a000 	ldr.w	sl, [r0]
 80066a2:	4650      	mov	r0, sl
 80066a4:	f7f9 fd9c 	bl	80001e0 <strlen>
 80066a8:	2300      	movs	r3, #0
 80066aa:	930a      	str	r3, [sp, #40]	; 0x28
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	9305      	str	r3, [sp, #20]
 80066b0:	f8d8 3000 	ldr.w	r3, [r8]
 80066b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066b8:	3307      	adds	r3, #7
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	f103 0208 	add.w	r2, r3, #8
 80066c2:	f8c8 2000 	str.w	r2, [r8]
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80066dc:	ee08 0a10 	vmov	s16, r0
 80066e0:	4b9f      	ldr	r3, [pc, #636]	; (8006960 <_printf_float+0x2dc>)
 80066e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ea:	f7fa fa27 	bl	8000b3c <__aeabi_dcmpun>
 80066ee:	bb88      	cbnz	r0, 8006754 <_printf_float+0xd0>
 80066f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f4:	4b9a      	ldr	r3, [pc, #616]	; (8006960 <_printf_float+0x2dc>)
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066fa:	f7fa fa01 	bl	8000b00 <__aeabi_dcmple>
 80066fe:	bb48      	cbnz	r0, 8006754 <_printf_float+0xd0>
 8006700:	2200      	movs	r2, #0
 8006702:	2300      	movs	r3, #0
 8006704:	4640      	mov	r0, r8
 8006706:	4649      	mov	r1, r9
 8006708:	f7fa f9f0 	bl	8000aec <__aeabi_dcmplt>
 800670c:	b110      	cbz	r0, 8006714 <_printf_float+0x90>
 800670e:	232d      	movs	r3, #45	; 0x2d
 8006710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006714:	4b93      	ldr	r3, [pc, #588]	; (8006964 <_printf_float+0x2e0>)
 8006716:	4894      	ldr	r0, [pc, #592]	; (8006968 <_printf_float+0x2e4>)
 8006718:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800671c:	bf94      	ite	ls
 800671e:	4698      	movls	r8, r3
 8006720:	4680      	movhi	r8, r0
 8006722:	2303      	movs	r3, #3
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	9b05      	ldr	r3, [sp, #20]
 8006728:	f023 0204 	bic.w	r2, r3, #4
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	9700      	str	r7, [sp, #0]
 8006734:	4633      	mov	r3, r6
 8006736:	aa0b      	add	r2, sp, #44	; 0x2c
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f9d8 	bl	8006af0 <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	f040 8090 	bne.w	8006866 <_printf_float+0x1e2>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800674a:	b00d      	add	sp, #52	; 0x34
 800674c:	ecbd 8b02 	vpop	{d8}
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa f9ee 	bl	8000b3c <__aeabi_dcmpun>
 8006760:	b140      	cbz	r0, 8006774 <_printf_float+0xf0>
 8006762:	464b      	mov	r3, r9
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfbc      	itt	lt
 8006768:	232d      	movlt	r3, #45	; 0x2d
 800676a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800676e:	487f      	ldr	r0, [pc, #508]	; (800696c <_printf_float+0x2e8>)
 8006770:	4b7f      	ldr	r3, [pc, #508]	; (8006970 <_printf_float+0x2ec>)
 8006772:	e7d1      	b.n	8006718 <_printf_float+0x94>
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	d13f      	bne.n	8006800 <_printf_float+0x17c>
 8006780:	2306      	movs	r3, #6
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	9b05      	ldr	r3, [sp, #20]
 8006786:	6861      	ldr	r1, [r4, #4]
 8006788:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800678c:	2300      	movs	r3, #0
 800678e:	9303      	str	r3, [sp, #12]
 8006790:	ab0a      	add	r3, sp, #40	; 0x28
 8006792:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006796:	ab09      	add	r3, sp, #36	; 0x24
 8006798:	ec49 8b10 	vmov	d0, r8, r9
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6022      	str	r2, [r4, #0]
 80067a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067a4:	4628      	mov	r0, r5
 80067a6:	f7ff fecd 	bl	8006544 <__cvt>
 80067aa:	9b06      	ldr	r3, [sp, #24]
 80067ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ae:	2b47      	cmp	r3, #71	; 0x47
 80067b0:	4680      	mov	r8, r0
 80067b2:	d108      	bne.n	80067c6 <_printf_float+0x142>
 80067b4:	1cc8      	adds	r0, r1, #3
 80067b6:	db02      	blt.n	80067be <_printf_float+0x13a>
 80067b8:	6863      	ldr	r3, [r4, #4]
 80067ba:	4299      	cmp	r1, r3
 80067bc:	dd41      	ble.n	8006842 <_printf_float+0x1be>
 80067be:	f1ab 0b02 	sub.w	fp, fp, #2
 80067c2:	fa5f fb8b 	uxtb.w	fp, fp
 80067c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067ca:	d820      	bhi.n	800680e <_printf_float+0x18a>
 80067cc:	3901      	subs	r1, #1
 80067ce:	465a      	mov	r2, fp
 80067d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067d4:	9109      	str	r1, [sp, #36]	; 0x24
 80067d6:	f7ff ff17 	bl	8006608 <__exponent>
 80067da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067dc:	1813      	adds	r3, r2, r0
 80067de:	2a01      	cmp	r2, #1
 80067e0:	4681      	mov	r9, r0
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	dc02      	bgt.n	80067ec <_printf_float+0x168>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	07d2      	lsls	r2, r2, #31
 80067ea:	d501      	bpl.n	80067f0 <_printf_float+0x16c>
 80067ec:	3301      	adds	r3, #1
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d09c      	beq.n	8006732 <_printf_float+0xae>
 80067f8:	232d      	movs	r3, #45	; 0x2d
 80067fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fe:	e798      	b.n	8006732 <_printf_float+0xae>
 8006800:	9a06      	ldr	r2, [sp, #24]
 8006802:	2a47      	cmp	r2, #71	; 0x47
 8006804:	d1be      	bne.n	8006784 <_printf_float+0x100>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1bc      	bne.n	8006784 <_printf_float+0x100>
 800680a:	2301      	movs	r3, #1
 800680c:	e7b9      	b.n	8006782 <_printf_float+0xfe>
 800680e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006812:	d118      	bne.n	8006846 <_printf_float+0x1c2>
 8006814:	2900      	cmp	r1, #0
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	dd0b      	ble.n	8006832 <_printf_float+0x1ae>
 800681a:	6121      	str	r1, [r4, #16]
 800681c:	b913      	cbnz	r3, 8006824 <_printf_float+0x1a0>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	07d0      	lsls	r0, r2, #31
 8006822:	d502      	bpl.n	800682a <_printf_float+0x1a6>
 8006824:	3301      	adds	r3, #1
 8006826:	440b      	add	r3, r1
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	65a1      	str	r1, [r4, #88]	; 0x58
 800682c:	f04f 0900 	mov.w	r9, #0
 8006830:	e7de      	b.n	80067f0 <_printf_float+0x16c>
 8006832:	b913      	cbnz	r3, 800683a <_printf_float+0x1b6>
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	07d2      	lsls	r2, r2, #31
 8006838:	d501      	bpl.n	800683e <_printf_float+0x1ba>
 800683a:	3302      	adds	r3, #2
 800683c:	e7f4      	b.n	8006828 <_printf_float+0x1a4>
 800683e:	2301      	movs	r3, #1
 8006840:	e7f2      	b.n	8006828 <_printf_float+0x1a4>
 8006842:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006848:	4299      	cmp	r1, r3
 800684a:	db05      	blt.n	8006858 <_printf_float+0x1d4>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	6121      	str	r1, [r4, #16]
 8006850:	07d8      	lsls	r0, r3, #31
 8006852:	d5ea      	bpl.n	800682a <_printf_float+0x1a6>
 8006854:	1c4b      	adds	r3, r1, #1
 8006856:	e7e7      	b.n	8006828 <_printf_float+0x1a4>
 8006858:	2900      	cmp	r1, #0
 800685a:	bfd4      	ite	le
 800685c:	f1c1 0202 	rsble	r2, r1, #2
 8006860:	2201      	movgt	r2, #1
 8006862:	4413      	add	r3, r2
 8006864:	e7e0      	b.n	8006828 <_printf_float+0x1a4>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	055a      	lsls	r2, r3, #21
 800686a:	d407      	bmi.n	800687c <_printf_float+0x1f8>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	4642      	mov	r2, r8
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	d12c      	bne.n	80068d4 <_printf_float+0x250>
 800687a:	e764      	b.n	8006746 <_printf_float+0xc2>
 800687c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006880:	f240 80e0 	bls.w	8006a44 <_printf_float+0x3c0>
 8006884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006888:	2200      	movs	r2, #0
 800688a:	2300      	movs	r3, #0
 800688c:	f7fa f924 	bl	8000ad8 <__aeabi_dcmpeq>
 8006890:	2800      	cmp	r0, #0
 8006892:	d034      	beq.n	80068fe <_printf_float+0x27a>
 8006894:	4a37      	ldr	r2, [pc, #220]	; (8006974 <_printf_float+0x2f0>)
 8006896:	2301      	movs	r3, #1
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af51 	beq.w	8006746 <_printf_float+0xc2>
 80068a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a8:	429a      	cmp	r2, r3
 80068aa:	db02      	blt.n	80068b2 <_printf_float+0x22e>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07d8      	lsls	r0, r3, #31
 80068b0:	d510      	bpl.n	80068d4 <_printf_float+0x250>
 80068b2:	ee18 3a10 	vmov	r3, s16
 80068b6:	4652      	mov	r2, sl
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af41 	beq.w	8006746 <_printf_float+0xc2>
 80068c4:	f04f 0800 	mov.w	r8, #0
 80068c8:	f104 091a 	add.w	r9, r4, #26
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4543      	cmp	r3, r8
 80068d2:	dc09      	bgt.n	80068e8 <_printf_float+0x264>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	079b      	lsls	r3, r3, #30
 80068d8:	f100 8105 	bmi.w	8006ae6 <_printf_float+0x462>
 80068dc:	68e0      	ldr	r0, [r4, #12]
 80068de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e0:	4298      	cmp	r0, r3
 80068e2:	bfb8      	it	lt
 80068e4:	4618      	movlt	r0, r3
 80068e6:	e730      	b.n	800674a <_printf_float+0xc6>
 80068e8:	2301      	movs	r3, #1
 80068ea:	464a      	mov	r2, r9
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f af27 	beq.w	8006746 <_printf_float+0xc2>
 80068f8:	f108 0801 	add.w	r8, r8, #1
 80068fc:	e7e6      	b.n	80068cc <_printf_float+0x248>
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc39      	bgt.n	8006978 <_printf_float+0x2f4>
 8006904:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <_printf_float+0x2f0>)
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af19 	beq.w	8006746 <_printf_float+0xc2>
 8006914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006918:	4313      	orrs	r3, r2
 800691a:	d102      	bne.n	8006922 <_printf_float+0x29e>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	d5d8      	bpl.n	80068d4 <_printf_float+0x250>
 8006922:	ee18 3a10 	vmov	r3, s16
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af09 	beq.w	8006746 <_printf_float+0xc2>
 8006934:	f04f 0900 	mov.w	r9, #0
 8006938:	f104 0a1a 	add.w	sl, r4, #26
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	425b      	negs	r3, r3
 8006940:	454b      	cmp	r3, r9
 8006942:	dc01      	bgt.n	8006948 <_printf_float+0x2c4>
 8006944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006946:	e792      	b.n	800686e <_printf_float+0x1ea>
 8006948:	2301      	movs	r3, #1
 800694a:	4652      	mov	r2, sl
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f aef7 	beq.w	8006746 <_printf_float+0xc2>
 8006958:	f109 0901 	add.w	r9, r9, #1
 800695c:	e7ee      	b.n	800693c <_printf_float+0x2b8>
 800695e:	bf00      	nop
 8006960:	7fefffff 	.word	0x7fefffff
 8006964:	0800ae34 	.word	0x0800ae34
 8006968:	0800ae38 	.word	0x0800ae38
 800696c:	0800ae40 	.word	0x0800ae40
 8006970:	0800ae3c 	.word	0x0800ae3c
 8006974:	0800ae44 	.word	0x0800ae44
 8006978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800697c:	429a      	cmp	r2, r3
 800697e:	bfa8      	it	ge
 8006980:	461a      	movge	r2, r3
 8006982:	2a00      	cmp	r2, #0
 8006984:	4691      	mov	r9, r2
 8006986:	dc37      	bgt.n	80069f8 <_printf_float+0x374>
 8006988:	f04f 0b00 	mov.w	fp, #0
 800698c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006990:	f104 021a 	add.w	r2, r4, #26
 8006994:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	eba3 0309 	sub.w	r3, r3, r9
 800699c:	455b      	cmp	r3, fp
 800699e:	dc33      	bgt.n	8006a08 <_printf_float+0x384>
 80069a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a4:	429a      	cmp	r2, r3
 80069a6:	db3b      	blt.n	8006a20 <_printf_float+0x39c>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	07da      	lsls	r2, r3, #31
 80069ac:	d438      	bmi.n	8006a20 <_printf_float+0x39c>
 80069ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	eba2 0901 	sub.w	r9, r2, r1
 80069ba:	4599      	cmp	r9, r3
 80069bc:	bfa8      	it	ge
 80069be:	4699      	movge	r9, r3
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	dc35      	bgt.n	8006a32 <_printf_float+0x3ae>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ce:	f104 0a1a 	add.w	sl, r4, #26
 80069d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	eba3 0309 	sub.w	r3, r3, r9
 80069dc:	4543      	cmp	r3, r8
 80069de:	f77f af79 	ble.w	80068d4 <_printf_float+0x250>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f aeaa 	beq.w	8006746 <_printf_float+0xc2>
 80069f2:	f108 0801 	add.w	r8, r8, #1
 80069f6:	e7ec      	b.n	80069d2 <_printf_float+0x34e>
 80069f8:	4613      	mov	r3, r2
 80069fa:	4631      	mov	r1, r6
 80069fc:	4642      	mov	r2, r8
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	d1c0      	bne.n	8006988 <_printf_float+0x304>
 8006a06:	e69e      	b.n	8006746 <_printf_float+0xc2>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	9205      	str	r2, [sp, #20]
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f ae97 	beq.w	8006746 <_printf_float+0xc2>
 8006a18:	9a05      	ldr	r2, [sp, #20]
 8006a1a:	f10b 0b01 	add.w	fp, fp, #1
 8006a1e:	e7b9      	b.n	8006994 <_printf_float+0x310>
 8006a20:	ee18 3a10 	vmov	r3, s16
 8006a24:	4652      	mov	r2, sl
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d1be      	bne.n	80069ae <_printf_float+0x32a>
 8006a30:	e689      	b.n	8006746 <_printf_float+0xc2>
 8006a32:	9a05      	ldr	r2, [sp, #20]
 8006a34:	464b      	mov	r3, r9
 8006a36:	4442      	add	r2, r8
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d1c1      	bne.n	80069c6 <_printf_float+0x342>
 8006a42:	e680      	b.n	8006746 <_printf_float+0xc2>
 8006a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a46:	2a01      	cmp	r2, #1
 8006a48:	dc01      	bgt.n	8006a4e <_printf_float+0x3ca>
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d538      	bpl.n	8006ac0 <_printf_float+0x43c>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4642      	mov	r2, r8
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae74 	beq.w	8006746 <_printf_float+0xc2>
 8006a5e:	ee18 3a10 	vmov	r3, s16
 8006a62:	4652      	mov	r2, sl
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f ae6b 	beq.w	8006746 <_printf_float+0xc2>
 8006a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	f7fa f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a7c:	b9d8      	cbnz	r0, 8006ab6 <_printf_float+0x432>
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a80:	f108 0201 	add.w	r2, r8, #1
 8006a84:	3b01      	subs	r3, #1
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d10e      	bne.n	8006aae <_printf_float+0x42a>
 8006a90:	e659      	b.n	8006746 <_printf_float+0xc2>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4652      	mov	r2, sl
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae52 	beq.w	8006746 <_printf_float+0xc2>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4543      	cmp	r3, r8
 8006aac:	dcf1      	bgt.n	8006a92 <_printf_float+0x40e>
 8006aae:	464b      	mov	r3, r9
 8006ab0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ab4:	e6dc      	b.n	8006870 <_printf_float+0x1ec>
 8006ab6:	f04f 0800 	mov.w	r8, #0
 8006aba:	f104 0a1a 	add.w	sl, r4, #26
 8006abe:	e7f2      	b.n	8006aa6 <_printf_float+0x422>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4642      	mov	r2, r8
 8006ac4:	e7df      	b.n	8006a86 <_printf_float+0x402>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	464a      	mov	r2, r9
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f ae38 	beq.w	8006746 <_printf_float+0xc2>
 8006ad6:	f108 0801 	add.w	r8, r8, #1
 8006ada:	68e3      	ldr	r3, [r4, #12]
 8006adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ade:	1a5b      	subs	r3, r3, r1
 8006ae0:	4543      	cmp	r3, r8
 8006ae2:	dcf0      	bgt.n	8006ac6 <_printf_float+0x442>
 8006ae4:	e6fa      	b.n	80068dc <_printf_float+0x258>
 8006ae6:	f04f 0800 	mov.w	r8, #0
 8006aea:	f104 0919 	add.w	r9, r4, #25
 8006aee:	e7f4      	b.n	8006ada <_printf_float+0x456>

08006af0 <_printf_common>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	4616      	mov	r6, r2
 8006af6:	4699      	mov	r9, r3
 8006af8:	688a      	ldr	r2, [r1, #8]
 8006afa:	690b      	ldr	r3, [r1, #16]
 8006afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bfb8      	it	lt
 8006b04:	4613      	movlt	r3, r2
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b10a      	cbz	r2, 8006b16 <_printf_common+0x26>
 8006b12:	3301      	adds	r3, #1
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	0699      	lsls	r1, r3, #26
 8006b1a:	bf42      	ittt	mi
 8006b1c:	6833      	ldrmi	r3, [r6, #0]
 8006b1e:	3302      	addmi	r3, #2
 8006b20:	6033      	strmi	r3, [r6, #0]
 8006b22:	6825      	ldr	r5, [r4, #0]
 8006b24:	f015 0506 	ands.w	r5, r5, #6
 8006b28:	d106      	bne.n	8006b38 <_printf_common+0x48>
 8006b2a:	f104 0a19 	add.w	sl, r4, #25
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	6832      	ldr	r2, [r6, #0]
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dc26      	bgt.n	8006b86 <_printf_common+0x96>
 8006b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b3c:	1e13      	subs	r3, r2, #0
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	bf18      	it	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	0692      	lsls	r2, r2, #26
 8006b46:	d42b      	bmi.n	8006ba0 <_printf_common+0xb0>
 8006b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	3001      	adds	r0, #1
 8006b54:	d01e      	beq.n	8006b94 <_printf_common+0xa4>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	68e5      	ldr	r5, [r4, #12]
 8006b5a:	6832      	ldr	r2, [r6, #0]
 8006b5c:	f003 0306 	and.w	r3, r3, #6
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	bf08      	it	eq
 8006b64:	1aad      	subeq	r5, r5, r2
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	bf0c      	ite	eq
 8006b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b70:	2500      	movne	r5, #0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bfc4      	itt	gt
 8006b76:	1a9b      	subgt	r3, r3, r2
 8006b78:	18ed      	addgt	r5, r5, r3
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	341a      	adds	r4, #26
 8006b7e:	42b5      	cmp	r5, r6
 8006b80:	d11a      	bne.n	8006bb8 <_printf_common+0xc8>
 8006b82:	2000      	movs	r0, #0
 8006b84:	e008      	b.n	8006b98 <_printf_common+0xa8>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4652      	mov	r2, sl
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	47c0      	blx	r8
 8006b90:	3001      	adds	r0, #1
 8006b92:	d103      	bne.n	8006b9c <_printf_common+0xac>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	e7c6      	b.n	8006b2e <_printf_common+0x3e>
 8006ba0:	18e1      	adds	r1, r4, r3
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	2030      	movs	r0, #48	; 0x30
 8006ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006baa:	4422      	add	r2, r4
 8006bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	e7c7      	b.n	8006b48 <_printf_common+0x58>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4622      	mov	r2, r4
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	47c0      	blx	r8
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d0e6      	beq.n	8006b94 <_printf_common+0xa4>
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7d9      	b.n	8006b7e <_printf_common+0x8e>
	...

08006bcc <_printf_i>:
 8006bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	4691      	mov	r9, r2
 8006bd4:	7e27      	ldrb	r7, [r4, #24]
 8006bd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bd8:	2f78      	cmp	r7, #120	; 0x78
 8006bda:	4680      	mov	r8, r0
 8006bdc:	469a      	mov	sl, r3
 8006bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be2:	d807      	bhi.n	8006bf4 <_printf_i+0x28>
 8006be4:	2f62      	cmp	r7, #98	; 0x62
 8006be6:	d80a      	bhi.n	8006bfe <_printf_i+0x32>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	f000 80d8 	beq.w	8006d9e <_printf_i+0x1d2>
 8006bee:	2f58      	cmp	r7, #88	; 0x58
 8006bf0:	f000 80a3 	beq.w	8006d3a <_printf_i+0x16e>
 8006bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bfc:	e03a      	b.n	8006c74 <_printf_i+0xa8>
 8006bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c02:	2b15      	cmp	r3, #21
 8006c04:	d8f6      	bhi.n	8006bf4 <_printf_i+0x28>
 8006c06:	a001      	add	r0, pc, #4	; (adr r0, 8006c0c <_printf_i+0x40>)
 8006c08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c79 	.word	0x08006c79
 8006c14:	08006bf5 	.word	0x08006bf5
 8006c18:	08006bf5 	.word	0x08006bf5
 8006c1c:	08006bf5 	.word	0x08006bf5
 8006c20:	08006bf5 	.word	0x08006bf5
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006bf5 	.word	0x08006bf5
 8006c2c:	08006bf5 	.word	0x08006bf5
 8006c30:	08006bf5 	.word	0x08006bf5
 8006c34:	08006bf5 	.word	0x08006bf5
 8006c38:	08006d85 	.word	0x08006d85
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006d67 	.word	0x08006d67
 8006c44:	08006bf5 	.word	0x08006bf5
 8006c48:	08006bf5 	.word	0x08006bf5
 8006c4c:	08006da7 	.word	0x08006da7
 8006c50:	08006bf5 	.word	0x08006bf5
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006bf5 	.word	0x08006bf5
 8006c5c:	08006bf5 	.word	0x08006bf5
 8006c60:	08006d6f 	.word	0x08006d6f
 8006c64:	680b      	ldr	r3, [r1, #0]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	600a      	str	r2, [r1, #0]
 8006c6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0a3      	b.n	8006dc0 <_printf_i+0x1f4>
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	6808      	ldr	r0, [r1, #0]
 8006c7c:	062e      	lsls	r6, r5, #24
 8006c7e:	f100 0304 	add.w	r3, r0, #4
 8006c82:	d50a      	bpl.n	8006c9a <_printf_i+0xce>
 8006c84:	6805      	ldr	r5, [r0, #0]
 8006c86:	600b      	str	r3, [r1, #0]
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	da03      	bge.n	8006c94 <_printf_i+0xc8>
 8006c8c:	232d      	movs	r3, #45	; 0x2d
 8006c8e:	426d      	negs	r5, r5
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c94:	485e      	ldr	r0, [pc, #376]	; (8006e10 <_printf_i+0x244>)
 8006c96:	230a      	movs	r3, #10
 8006c98:	e019      	b.n	8006cce <_printf_i+0x102>
 8006c9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c9e:	6805      	ldr	r5, [r0, #0]
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	bf18      	it	ne
 8006ca4:	b22d      	sxthne	r5, r5
 8006ca6:	e7ef      	b.n	8006c88 <_printf_i+0xbc>
 8006ca8:	680b      	ldr	r3, [r1, #0]
 8006caa:	6825      	ldr	r5, [r4, #0]
 8006cac:	1d18      	adds	r0, r3, #4
 8006cae:	6008      	str	r0, [r1, #0]
 8006cb0:	0628      	lsls	r0, r5, #24
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0xec>
 8006cb4:	681d      	ldr	r5, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0xf2>
 8006cb8:	0669      	lsls	r1, r5, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0xe8>
 8006cbc:	881d      	ldrh	r5, [r3, #0]
 8006cbe:	4854      	ldr	r0, [pc, #336]	; (8006e10 <_printf_i+0x244>)
 8006cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2308      	moveq	r3, #8
 8006cc6:	230a      	movne	r3, #10
 8006cc8:	2100      	movs	r1, #0
 8006cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cce:	6866      	ldr	r6, [r4, #4]
 8006cd0:	60a6      	str	r6, [r4, #8]
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	bfa2      	ittt	ge
 8006cd6:	6821      	ldrge	r1, [r4, #0]
 8006cd8:	f021 0104 	bicge.w	r1, r1, #4
 8006cdc:	6021      	strge	r1, [r4, #0]
 8006cde:	b90d      	cbnz	r5, 8006ce4 <_printf_i+0x118>
 8006ce0:	2e00      	cmp	r6, #0
 8006ce2:	d04d      	beq.n	8006d80 <_printf_i+0x1b4>
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cea:	fb03 5711 	mls	r7, r3, r1, r5
 8006cee:	5dc7      	ldrb	r7, [r0, r7]
 8006cf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cf4:	462f      	mov	r7, r5
 8006cf6:	42bb      	cmp	r3, r7
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	d9f4      	bls.n	8006ce6 <_printf_i+0x11a>
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d10b      	bne.n	8006d18 <_printf_i+0x14c>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07df      	lsls	r7, r3, #31
 8006d04:	d508      	bpl.n	8006d18 <_printf_i+0x14c>
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	6861      	ldr	r1, [r4, #4]
 8006d0a:	4299      	cmp	r1, r3
 8006d0c:	bfde      	ittt	le
 8006d0e:	2330      	movle	r3, #48	; 0x30
 8006d10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d14:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006d18:	1b92      	subs	r2, r2, r6
 8006d1a:	6122      	str	r2, [r4, #16]
 8006d1c:	f8cd a000 	str.w	sl, [sp]
 8006d20:	464b      	mov	r3, r9
 8006d22:	aa03      	add	r2, sp, #12
 8006d24:	4621      	mov	r1, r4
 8006d26:	4640      	mov	r0, r8
 8006d28:	f7ff fee2 	bl	8006af0 <_printf_common>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d14c      	bne.n	8006dca <_printf_i+0x1fe>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d34:	b004      	add	sp, #16
 8006d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3a:	4835      	ldr	r0, [pc, #212]	; (8006e10 <_printf_i+0x244>)
 8006d3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	680e      	ldr	r6, [r1, #0]
 8006d44:	061f      	lsls	r7, r3, #24
 8006d46:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d4a:	600e      	str	r6, [r1, #0]
 8006d4c:	d514      	bpl.n	8006d78 <_printf_i+0x1ac>
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	bf44      	itt	mi
 8006d52:	f043 0320 	orrmi.w	r3, r3, #32
 8006d56:	6023      	strmi	r3, [r4, #0]
 8006d58:	b91d      	cbnz	r5, 8006d62 <_printf_i+0x196>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f023 0320 	bic.w	r3, r3, #32
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	2310      	movs	r3, #16
 8006d64:	e7b0      	b.n	8006cc8 <_printf_i+0xfc>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f043 0320 	orr.w	r3, r3, #32
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	2378      	movs	r3, #120	; 0x78
 8006d70:	4828      	ldr	r0, [pc, #160]	; (8006e14 <_printf_i+0x248>)
 8006d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d76:	e7e3      	b.n	8006d40 <_printf_i+0x174>
 8006d78:	065e      	lsls	r6, r3, #25
 8006d7a:	bf48      	it	mi
 8006d7c:	b2ad      	uxthmi	r5, r5
 8006d7e:	e7e6      	b.n	8006d4e <_printf_i+0x182>
 8006d80:	4616      	mov	r6, r2
 8006d82:	e7bb      	b.n	8006cfc <_printf_i+0x130>
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	6826      	ldr	r6, [r4, #0]
 8006d88:	6960      	ldr	r0, [r4, #20]
 8006d8a:	1d1d      	adds	r5, r3, #4
 8006d8c:	600d      	str	r5, [r1, #0]
 8006d8e:	0635      	lsls	r5, r6, #24
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	d501      	bpl.n	8006d98 <_printf_i+0x1cc>
 8006d94:	6018      	str	r0, [r3, #0]
 8006d96:	e002      	b.n	8006d9e <_printf_i+0x1d2>
 8006d98:	0671      	lsls	r1, r6, #25
 8006d9a:	d5fb      	bpl.n	8006d94 <_printf_i+0x1c8>
 8006d9c:	8018      	strh	r0, [r3, #0]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	4616      	mov	r6, r2
 8006da4:	e7ba      	b.n	8006d1c <_printf_i+0x150>
 8006da6:	680b      	ldr	r3, [r1, #0]
 8006da8:	1d1a      	adds	r2, r3, #4
 8006daa:	600a      	str	r2, [r1, #0]
 8006dac:	681e      	ldr	r6, [r3, #0]
 8006dae:	6862      	ldr	r2, [r4, #4]
 8006db0:	2100      	movs	r1, #0
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7f9 fa1c 	bl	80001f0 <memchr>
 8006db8:	b108      	cbz	r0, 8006dbe <_printf_i+0x1f2>
 8006dba:	1b80      	subs	r0, r0, r6
 8006dbc:	6060      	str	r0, [r4, #4]
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	6123      	str	r3, [r4, #16]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc8:	e7a8      	b.n	8006d1c <_printf_i+0x150>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	4632      	mov	r2, r6
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	47d0      	blx	sl
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d0ab      	beq.n	8006d30 <_printf_i+0x164>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	079b      	lsls	r3, r3, #30
 8006ddc:	d413      	bmi.n	8006e06 <_printf_i+0x23a>
 8006dde:	68e0      	ldr	r0, [r4, #12]
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	4298      	cmp	r0, r3
 8006de4:	bfb8      	it	lt
 8006de6:	4618      	movlt	r0, r3
 8006de8:	e7a4      	b.n	8006d34 <_printf_i+0x168>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4632      	mov	r2, r6
 8006dee:	4649      	mov	r1, r9
 8006df0:	4640      	mov	r0, r8
 8006df2:	47d0      	blx	sl
 8006df4:	3001      	adds	r0, #1
 8006df6:	d09b      	beq.n	8006d30 <_printf_i+0x164>
 8006df8:	3501      	adds	r5, #1
 8006dfa:	68e3      	ldr	r3, [r4, #12]
 8006dfc:	9903      	ldr	r1, [sp, #12]
 8006dfe:	1a5b      	subs	r3, r3, r1
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	dcf2      	bgt.n	8006dea <_printf_i+0x21e>
 8006e04:	e7eb      	b.n	8006dde <_printf_i+0x212>
 8006e06:	2500      	movs	r5, #0
 8006e08:	f104 0619 	add.w	r6, r4, #25
 8006e0c:	e7f5      	b.n	8006dfa <_printf_i+0x22e>
 8006e0e:	bf00      	nop
 8006e10:	0800ae46 	.word	0x0800ae46
 8006e14:	0800ae57 	.word	0x0800ae57

08006e18 <_scanf_float>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	4617      	mov	r7, r2
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	688b      	ldr	r3, [r1, #8]
 8006e24:	1e5a      	subs	r2, r3, #1
 8006e26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e2a:	bf83      	ittte	hi
 8006e2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e30:	195b      	addhi	r3, r3, r5
 8006e32:	9302      	strhi	r3, [sp, #8]
 8006e34:	2300      	movls	r3, #0
 8006e36:	bf86      	itte	hi
 8006e38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e3c:	608b      	strhi	r3, [r1, #8]
 8006e3e:	9302      	strls	r3, [sp, #8]
 8006e40:	680b      	ldr	r3, [r1, #0]
 8006e42:	468b      	mov	fp, r1
 8006e44:	2500      	movs	r5, #0
 8006e46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e4a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e52:	4680      	mov	r8, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	465e      	mov	r6, fp
 8006e58:	46aa      	mov	sl, r5
 8006e5a:	46a9      	mov	r9, r5
 8006e5c:	9501      	str	r5, [sp, #4]
 8006e5e:	68a2      	ldr	r2, [r4, #8]
 8006e60:	b152      	cbz	r2, 8006e78 <_scanf_float+0x60>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b4e      	cmp	r3, #78	; 0x4e
 8006e68:	d864      	bhi.n	8006f34 <_scanf_float+0x11c>
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	d83c      	bhi.n	8006ee8 <_scanf_float+0xd0>
 8006e6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e72:	b2c8      	uxtb	r0, r1
 8006e74:	280e      	cmp	r0, #14
 8006e76:	d93a      	bls.n	8006eee <_scanf_float+0xd6>
 8006e78:	f1b9 0f00 	cmp.w	r9, #0
 8006e7c:	d003      	beq.n	8006e86 <_scanf_float+0x6e>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e8a:	f1ba 0f01 	cmp.w	sl, #1
 8006e8e:	f200 8113 	bhi.w	80070b8 <_scanf_float+0x2a0>
 8006e92:	455e      	cmp	r6, fp
 8006e94:	f200 8105 	bhi.w	80070a2 <_scanf_float+0x28a>
 8006e98:	2501      	movs	r5, #1
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	b007      	add	sp, #28
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ea6:	2a0d      	cmp	r2, #13
 8006ea8:	d8e6      	bhi.n	8006e78 <_scanf_float+0x60>
 8006eaa:	a101      	add	r1, pc, #4	; (adr r1, 8006eb0 <_scanf_float+0x98>)
 8006eac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006eb0:	08006fef 	.word	0x08006fef
 8006eb4:	08006e79 	.word	0x08006e79
 8006eb8:	08006e79 	.word	0x08006e79
 8006ebc:	08006e79 	.word	0x08006e79
 8006ec0:	0800704f 	.word	0x0800704f
 8006ec4:	08007027 	.word	0x08007027
 8006ec8:	08006e79 	.word	0x08006e79
 8006ecc:	08006e79 	.word	0x08006e79
 8006ed0:	08006ffd 	.word	0x08006ffd
 8006ed4:	08006e79 	.word	0x08006e79
 8006ed8:	08006e79 	.word	0x08006e79
 8006edc:	08006e79 	.word	0x08006e79
 8006ee0:	08006e79 	.word	0x08006e79
 8006ee4:	08006fb5 	.word	0x08006fb5
 8006ee8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006eec:	e7db      	b.n	8006ea6 <_scanf_float+0x8e>
 8006eee:	290e      	cmp	r1, #14
 8006ef0:	d8c2      	bhi.n	8006e78 <_scanf_float+0x60>
 8006ef2:	a001      	add	r0, pc, #4	; (adr r0, 8006ef8 <_scanf_float+0xe0>)
 8006ef4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ef8:	08006fa7 	.word	0x08006fa7
 8006efc:	08006e79 	.word	0x08006e79
 8006f00:	08006fa7 	.word	0x08006fa7
 8006f04:	0800703b 	.word	0x0800703b
 8006f08:	08006e79 	.word	0x08006e79
 8006f0c:	08006f55 	.word	0x08006f55
 8006f10:	08006f91 	.word	0x08006f91
 8006f14:	08006f91 	.word	0x08006f91
 8006f18:	08006f91 	.word	0x08006f91
 8006f1c:	08006f91 	.word	0x08006f91
 8006f20:	08006f91 	.word	0x08006f91
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f91 	.word	0x08006f91
 8006f30:	08006f91 	.word	0x08006f91
 8006f34:	2b6e      	cmp	r3, #110	; 0x6e
 8006f36:	d809      	bhi.n	8006f4c <_scanf_float+0x134>
 8006f38:	2b60      	cmp	r3, #96	; 0x60
 8006f3a:	d8b2      	bhi.n	8006ea2 <_scanf_float+0x8a>
 8006f3c:	2b54      	cmp	r3, #84	; 0x54
 8006f3e:	d077      	beq.n	8007030 <_scanf_float+0x218>
 8006f40:	2b59      	cmp	r3, #89	; 0x59
 8006f42:	d199      	bne.n	8006e78 <_scanf_float+0x60>
 8006f44:	2d07      	cmp	r5, #7
 8006f46:	d197      	bne.n	8006e78 <_scanf_float+0x60>
 8006f48:	2508      	movs	r5, #8
 8006f4a:	e029      	b.n	8006fa0 <_scanf_float+0x188>
 8006f4c:	2b74      	cmp	r3, #116	; 0x74
 8006f4e:	d06f      	beq.n	8007030 <_scanf_float+0x218>
 8006f50:	2b79      	cmp	r3, #121	; 0x79
 8006f52:	e7f6      	b.n	8006f42 <_scanf_float+0x12a>
 8006f54:	6821      	ldr	r1, [r4, #0]
 8006f56:	05c8      	lsls	r0, r1, #23
 8006f58:	d51a      	bpl.n	8006f90 <_scanf_float+0x178>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f60:	6021      	str	r1, [r4, #0]
 8006f62:	f109 0901 	add.w	r9, r9, #1
 8006f66:	b11b      	cbz	r3, 8006f70 <_scanf_float+0x158>
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	9302      	str	r3, [sp, #8]
 8006f6e:	60a2      	str	r2, [r4, #8]
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	607b      	str	r3, [r7, #4]
 8006f84:	f340 8084 	ble.w	8007090 <_scanf_float+0x278>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	e766      	b.n	8006e5e <_scanf_float+0x46>
 8006f90:	eb1a 0f05 	cmn.w	sl, r5
 8006f94:	f47f af70 	bne.w	8006e78 <_scanf_float+0x60>
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f9e:	6022      	str	r2, [r4, #0]
 8006fa0:	f806 3b01 	strb.w	r3, [r6], #1
 8006fa4:	e7e4      	b.n	8006f70 <_scanf_float+0x158>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	0610      	lsls	r0, r2, #24
 8006faa:	f57f af65 	bpl.w	8006e78 <_scanf_float+0x60>
 8006fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb2:	e7f4      	b.n	8006f9e <_scanf_float+0x186>
 8006fb4:	f1ba 0f00 	cmp.w	sl, #0
 8006fb8:	d10e      	bne.n	8006fd8 <_scanf_float+0x1c0>
 8006fba:	f1b9 0f00 	cmp.w	r9, #0
 8006fbe:	d10e      	bne.n	8006fde <_scanf_float+0x1c6>
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fca:	d108      	bne.n	8006fde <_scanf_float+0x1c6>
 8006fcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fd0:	6022      	str	r2, [r4, #0]
 8006fd2:	f04f 0a01 	mov.w	sl, #1
 8006fd6:	e7e3      	b.n	8006fa0 <_scanf_float+0x188>
 8006fd8:	f1ba 0f02 	cmp.w	sl, #2
 8006fdc:	d055      	beq.n	800708a <_scanf_float+0x272>
 8006fde:	2d01      	cmp	r5, #1
 8006fe0:	d002      	beq.n	8006fe8 <_scanf_float+0x1d0>
 8006fe2:	2d04      	cmp	r5, #4
 8006fe4:	f47f af48 	bne.w	8006e78 <_scanf_float+0x60>
 8006fe8:	3501      	adds	r5, #1
 8006fea:	b2ed      	uxtb	r5, r5
 8006fec:	e7d8      	b.n	8006fa0 <_scanf_float+0x188>
 8006fee:	f1ba 0f01 	cmp.w	sl, #1
 8006ff2:	f47f af41 	bne.w	8006e78 <_scanf_float+0x60>
 8006ff6:	f04f 0a02 	mov.w	sl, #2
 8006ffa:	e7d1      	b.n	8006fa0 <_scanf_float+0x188>
 8006ffc:	b97d      	cbnz	r5, 800701e <_scanf_float+0x206>
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	f47f af3c 	bne.w	8006e7e <_scanf_float+0x66>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800700c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007010:	f47f af39 	bne.w	8006e86 <_scanf_float+0x6e>
 8007014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007018:	6022      	str	r2, [r4, #0]
 800701a:	2501      	movs	r5, #1
 800701c:	e7c0      	b.n	8006fa0 <_scanf_float+0x188>
 800701e:	2d03      	cmp	r5, #3
 8007020:	d0e2      	beq.n	8006fe8 <_scanf_float+0x1d0>
 8007022:	2d05      	cmp	r5, #5
 8007024:	e7de      	b.n	8006fe4 <_scanf_float+0x1cc>
 8007026:	2d02      	cmp	r5, #2
 8007028:	f47f af26 	bne.w	8006e78 <_scanf_float+0x60>
 800702c:	2503      	movs	r5, #3
 800702e:	e7b7      	b.n	8006fa0 <_scanf_float+0x188>
 8007030:	2d06      	cmp	r5, #6
 8007032:	f47f af21 	bne.w	8006e78 <_scanf_float+0x60>
 8007036:	2507      	movs	r5, #7
 8007038:	e7b2      	b.n	8006fa0 <_scanf_float+0x188>
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	0591      	lsls	r1, r2, #22
 800703e:	f57f af1b 	bpl.w	8006e78 <_scanf_float+0x60>
 8007042:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	f8cd 9004 	str.w	r9, [sp, #4]
 800704c:	e7a8      	b.n	8006fa0 <_scanf_float+0x188>
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007054:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007058:	d006      	beq.n	8007068 <_scanf_float+0x250>
 800705a:	0550      	lsls	r0, r2, #21
 800705c:	f57f af0c 	bpl.w	8006e78 <_scanf_float+0x60>
 8007060:	f1b9 0f00 	cmp.w	r9, #0
 8007064:	f43f af0f 	beq.w	8006e86 <_scanf_float+0x6e>
 8007068:	0591      	lsls	r1, r2, #22
 800706a:	bf58      	it	pl
 800706c:	9901      	ldrpl	r1, [sp, #4]
 800706e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007072:	bf58      	it	pl
 8007074:	eba9 0101 	subpl.w	r1, r9, r1
 8007078:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800707c:	bf58      	it	pl
 800707e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	e78a      	b.n	8006fa0 <_scanf_float+0x188>
 800708a:	f04f 0a03 	mov.w	sl, #3
 800708e:	e787      	b.n	8006fa0 <_scanf_float+0x188>
 8007090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007094:	4639      	mov	r1, r7
 8007096:	4640      	mov	r0, r8
 8007098:	4798      	blx	r3
 800709a:	2800      	cmp	r0, #0
 800709c:	f43f aedf 	beq.w	8006e5e <_scanf_float+0x46>
 80070a0:	e6ea      	b.n	8006e78 <_scanf_float+0x60>
 80070a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070aa:	463a      	mov	r2, r7
 80070ac:	4640      	mov	r0, r8
 80070ae:	4798      	blx	r3
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	e6ec      	b.n	8006e92 <_scanf_float+0x7a>
 80070b8:	1e6b      	subs	r3, r5, #1
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d825      	bhi.n	800710a <_scanf_float+0x2f2>
 80070be:	2d02      	cmp	r5, #2
 80070c0:	d836      	bhi.n	8007130 <_scanf_float+0x318>
 80070c2:	455e      	cmp	r6, fp
 80070c4:	f67f aee8 	bls.w	8006e98 <_scanf_float+0x80>
 80070c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070d0:	463a      	mov	r2, r7
 80070d2:	4640      	mov	r0, r8
 80070d4:	4798      	blx	r3
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	3b01      	subs	r3, #1
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	e7f1      	b.n	80070c2 <_scanf_float+0x2aa>
 80070de:	9802      	ldr	r0, [sp, #8]
 80070e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	463a      	mov	r2, r7
 80070ec:	4640      	mov	r0, r8
 80070ee:	4798      	blx	r3
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070fa:	fa5f fa8a 	uxtb.w	sl, sl
 80070fe:	f1ba 0f02 	cmp.w	sl, #2
 8007102:	d1ec      	bne.n	80070de <_scanf_float+0x2c6>
 8007104:	3d03      	subs	r5, #3
 8007106:	b2ed      	uxtb	r5, r5
 8007108:	1b76      	subs	r6, r6, r5
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	05da      	lsls	r2, r3, #23
 800710e:	d52f      	bpl.n	8007170 <_scanf_float+0x358>
 8007110:	055b      	lsls	r3, r3, #21
 8007112:	d510      	bpl.n	8007136 <_scanf_float+0x31e>
 8007114:	455e      	cmp	r6, fp
 8007116:	f67f aebf 	bls.w	8006e98 <_scanf_float+0x80>
 800711a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800711e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007122:	463a      	mov	r2, r7
 8007124:	4640      	mov	r0, r8
 8007126:	4798      	blx	r3
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	3b01      	subs	r3, #1
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	e7f1      	b.n	8007114 <_scanf_float+0x2fc>
 8007130:	46aa      	mov	sl, r5
 8007132:	9602      	str	r6, [sp, #8]
 8007134:	e7df      	b.n	80070f6 <_scanf_float+0x2de>
 8007136:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	2965      	cmp	r1, #101	; 0x65
 800713e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007142:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	d00c      	beq.n	8007164 <_scanf_float+0x34c>
 800714a:	2945      	cmp	r1, #69	; 0x45
 800714c:	d00a      	beq.n	8007164 <_scanf_float+0x34c>
 800714e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007152:	463a      	mov	r2, r7
 8007154:	4640      	mov	r0, r8
 8007156:	4798      	blx	r3
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800715e:	3b01      	subs	r3, #1
 8007160:	1eb5      	subs	r5, r6, #2
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007168:	463a      	mov	r2, r7
 800716a:	4640      	mov	r0, r8
 800716c:	4798      	blx	r3
 800716e:	462e      	mov	r6, r5
 8007170:	6825      	ldr	r5, [r4, #0]
 8007172:	f015 0510 	ands.w	r5, r5, #16
 8007176:	d158      	bne.n	800722a <_scanf_float+0x412>
 8007178:	7035      	strb	r5, [r6, #0]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007184:	d11c      	bne.n	80071c0 <_scanf_float+0x3a8>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	454b      	cmp	r3, r9
 800718a:	eba3 0209 	sub.w	r2, r3, r9
 800718e:	d124      	bne.n	80071da <_scanf_float+0x3c2>
 8007190:	2200      	movs	r2, #0
 8007192:	4659      	mov	r1, fp
 8007194:	4640      	mov	r0, r8
 8007196:	f000 fed1 	bl	8007f3c <_strtod_r>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f011 0f02 	tst.w	r1, #2
 80071a4:	ec57 6b10 	vmov	r6, r7, d0
 80071a8:	f103 0204 	add.w	r2, r3, #4
 80071ac:	d020      	beq.n	80071f0 <_scanf_float+0x3d8>
 80071ae:	9903      	ldr	r1, [sp, #12]
 80071b0:	600a      	str	r2, [r1, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	e9c3 6700 	strd	r6, r7, [r3]
 80071b8:	68e3      	ldr	r3, [r4, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60e3      	str	r3, [r4, #12]
 80071be:	e66c      	b.n	8006e9a <_scanf_float+0x82>
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0e4      	beq.n	8007190 <_scanf_float+0x378>
 80071c6:	9905      	ldr	r1, [sp, #20]
 80071c8:	230a      	movs	r3, #10
 80071ca:	462a      	mov	r2, r5
 80071cc:	3101      	adds	r1, #1
 80071ce:	4640      	mov	r0, r8
 80071d0:	f000 ff3e 	bl	8008050 <_strtol_r>
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	9e05      	ldr	r6, [sp, #20]
 80071d8:	1ac2      	subs	r2, r0, r3
 80071da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071de:	429e      	cmp	r6, r3
 80071e0:	bf28      	it	cs
 80071e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071e6:	4912      	ldr	r1, [pc, #72]	; (8007230 <_scanf_float+0x418>)
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f85f 	bl	80072ac <siprintf>
 80071ee:	e7cf      	b.n	8007190 <_scanf_float+0x378>
 80071f0:	f011 0f04 	tst.w	r1, #4
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	600a      	str	r2, [r1, #0]
 80071f8:	d1db      	bne.n	80071b2 <_scanf_float+0x39a>
 80071fa:	f8d3 8000 	ldr.w	r8, [r3]
 80071fe:	ee10 2a10 	vmov	r2, s0
 8007202:	ee10 0a10 	vmov	r0, s0
 8007206:	463b      	mov	r3, r7
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 fc97 	bl	8000b3c <__aeabi_dcmpun>
 800720e:	b128      	cbz	r0, 800721c <_scanf_float+0x404>
 8007210:	4808      	ldr	r0, [pc, #32]	; (8007234 <_scanf_float+0x41c>)
 8007212:	f000 f811 	bl	8007238 <nanf>
 8007216:	ed88 0a00 	vstr	s0, [r8]
 800721a:	e7cd      	b.n	80071b8 <_scanf_float+0x3a0>
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fcea 	bl	8000bf8 <__aeabi_d2f>
 8007224:	f8c8 0000 	str.w	r0, [r8]
 8007228:	e7c6      	b.n	80071b8 <_scanf_float+0x3a0>
 800722a:	2500      	movs	r5, #0
 800722c:	e635      	b.n	8006e9a <_scanf_float+0x82>
 800722e:	bf00      	nop
 8007230:	0800ae68 	.word	0x0800ae68
 8007234:	0800b280 	.word	0x0800b280

08007238 <nanf>:
 8007238:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007240 <nanf+0x8>
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	7fc00000 	.word	0x7fc00000

08007244 <sniprintf>:
 8007244:	b40c      	push	{r2, r3}
 8007246:	b530      	push	{r4, r5, lr}
 8007248:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <sniprintf+0x64>)
 800724a:	1e0c      	subs	r4, r1, #0
 800724c:	681d      	ldr	r5, [r3, #0]
 800724e:	b09d      	sub	sp, #116	; 0x74
 8007250:	da08      	bge.n	8007264 <sniprintf+0x20>
 8007252:	238b      	movs	r3, #139	; 0x8b
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800725a:	b01d      	add	sp, #116	; 0x74
 800725c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007260:	b002      	add	sp, #8
 8007262:	4770      	bx	lr
 8007264:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007268:	f8ad 3014 	strh.w	r3, [sp, #20]
 800726c:	bf14      	ite	ne
 800726e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007272:	4623      	moveq	r3, r4
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800727c:	9002      	str	r0, [sp, #8]
 800727e:	9006      	str	r0, [sp, #24]
 8007280:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007284:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007286:	ab21      	add	r3, sp, #132	; 0x84
 8007288:	a902      	add	r1, sp, #8
 800728a:	4628      	mov	r0, r5
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	f002 fec7 	bl	800a020 <_svfiprintf_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	bfbc      	itt	lt
 8007296:	238b      	movlt	r3, #139	; 0x8b
 8007298:	602b      	strlt	r3, [r5, #0]
 800729a:	2c00      	cmp	r4, #0
 800729c:	d0dd      	beq.n	800725a <sniprintf+0x16>
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	e7d9      	b.n	800725a <sniprintf+0x16>
 80072a6:	bf00      	nop
 80072a8:	20000108 	.word	0x20000108

080072ac <siprintf>:
 80072ac:	b40e      	push	{r1, r2, r3}
 80072ae:	b500      	push	{lr}
 80072b0:	b09c      	sub	sp, #112	; 0x70
 80072b2:	ab1d      	add	r3, sp, #116	; 0x74
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	9006      	str	r0, [sp, #24]
 80072b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072bc:	4809      	ldr	r0, [pc, #36]	; (80072e4 <siprintf+0x38>)
 80072be:	9107      	str	r1, [sp, #28]
 80072c0:	9104      	str	r1, [sp, #16]
 80072c2:	4909      	ldr	r1, [pc, #36]	; (80072e8 <siprintf+0x3c>)
 80072c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	a902      	add	r1, sp, #8
 80072d0:	f002 fea6 	bl	800a020 <_svfiprintf_r>
 80072d4:	9b02      	ldr	r3, [sp, #8]
 80072d6:	2200      	movs	r2, #0
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	b01c      	add	sp, #112	; 0x70
 80072dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e0:	b003      	add	sp, #12
 80072e2:	4770      	bx	lr
 80072e4:	20000108 	.word	0x20000108
 80072e8:	ffff0208 	.word	0xffff0208

080072ec <sulp>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	ec45 4b10 	vmov	d0, r4, r5
 80072f6:	4616      	mov	r6, r2
 80072f8:	f002 fc2e 	bl	8009b58 <__ulp>
 80072fc:	ec51 0b10 	vmov	r0, r1, d0
 8007300:	b17e      	cbz	r6, 8007322 <sulp+0x36>
 8007302:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007306:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd09      	ble.n	8007322 <sulp+0x36>
 800730e:	051b      	lsls	r3, r3, #20
 8007310:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007314:	2400      	movs	r4, #0
 8007316:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	f7f9 f973 	bl	8000608 <__aeabi_dmul>
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	0000      	movs	r0, r0
	...

08007328 <_strtod_l>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b0a3      	sub	sp, #140	; 0x8c
 800732e:	461f      	mov	r7, r3
 8007330:	2300      	movs	r3, #0
 8007332:	931e      	str	r3, [sp, #120]	; 0x78
 8007334:	4ba4      	ldr	r3, [pc, #656]	; (80075c8 <_strtod_l+0x2a0>)
 8007336:	9219      	str	r2, [sp, #100]	; 0x64
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9307      	str	r3, [sp, #28]
 800733c:	4604      	mov	r4, r0
 800733e:	4618      	mov	r0, r3
 8007340:	4688      	mov	r8, r1
 8007342:	f7f8 ff4d 	bl	80001e0 <strlen>
 8007346:	f04f 0a00 	mov.w	sl, #0
 800734a:	4605      	mov	r5, r0
 800734c:	f04f 0b00 	mov.w	fp, #0
 8007350:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007356:	781a      	ldrb	r2, [r3, #0]
 8007358:	2a2b      	cmp	r2, #43	; 0x2b
 800735a:	d04c      	beq.n	80073f6 <_strtod_l+0xce>
 800735c:	d839      	bhi.n	80073d2 <_strtod_l+0xaa>
 800735e:	2a0d      	cmp	r2, #13
 8007360:	d832      	bhi.n	80073c8 <_strtod_l+0xa0>
 8007362:	2a08      	cmp	r2, #8
 8007364:	d832      	bhi.n	80073cc <_strtod_l+0xa4>
 8007366:	2a00      	cmp	r2, #0
 8007368:	d03c      	beq.n	80073e4 <_strtod_l+0xbc>
 800736a:	2300      	movs	r3, #0
 800736c:	930e      	str	r3, [sp, #56]	; 0x38
 800736e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007370:	7833      	ldrb	r3, [r6, #0]
 8007372:	2b30      	cmp	r3, #48	; 0x30
 8007374:	f040 80b4 	bne.w	80074e0 <_strtod_l+0x1b8>
 8007378:	7873      	ldrb	r3, [r6, #1]
 800737a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800737e:	2b58      	cmp	r3, #88	; 0x58
 8007380:	d16c      	bne.n	800745c <_strtod_l+0x134>
 8007382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	ab1e      	add	r3, sp, #120	; 0x78
 8007388:	9702      	str	r7, [sp, #8]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	4a8f      	ldr	r2, [pc, #572]	; (80075cc <_strtod_l+0x2a4>)
 800738e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007390:	a91d      	add	r1, sp, #116	; 0x74
 8007392:	4620      	mov	r0, r4
 8007394:	f001 fd40 	bl	8008e18 <__gethex>
 8007398:	f010 0707 	ands.w	r7, r0, #7
 800739c:	4605      	mov	r5, r0
 800739e:	d005      	beq.n	80073ac <_strtod_l+0x84>
 80073a0:	2f06      	cmp	r7, #6
 80073a2:	d12a      	bne.n	80073fa <_strtod_l+0xd2>
 80073a4:	3601      	adds	r6, #1
 80073a6:	2300      	movs	r3, #0
 80073a8:	961d      	str	r6, [sp, #116]	; 0x74
 80073aa:	930e      	str	r3, [sp, #56]	; 0x38
 80073ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 8596 	bne.w	8007ee0 <_strtod_l+0xbb8>
 80073b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b6:	b1db      	cbz	r3, 80073f0 <_strtod_l+0xc8>
 80073b8:	4652      	mov	r2, sl
 80073ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073be:	ec43 2b10 	vmov	d0, r2, r3
 80073c2:	b023      	add	sp, #140	; 0x8c
 80073c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c8:	2a20      	cmp	r2, #32
 80073ca:	d1ce      	bne.n	800736a <_strtod_l+0x42>
 80073cc:	3301      	adds	r3, #1
 80073ce:	931d      	str	r3, [sp, #116]	; 0x74
 80073d0:	e7c0      	b.n	8007354 <_strtod_l+0x2c>
 80073d2:	2a2d      	cmp	r2, #45	; 0x2d
 80073d4:	d1c9      	bne.n	800736a <_strtod_l+0x42>
 80073d6:	2201      	movs	r2, #1
 80073d8:	920e      	str	r2, [sp, #56]	; 0x38
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	921d      	str	r2, [sp, #116]	; 0x74
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1c4      	bne.n	800736e <_strtod_l+0x46>
 80073e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 8576 	bne.w	8007edc <_strtod_l+0xbb4>
 80073f0:	4652      	mov	r2, sl
 80073f2:	465b      	mov	r3, fp
 80073f4:	e7e3      	b.n	80073be <_strtod_l+0x96>
 80073f6:	2200      	movs	r2, #0
 80073f8:	e7ee      	b.n	80073d8 <_strtod_l+0xb0>
 80073fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073fc:	b13a      	cbz	r2, 800740e <_strtod_l+0xe6>
 80073fe:	2135      	movs	r1, #53	; 0x35
 8007400:	a820      	add	r0, sp, #128	; 0x80
 8007402:	f002 fcb4 	bl	8009d6e <__copybits>
 8007406:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007408:	4620      	mov	r0, r4
 800740a:	f002 f879 	bl	8009500 <_Bfree>
 800740e:	3f01      	subs	r7, #1
 8007410:	2f05      	cmp	r7, #5
 8007412:	d807      	bhi.n	8007424 <_strtod_l+0xfc>
 8007414:	e8df f007 	tbb	[pc, r7]
 8007418:	1d180b0e 	.word	0x1d180b0e
 800741c:	030e      	.short	0x030e
 800741e:	f04f 0b00 	mov.w	fp, #0
 8007422:	46da      	mov	sl, fp
 8007424:	0728      	lsls	r0, r5, #28
 8007426:	d5c1      	bpl.n	80073ac <_strtod_l+0x84>
 8007428:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800742c:	e7be      	b.n	80073ac <_strtod_l+0x84>
 800742e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007432:	e7f7      	b.n	8007424 <_strtod_l+0xfc>
 8007434:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007438:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800743a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800743e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007442:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007446:	e7ed      	b.n	8007424 <_strtod_l+0xfc>
 8007448:	f8df b184 	ldr.w	fp, [pc, #388]	; 80075d0 <_strtod_l+0x2a8>
 800744c:	f04f 0a00 	mov.w	sl, #0
 8007450:	e7e8      	b.n	8007424 <_strtod_l+0xfc>
 8007452:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007456:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800745a:	e7e3      	b.n	8007424 <_strtod_l+0xfc>
 800745c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	921d      	str	r2, [sp, #116]	; 0x74
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b30      	cmp	r3, #48	; 0x30
 8007466:	d0f9      	beq.n	800745c <_strtod_l+0x134>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d09f      	beq.n	80073ac <_strtod_l+0x84>
 800746c:	2301      	movs	r3, #1
 800746e:	f04f 0900 	mov.w	r9, #0
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007476:	930a      	str	r3, [sp, #40]	; 0x28
 8007478:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800747c:	464f      	mov	r7, r9
 800747e:	220a      	movs	r2, #10
 8007480:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007482:	7806      	ldrb	r6, [r0, #0]
 8007484:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007488:	b2d9      	uxtb	r1, r3
 800748a:	2909      	cmp	r1, #9
 800748c:	d92a      	bls.n	80074e4 <_strtod_l+0x1bc>
 800748e:	9907      	ldr	r1, [sp, #28]
 8007490:	462a      	mov	r2, r5
 8007492:	f002 fedd 	bl	800a250 <strncmp>
 8007496:	b398      	cbz	r0, 8007500 <_strtod_l+0x1d8>
 8007498:	2000      	movs	r0, #0
 800749a:	4633      	mov	r3, r6
 800749c:	463d      	mov	r5, r7
 800749e:	9007      	str	r0, [sp, #28]
 80074a0:	4602      	mov	r2, r0
 80074a2:	2b65      	cmp	r3, #101	; 0x65
 80074a4:	d001      	beq.n	80074aa <_strtod_l+0x182>
 80074a6:	2b45      	cmp	r3, #69	; 0x45
 80074a8:	d118      	bne.n	80074dc <_strtod_l+0x1b4>
 80074aa:	b91d      	cbnz	r5, 80074b4 <_strtod_l+0x18c>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	4303      	orrs	r3, r0
 80074b0:	d098      	beq.n	80073e4 <_strtod_l+0xbc>
 80074b2:	2500      	movs	r5, #0
 80074b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80074b8:	f108 0301 	add.w	r3, r8, #1
 80074bc:	931d      	str	r3, [sp, #116]	; 0x74
 80074be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074c2:	2b2b      	cmp	r3, #43	; 0x2b
 80074c4:	d075      	beq.n	80075b2 <_strtod_l+0x28a>
 80074c6:	2b2d      	cmp	r3, #45	; 0x2d
 80074c8:	d07b      	beq.n	80075c2 <_strtod_l+0x29a>
 80074ca:	f04f 0c00 	mov.w	ip, #0
 80074ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80074d2:	2909      	cmp	r1, #9
 80074d4:	f240 8082 	bls.w	80075dc <_strtod_l+0x2b4>
 80074d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80074dc:	2600      	movs	r6, #0
 80074de:	e09d      	b.n	800761c <_strtod_l+0x2f4>
 80074e0:	2300      	movs	r3, #0
 80074e2:	e7c4      	b.n	800746e <_strtod_l+0x146>
 80074e4:	2f08      	cmp	r7, #8
 80074e6:	bfd8      	it	le
 80074e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80074ea:	f100 0001 	add.w	r0, r0, #1
 80074ee:	bfda      	itte	le
 80074f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80074f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80074f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074fa:	3701      	adds	r7, #1
 80074fc:	901d      	str	r0, [sp, #116]	; 0x74
 80074fe:	e7bf      	b.n	8007480 <_strtod_l+0x158>
 8007500:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007502:	195a      	adds	r2, r3, r5
 8007504:	921d      	str	r2, [sp, #116]	; 0x74
 8007506:	5d5b      	ldrb	r3, [r3, r5]
 8007508:	2f00      	cmp	r7, #0
 800750a:	d037      	beq.n	800757c <_strtod_l+0x254>
 800750c:	9007      	str	r0, [sp, #28]
 800750e:	463d      	mov	r5, r7
 8007510:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007514:	2a09      	cmp	r2, #9
 8007516:	d912      	bls.n	800753e <_strtod_l+0x216>
 8007518:	2201      	movs	r2, #1
 800751a:	e7c2      	b.n	80074a2 <_strtod_l+0x17a>
 800751c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	921d      	str	r2, [sp, #116]	; 0x74
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	3001      	adds	r0, #1
 8007526:	2b30      	cmp	r3, #48	; 0x30
 8007528:	d0f8      	beq.n	800751c <_strtod_l+0x1f4>
 800752a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800752e:	2a08      	cmp	r2, #8
 8007530:	f200 84db 	bhi.w	8007eea <_strtod_l+0xbc2>
 8007534:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007536:	9007      	str	r0, [sp, #28]
 8007538:	2000      	movs	r0, #0
 800753a:	920a      	str	r2, [sp, #40]	; 0x28
 800753c:	4605      	mov	r5, r0
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	f100 0201 	add.w	r2, r0, #1
 8007544:	d014      	beq.n	8007570 <_strtod_l+0x248>
 8007546:	9907      	ldr	r1, [sp, #28]
 8007548:	4411      	add	r1, r2
 800754a:	9107      	str	r1, [sp, #28]
 800754c:	462a      	mov	r2, r5
 800754e:	eb00 0e05 	add.w	lr, r0, r5
 8007552:	210a      	movs	r1, #10
 8007554:	4572      	cmp	r2, lr
 8007556:	d113      	bne.n	8007580 <_strtod_l+0x258>
 8007558:	182a      	adds	r2, r5, r0
 800755a:	2a08      	cmp	r2, #8
 800755c:	f105 0501 	add.w	r5, r5, #1
 8007560:	4405      	add	r5, r0
 8007562:	dc1c      	bgt.n	800759e <_strtod_l+0x276>
 8007564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007566:	220a      	movs	r2, #10
 8007568:	fb02 3301 	mla	r3, r2, r1, r3
 800756c:	9309      	str	r3, [sp, #36]	; 0x24
 800756e:	2200      	movs	r2, #0
 8007570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007572:	1c59      	adds	r1, r3, #1
 8007574:	911d      	str	r1, [sp, #116]	; 0x74
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	4610      	mov	r0, r2
 800757a:	e7c9      	b.n	8007510 <_strtod_l+0x1e8>
 800757c:	4638      	mov	r0, r7
 800757e:	e7d2      	b.n	8007526 <_strtod_l+0x1fe>
 8007580:	2a08      	cmp	r2, #8
 8007582:	dc04      	bgt.n	800758e <_strtod_l+0x266>
 8007584:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007586:	434e      	muls	r6, r1
 8007588:	9609      	str	r6, [sp, #36]	; 0x24
 800758a:	3201      	adds	r2, #1
 800758c:	e7e2      	b.n	8007554 <_strtod_l+0x22c>
 800758e:	f102 0c01 	add.w	ip, r2, #1
 8007592:	f1bc 0f10 	cmp.w	ip, #16
 8007596:	bfd8      	it	le
 8007598:	fb01 f909 	mulle.w	r9, r1, r9
 800759c:	e7f5      	b.n	800758a <_strtod_l+0x262>
 800759e:	2d10      	cmp	r5, #16
 80075a0:	bfdc      	itt	le
 80075a2:	220a      	movle	r2, #10
 80075a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80075a8:	e7e1      	b.n	800756e <_strtod_l+0x246>
 80075aa:	2300      	movs	r3, #0
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	2201      	movs	r2, #1
 80075b0:	e77c      	b.n	80074ac <_strtod_l+0x184>
 80075b2:	f04f 0c00 	mov.w	ip, #0
 80075b6:	f108 0302 	add.w	r3, r8, #2
 80075ba:	931d      	str	r3, [sp, #116]	; 0x74
 80075bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80075c0:	e785      	b.n	80074ce <_strtod_l+0x1a6>
 80075c2:	f04f 0c01 	mov.w	ip, #1
 80075c6:	e7f6      	b.n	80075b6 <_strtod_l+0x28e>
 80075c8:	0800b0c0 	.word	0x0800b0c0
 80075cc:	0800ae70 	.word	0x0800ae70
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075d6:	1c59      	adds	r1, r3, #1
 80075d8:	911d      	str	r1, [sp, #116]	; 0x74
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d0f9      	beq.n	80075d4 <_strtod_l+0x2ac>
 80075e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80075e4:	2908      	cmp	r1, #8
 80075e6:	f63f af79 	bhi.w	80074dc <_strtod_l+0x1b4>
 80075ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80075ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075f0:	9308      	str	r3, [sp, #32]
 80075f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075f4:	1c59      	adds	r1, r3, #1
 80075f6:	911d      	str	r1, [sp, #116]	; 0x74
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80075fe:	2e09      	cmp	r6, #9
 8007600:	d937      	bls.n	8007672 <_strtod_l+0x34a>
 8007602:	9e08      	ldr	r6, [sp, #32]
 8007604:	1b89      	subs	r1, r1, r6
 8007606:	2908      	cmp	r1, #8
 8007608:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800760c:	dc02      	bgt.n	8007614 <_strtod_l+0x2ec>
 800760e:	4576      	cmp	r6, lr
 8007610:	bfa8      	it	ge
 8007612:	4676      	movge	r6, lr
 8007614:	f1bc 0f00 	cmp.w	ip, #0
 8007618:	d000      	beq.n	800761c <_strtod_l+0x2f4>
 800761a:	4276      	negs	r6, r6
 800761c:	2d00      	cmp	r5, #0
 800761e:	d14f      	bne.n	80076c0 <_strtod_l+0x398>
 8007620:	9904      	ldr	r1, [sp, #16]
 8007622:	4301      	orrs	r1, r0
 8007624:	f47f aec2 	bne.w	80073ac <_strtod_l+0x84>
 8007628:	2a00      	cmp	r2, #0
 800762a:	f47f aedb 	bne.w	80073e4 <_strtod_l+0xbc>
 800762e:	2b69      	cmp	r3, #105	; 0x69
 8007630:	d027      	beq.n	8007682 <_strtod_l+0x35a>
 8007632:	dc24      	bgt.n	800767e <_strtod_l+0x356>
 8007634:	2b49      	cmp	r3, #73	; 0x49
 8007636:	d024      	beq.n	8007682 <_strtod_l+0x35a>
 8007638:	2b4e      	cmp	r3, #78	; 0x4e
 800763a:	f47f aed3 	bne.w	80073e4 <_strtod_l+0xbc>
 800763e:	499e      	ldr	r1, [pc, #632]	; (80078b8 <_strtod_l+0x590>)
 8007640:	a81d      	add	r0, sp, #116	; 0x74
 8007642:	f001 fe41 	bl	80092c8 <__match>
 8007646:	2800      	cmp	r0, #0
 8007648:	f43f aecc 	beq.w	80073e4 <_strtod_l+0xbc>
 800764c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b28      	cmp	r3, #40	; 0x28
 8007652:	d12d      	bne.n	80076b0 <_strtod_l+0x388>
 8007654:	4999      	ldr	r1, [pc, #612]	; (80078bc <_strtod_l+0x594>)
 8007656:	aa20      	add	r2, sp, #128	; 0x80
 8007658:	a81d      	add	r0, sp, #116	; 0x74
 800765a:	f001 fe49 	bl	80092f0 <__hexnan>
 800765e:	2805      	cmp	r0, #5
 8007660:	d126      	bne.n	80076b0 <_strtod_l+0x388>
 8007662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007664:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007668:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800766c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007670:	e69c      	b.n	80073ac <_strtod_l+0x84>
 8007672:	210a      	movs	r1, #10
 8007674:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007678:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800767c:	e7b9      	b.n	80075f2 <_strtod_l+0x2ca>
 800767e:	2b6e      	cmp	r3, #110	; 0x6e
 8007680:	e7db      	b.n	800763a <_strtod_l+0x312>
 8007682:	498f      	ldr	r1, [pc, #572]	; (80078c0 <_strtod_l+0x598>)
 8007684:	a81d      	add	r0, sp, #116	; 0x74
 8007686:	f001 fe1f 	bl	80092c8 <__match>
 800768a:	2800      	cmp	r0, #0
 800768c:	f43f aeaa 	beq.w	80073e4 <_strtod_l+0xbc>
 8007690:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007692:	498c      	ldr	r1, [pc, #560]	; (80078c4 <_strtod_l+0x59c>)
 8007694:	3b01      	subs	r3, #1
 8007696:	a81d      	add	r0, sp, #116	; 0x74
 8007698:	931d      	str	r3, [sp, #116]	; 0x74
 800769a:	f001 fe15 	bl	80092c8 <__match>
 800769e:	b910      	cbnz	r0, 80076a6 <_strtod_l+0x37e>
 80076a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076a2:	3301      	adds	r3, #1
 80076a4:	931d      	str	r3, [sp, #116]	; 0x74
 80076a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80078d4 <_strtod_l+0x5ac>
 80076aa:	f04f 0a00 	mov.w	sl, #0
 80076ae:	e67d      	b.n	80073ac <_strtod_l+0x84>
 80076b0:	4885      	ldr	r0, [pc, #532]	; (80078c8 <_strtod_l+0x5a0>)
 80076b2:	f002 fdb5 	bl	800a220 <nan>
 80076b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80076ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80076be:	e675      	b.n	80073ac <_strtod_l+0x84>
 80076c0:	9b07      	ldr	r3, [sp, #28]
 80076c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c4:	1af3      	subs	r3, r6, r3
 80076c6:	2f00      	cmp	r7, #0
 80076c8:	bf08      	it	eq
 80076ca:	462f      	moveq	r7, r5
 80076cc:	2d10      	cmp	r5, #16
 80076ce:	9308      	str	r3, [sp, #32]
 80076d0:	46a8      	mov	r8, r5
 80076d2:	bfa8      	it	ge
 80076d4:	f04f 0810 	movge.w	r8, #16
 80076d8:	f7f8 ff1c 	bl	8000514 <__aeabi_ui2d>
 80076dc:	2d09      	cmp	r5, #9
 80076de:	4682      	mov	sl, r0
 80076e0:	468b      	mov	fp, r1
 80076e2:	dd13      	ble.n	800770c <_strtod_l+0x3e4>
 80076e4:	4b79      	ldr	r3, [pc, #484]	; (80078cc <_strtod_l+0x5a4>)
 80076e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076ee:	f7f8 ff8b 	bl	8000608 <__aeabi_dmul>
 80076f2:	4682      	mov	sl, r0
 80076f4:	4648      	mov	r0, r9
 80076f6:	468b      	mov	fp, r1
 80076f8:	f7f8 ff0c 	bl	8000514 <__aeabi_ui2d>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4650      	mov	r0, sl
 8007702:	4659      	mov	r1, fp
 8007704:	f7f8 fdca 	bl	800029c <__adddf3>
 8007708:	4682      	mov	sl, r0
 800770a:	468b      	mov	fp, r1
 800770c:	2d0f      	cmp	r5, #15
 800770e:	dc38      	bgt.n	8007782 <_strtod_l+0x45a>
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f43f ae4a 	beq.w	80073ac <_strtod_l+0x84>
 8007718:	dd24      	ble.n	8007764 <_strtod_l+0x43c>
 800771a:	2b16      	cmp	r3, #22
 800771c:	dc0b      	bgt.n	8007736 <_strtod_l+0x40e>
 800771e:	4d6b      	ldr	r5, [pc, #428]	; (80078cc <_strtod_l+0x5a4>)
 8007720:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007724:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007728:	4652      	mov	r2, sl
 800772a:	465b      	mov	r3, fp
 800772c:	f7f8 ff6c 	bl	8000608 <__aeabi_dmul>
 8007730:	4682      	mov	sl, r0
 8007732:	468b      	mov	fp, r1
 8007734:	e63a      	b.n	80073ac <_strtod_l+0x84>
 8007736:	9a08      	ldr	r2, [sp, #32]
 8007738:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800773c:	4293      	cmp	r3, r2
 800773e:	db20      	blt.n	8007782 <_strtod_l+0x45a>
 8007740:	4c62      	ldr	r4, [pc, #392]	; (80078cc <_strtod_l+0x5a4>)
 8007742:	f1c5 050f 	rsb	r5, r5, #15
 8007746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800774a:	4652      	mov	r2, sl
 800774c:	465b      	mov	r3, fp
 800774e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007752:	f7f8 ff59 	bl	8000608 <__aeabi_dmul>
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	1b5d      	subs	r5, r3, r5
 800775a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800775e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007762:	e7e3      	b.n	800772c <_strtod_l+0x404>
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	3316      	adds	r3, #22
 8007768:	db0b      	blt.n	8007782 <_strtod_l+0x45a>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	4a57      	ldr	r2, [pc, #348]	; (80078cc <_strtod_l+0x5a4>)
 800776e:	1b9e      	subs	r6, r3, r6
 8007770:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007778:	4650      	mov	r0, sl
 800777a:	4659      	mov	r1, fp
 800777c:	f7f9 f86e 	bl	800085c <__aeabi_ddiv>
 8007780:	e7d6      	b.n	8007730 <_strtod_l+0x408>
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	eba5 0808 	sub.w	r8, r5, r8
 8007788:	4498      	add	r8, r3
 800778a:	f1b8 0f00 	cmp.w	r8, #0
 800778e:	dd71      	ble.n	8007874 <_strtod_l+0x54c>
 8007790:	f018 030f 	ands.w	r3, r8, #15
 8007794:	d00a      	beq.n	80077ac <_strtod_l+0x484>
 8007796:	494d      	ldr	r1, [pc, #308]	; (80078cc <_strtod_l+0x5a4>)
 8007798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800779c:	4652      	mov	r2, sl
 800779e:	465b      	mov	r3, fp
 80077a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a4:	f7f8 ff30 	bl	8000608 <__aeabi_dmul>
 80077a8:	4682      	mov	sl, r0
 80077aa:	468b      	mov	fp, r1
 80077ac:	f038 080f 	bics.w	r8, r8, #15
 80077b0:	d04d      	beq.n	800784e <_strtod_l+0x526>
 80077b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077b6:	dd22      	ble.n	80077fe <_strtod_l+0x4d6>
 80077b8:	2500      	movs	r5, #0
 80077ba:	462e      	mov	r6, r5
 80077bc:	9509      	str	r5, [sp, #36]	; 0x24
 80077be:	9507      	str	r5, [sp, #28]
 80077c0:	2322      	movs	r3, #34	; 0x22
 80077c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80078d4 <_strtod_l+0x5ac>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	f04f 0a00 	mov.w	sl, #0
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f43f adec 	beq.w	80073ac <_strtod_l+0x84>
 80077d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80077d6:	4620      	mov	r0, r4
 80077d8:	f001 fe92 	bl	8009500 <_Bfree>
 80077dc:	9907      	ldr	r1, [sp, #28]
 80077de:	4620      	mov	r0, r4
 80077e0:	f001 fe8e 	bl	8009500 <_Bfree>
 80077e4:	4631      	mov	r1, r6
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fe8a 	bl	8009500 <_Bfree>
 80077ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077ee:	4620      	mov	r0, r4
 80077f0:	f001 fe86 	bl	8009500 <_Bfree>
 80077f4:	4629      	mov	r1, r5
 80077f6:	4620      	mov	r0, r4
 80077f8:	f001 fe82 	bl	8009500 <_Bfree>
 80077fc:	e5d6      	b.n	80073ac <_strtod_l+0x84>
 80077fe:	2300      	movs	r3, #0
 8007800:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007804:	4650      	mov	r0, sl
 8007806:	4659      	mov	r1, fp
 8007808:	4699      	mov	r9, r3
 800780a:	f1b8 0f01 	cmp.w	r8, #1
 800780e:	dc21      	bgt.n	8007854 <_strtod_l+0x52c>
 8007810:	b10b      	cbz	r3, 8007816 <_strtod_l+0x4ee>
 8007812:	4682      	mov	sl, r0
 8007814:	468b      	mov	fp, r1
 8007816:	4b2e      	ldr	r3, [pc, #184]	; (80078d0 <_strtod_l+0x5a8>)
 8007818:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800781c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007820:	4652      	mov	r2, sl
 8007822:	465b      	mov	r3, fp
 8007824:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <_strtod_l+0x5ac>)
 800782e:	460a      	mov	r2, r1
 8007830:	400b      	ands	r3, r1
 8007832:	4929      	ldr	r1, [pc, #164]	; (80078d8 <_strtod_l+0x5b0>)
 8007834:	428b      	cmp	r3, r1
 8007836:	4682      	mov	sl, r0
 8007838:	d8be      	bhi.n	80077b8 <_strtod_l+0x490>
 800783a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800783e:	428b      	cmp	r3, r1
 8007840:	bf86      	itte	hi
 8007842:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80078dc <_strtod_l+0x5b4>
 8007846:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800784a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800784e:	2300      	movs	r3, #0
 8007850:	9304      	str	r3, [sp, #16]
 8007852:	e081      	b.n	8007958 <_strtod_l+0x630>
 8007854:	f018 0f01 	tst.w	r8, #1
 8007858:	d007      	beq.n	800786a <_strtod_l+0x542>
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <_strtod_l+0x5a8>)
 800785c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fed0 	bl	8000608 <__aeabi_dmul>
 8007868:	2301      	movs	r3, #1
 800786a:	f109 0901 	add.w	r9, r9, #1
 800786e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007872:	e7ca      	b.n	800780a <_strtod_l+0x4e2>
 8007874:	d0eb      	beq.n	800784e <_strtod_l+0x526>
 8007876:	f1c8 0800 	rsb	r8, r8, #0
 800787a:	f018 020f 	ands.w	r2, r8, #15
 800787e:	d00a      	beq.n	8007896 <_strtod_l+0x56e>
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <_strtod_l+0x5a4>)
 8007882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007886:	4650      	mov	r0, sl
 8007888:	4659      	mov	r1, fp
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 ffe5 	bl	800085c <__aeabi_ddiv>
 8007892:	4682      	mov	sl, r0
 8007894:	468b      	mov	fp, r1
 8007896:	ea5f 1828 	movs.w	r8, r8, asr #4
 800789a:	d0d8      	beq.n	800784e <_strtod_l+0x526>
 800789c:	f1b8 0f1f 	cmp.w	r8, #31
 80078a0:	dd1e      	ble.n	80078e0 <_strtod_l+0x5b8>
 80078a2:	2500      	movs	r5, #0
 80078a4:	462e      	mov	r6, r5
 80078a6:	9509      	str	r5, [sp, #36]	; 0x24
 80078a8:	9507      	str	r5, [sp, #28]
 80078aa:	2322      	movs	r3, #34	; 0x22
 80078ac:	f04f 0a00 	mov.w	sl, #0
 80078b0:	f04f 0b00 	mov.w	fp, #0
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	e789      	b.n	80077cc <_strtod_l+0x4a4>
 80078b8:	0800ae41 	.word	0x0800ae41
 80078bc:	0800ae84 	.word	0x0800ae84
 80078c0:	0800ae39 	.word	0x0800ae39
 80078c4:	0800afc4 	.word	0x0800afc4
 80078c8:	0800b280 	.word	0x0800b280
 80078cc:	0800b160 	.word	0x0800b160
 80078d0:	0800b138 	.word	0x0800b138
 80078d4:	7ff00000 	.word	0x7ff00000
 80078d8:	7ca00000 	.word	0x7ca00000
 80078dc:	7fefffff 	.word	0x7fefffff
 80078e0:	f018 0310 	ands.w	r3, r8, #16
 80078e4:	bf18      	it	ne
 80078e6:	236a      	movne	r3, #106	; 0x6a
 80078e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007ca0 <_strtod_l+0x978>
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	4650      	mov	r0, sl
 80078f0:	4659      	mov	r1, fp
 80078f2:	2300      	movs	r3, #0
 80078f4:	f018 0f01 	tst.w	r8, #1
 80078f8:	d004      	beq.n	8007904 <_strtod_l+0x5dc>
 80078fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078fe:	f7f8 fe83 	bl	8000608 <__aeabi_dmul>
 8007902:	2301      	movs	r3, #1
 8007904:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007908:	f109 0908 	add.w	r9, r9, #8
 800790c:	d1f2      	bne.n	80078f4 <_strtod_l+0x5cc>
 800790e:	b10b      	cbz	r3, 8007914 <_strtod_l+0x5ec>
 8007910:	4682      	mov	sl, r0
 8007912:	468b      	mov	fp, r1
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	b1bb      	cbz	r3, 8007948 <_strtod_l+0x620>
 8007918:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800791c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007920:	2b00      	cmp	r3, #0
 8007922:	4659      	mov	r1, fp
 8007924:	dd10      	ble.n	8007948 <_strtod_l+0x620>
 8007926:	2b1f      	cmp	r3, #31
 8007928:	f340 8128 	ble.w	8007b7c <_strtod_l+0x854>
 800792c:	2b34      	cmp	r3, #52	; 0x34
 800792e:	bfde      	ittt	le
 8007930:	3b20      	suble	r3, #32
 8007932:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007936:	fa02 f303 	lslle.w	r3, r2, r3
 800793a:	f04f 0a00 	mov.w	sl, #0
 800793e:	bfcc      	ite	gt
 8007940:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007944:	ea03 0b01 	andle.w	fp, r3, r1
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	4650      	mov	r0, sl
 800794e:	4659      	mov	r1, fp
 8007950:	f7f9 f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007954:	2800      	cmp	r0, #0
 8007956:	d1a4      	bne.n	80078a2 <_strtod_l+0x57a>
 8007958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800795e:	462b      	mov	r3, r5
 8007960:	463a      	mov	r2, r7
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fe38 	bl	80095d8 <__s2b>
 8007968:	9009      	str	r0, [sp, #36]	; 0x24
 800796a:	2800      	cmp	r0, #0
 800796c:	f43f af24 	beq.w	80077b8 <_strtod_l+0x490>
 8007970:	9b07      	ldr	r3, [sp, #28]
 8007972:	1b9e      	subs	r6, r3, r6
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb4      	ite	lt
 800797a:	4633      	movlt	r3, r6
 800797c:	2300      	movge	r3, #0
 800797e:	9310      	str	r3, [sp, #64]	; 0x40
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	2500      	movs	r5, #0
 8007984:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007988:	9318      	str	r3, [sp, #96]	; 0x60
 800798a:	462e      	mov	r6, r5
 800798c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798e:	4620      	mov	r0, r4
 8007990:	6859      	ldr	r1, [r3, #4]
 8007992:	f001 fd75 	bl	8009480 <_Balloc>
 8007996:	9007      	str	r0, [sp, #28]
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f af11 	beq.w	80077c0 <_strtod_l+0x498>
 800799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a0:	691a      	ldr	r2, [r3, #16]
 80079a2:	3202      	adds	r2, #2
 80079a4:	f103 010c 	add.w	r1, r3, #12
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	300c      	adds	r0, #12
 80079ac:	f001 fd5a 	bl	8009464 <memcpy>
 80079b0:	ec4b ab10 	vmov	d0, sl, fp
 80079b4:	aa20      	add	r2, sp, #128	; 0x80
 80079b6:	a91f      	add	r1, sp, #124	; 0x7c
 80079b8:	4620      	mov	r0, r4
 80079ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80079be:	f002 f947 	bl	8009c50 <__d2b>
 80079c2:	901e      	str	r0, [sp, #120]	; 0x78
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f aefb 	beq.w	80077c0 <_strtod_l+0x498>
 80079ca:	2101      	movs	r1, #1
 80079cc:	4620      	mov	r0, r4
 80079ce:	f001 fe9d 	bl	800970c <__i2b>
 80079d2:	4606      	mov	r6, r0
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f43f aef3 	beq.w	80077c0 <_strtod_l+0x498>
 80079da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079dc:	9904      	ldr	r1, [sp, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfab      	itete	ge
 80079e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80079e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80079e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80079e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80079ec:	bfac      	ite	ge
 80079ee:	eb03 0902 	addge.w	r9, r3, r2
 80079f2:	1ad7      	sublt	r7, r2, r3
 80079f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079f6:	eba3 0801 	sub.w	r8, r3, r1
 80079fa:	4490      	add	r8, r2
 80079fc:	4ba3      	ldr	r3, [pc, #652]	; (8007c8c <_strtod_l+0x964>)
 80079fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007a02:	4598      	cmp	r8, r3
 8007a04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a08:	f280 80cc 	bge.w	8007ba4 <_strtod_l+0x87c>
 8007a0c:	eba3 0308 	sub.w	r3, r3, r8
 8007a10:	2b1f      	cmp	r3, #31
 8007a12:	eba2 0203 	sub.w	r2, r2, r3
 8007a16:	f04f 0101 	mov.w	r1, #1
 8007a1a:	f300 80b6 	bgt.w	8007b8a <_strtod_l+0x862>
 8007a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a22:	9311      	str	r3, [sp, #68]	; 0x44
 8007a24:	2300      	movs	r3, #0
 8007a26:	930c      	str	r3, [sp, #48]	; 0x30
 8007a28:	eb09 0802 	add.w	r8, r9, r2
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	45c1      	cmp	r9, r8
 8007a30:	4417      	add	r7, r2
 8007a32:	441f      	add	r7, r3
 8007a34:	464b      	mov	r3, r9
 8007a36:	bfa8      	it	ge
 8007a38:	4643      	movge	r3, r8
 8007a3a:	42bb      	cmp	r3, r7
 8007a3c:	bfa8      	it	ge
 8007a3e:	463b      	movge	r3, r7
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bfc2      	ittt	gt
 8007a44:	eba8 0803 	subgt.w	r8, r8, r3
 8007a48:	1aff      	subgt	r7, r7, r3
 8007a4a:	eba9 0903 	subgt.w	r9, r9, r3
 8007a4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd17      	ble.n	8007a84 <_strtod_l+0x75c>
 8007a54:	4631      	mov	r1, r6
 8007a56:	461a      	mov	r2, r3
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f001 ff13 	bl	8009884 <__pow5mult>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f43f aead 	beq.w	80077c0 <_strtod_l+0x498>
 8007a66:	4601      	mov	r1, r0
 8007a68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f001 fe64 	bl	8009738 <__multiply>
 8007a70:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f aea4 	beq.w	80077c0 <_strtod_l+0x498>
 8007a78:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f001 fd40 	bl	8009500 <_Bfree>
 8007a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a82:	931e      	str	r3, [sp, #120]	; 0x78
 8007a84:	f1b8 0f00 	cmp.w	r8, #0
 8007a88:	f300 8091 	bgt.w	8007bae <_strtod_l+0x886>
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd08      	ble.n	8007aa4 <_strtod_l+0x77c>
 8007a92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a94:	9907      	ldr	r1, [sp, #28]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 fef4 	bl	8009884 <__pow5mult>
 8007a9c:	9007      	str	r0, [sp, #28]
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f ae8e 	beq.w	80077c0 <_strtod_l+0x498>
 8007aa4:	2f00      	cmp	r7, #0
 8007aa6:	dd08      	ble.n	8007aba <_strtod_l+0x792>
 8007aa8:	9907      	ldr	r1, [sp, #28]
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4620      	mov	r0, r4
 8007aae:	f001 ff43 	bl	8009938 <__lshift>
 8007ab2:	9007      	str	r0, [sp, #28]
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f43f ae83 	beq.w	80077c0 <_strtod_l+0x498>
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	dd08      	ble.n	8007ad2 <_strtod_l+0x7aa>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	464a      	mov	r2, r9
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f001 ff37 	bl	8009938 <__lshift>
 8007aca:	4606      	mov	r6, r0
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f43f ae77 	beq.w	80077c0 <_strtod_l+0x498>
 8007ad2:	9a07      	ldr	r2, [sp, #28]
 8007ad4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 ffb6 	bl	8009a48 <__mdiff>
 8007adc:	4605      	mov	r5, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f ae6e 	beq.w	80077c0 <_strtod_l+0x498>
 8007ae4:	68c3      	ldr	r3, [r0, #12]
 8007ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60c3      	str	r3, [r0, #12]
 8007aec:	4631      	mov	r1, r6
 8007aee:	f001 ff8f 	bl	8009a10 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	da65      	bge.n	8007bc2 <_strtod_l+0x89a>
 8007af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007af8:	ea53 030a 	orrs.w	r3, r3, sl
 8007afc:	f040 8087 	bne.w	8007c0e <_strtod_l+0x8e6>
 8007b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8082 	bne.w	8007c0e <_strtod_l+0x8e6>
 8007b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b0e:	0d1b      	lsrs	r3, r3, #20
 8007b10:	051b      	lsls	r3, r3, #20
 8007b12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b16:	d97a      	bls.n	8007c0e <_strtod_l+0x8e6>
 8007b18:	696b      	ldr	r3, [r5, #20]
 8007b1a:	b913      	cbnz	r3, 8007b22 <_strtod_l+0x7fa>
 8007b1c:	692b      	ldr	r3, [r5, #16]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	dd75      	ble.n	8007c0e <_strtod_l+0x8e6>
 8007b22:	4629      	mov	r1, r5
 8007b24:	2201      	movs	r2, #1
 8007b26:	4620      	mov	r0, r4
 8007b28:	f001 ff06 	bl	8009938 <__lshift>
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4605      	mov	r5, r0
 8007b30:	f001 ff6e 	bl	8009a10 <__mcmp>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	dd6a      	ble.n	8007c0e <_strtod_l+0x8e6>
 8007b38:	9904      	ldr	r1, [sp, #16]
 8007b3a:	4a55      	ldr	r2, [pc, #340]	; (8007c90 <_strtod_l+0x968>)
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	f000 8085 	beq.w	8007c4e <_strtod_l+0x926>
 8007b44:	ea02 010b 	and.w	r1, r2, fp
 8007b48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b4c:	dc7f      	bgt.n	8007c4e <_strtod_l+0x926>
 8007b4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b52:	f77f aeaa 	ble.w	80078aa <_strtod_l+0x582>
 8007b56:	4a4f      	ldr	r2, [pc, #316]	; (8007c94 <_strtod_l+0x96c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007b5e:	4650      	mov	r0, sl
 8007b60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007b64:	4659      	mov	r1, fp
 8007b66:	f7f8 fd4f 	bl	8000608 <__aeabi_dmul>
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4303      	orrs	r3, r0
 8007b6e:	bf08      	it	eq
 8007b70:	2322      	moveq	r3, #34	; 0x22
 8007b72:	4682      	mov	sl, r0
 8007b74:	468b      	mov	fp, r1
 8007b76:	bf08      	it	eq
 8007b78:	6023      	streq	r3, [r4, #0]
 8007b7a:	e62b      	b.n	80077d4 <_strtod_l+0x4ac>
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	ea03 0a0a 	and.w	sl, r3, sl
 8007b88:	e6de      	b.n	8007948 <_strtod_l+0x620>
 8007b8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b9a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007ba0:	9111      	str	r1, [sp, #68]	; 0x44
 8007ba2:	e741      	b.n	8007a28 <_strtod_l+0x700>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ba8:	2301      	movs	r3, #1
 8007baa:	9311      	str	r3, [sp, #68]	; 0x44
 8007bac:	e73c      	b.n	8007a28 <_strtod_l+0x700>
 8007bae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f001 fec0 	bl	8009938 <__lshift>
 8007bb8:	901e      	str	r0, [sp, #120]	; 0x78
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f47f af66 	bne.w	8007a8c <_strtod_l+0x764>
 8007bc0:	e5fe      	b.n	80077c0 <_strtod_l+0x498>
 8007bc2:	465f      	mov	r7, fp
 8007bc4:	d16e      	bne.n	8007ca4 <_strtod_l+0x97c>
 8007bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bcc:	b342      	cbz	r2, 8007c20 <_strtod_l+0x8f8>
 8007bce:	4a32      	ldr	r2, [pc, #200]	; (8007c98 <_strtod_l+0x970>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d128      	bne.n	8007c26 <_strtod_l+0x8fe>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	b1eb      	cbz	r3, 8007c16 <_strtod_l+0x8ee>
 8007bda:	4a2d      	ldr	r2, [pc, #180]	; (8007c90 <_strtod_l+0x968>)
 8007bdc:	403a      	ands	r2, r7
 8007bde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007be2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007be6:	d819      	bhi.n	8007c1c <_strtod_l+0x8f4>
 8007be8:	0d12      	lsrs	r2, r2, #20
 8007bea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	4298      	cmp	r0, r3
 8007bf4:	d117      	bne.n	8007c26 <_strtod_l+0x8fe>
 8007bf6:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <_strtod_l+0x974>)
 8007bf8:	429f      	cmp	r7, r3
 8007bfa:	d102      	bne.n	8007c02 <_strtod_l+0x8da>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f addf 	beq.w	80077c0 <_strtod_l+0x498>
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <_strtod_l+0x968>)
 8007c04:	403b      	ands	r3, r7
 8007c06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c0a:	f04f 0a00 	mov.w	sl, #0
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1a0      	bne.n	8007b56 <_strtod_l+0x82e>
 8007c14:	e5de      	b.n	80077d4 <_strtod_l+0x4ac>
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c1a:	e7ea      	b.n	8007bf2 <_strtod_l+0x8ca>
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	e7e8      	b.n	8007bf2 <_strtod_l+0x8ca>
 8007c20:	ea53 030a 	orrs.w	r3, r3, sl
 8007c24:	d088      	beq.n	8007b38 <_strtod_l+0x810>
 8007c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c28:	b1db      	cbz	r3, 8007c62 <_strtod_l+0x93a>
 8007c2a:	423b      	tst	r3, r7
 8007c2c:	d0ef      	beq.n	8007c0e <_strtod_l+0x8e6>
 8007c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c30:	9a04      	ldr	r2, [sp, #16]
 8007c32:	4650      	mov	r0, sl
 8007c34:	4659      	mov	r1, fp
 8007c36:	b1c3      	cbz	r3, 8007c6a <_strtod_l+0x942>
 8007c38:	f7ff fb58 	bl	80072ec <sulp>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c44:	f7f8 fb2a 	bl	800029c <__adddf3>
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	e7df      	b.n	8007c0e <_strtod_l+0x8e6>
 8007c4e:	4013      	ands	r3, r2
 8007c50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c60:	e7d5      	b.n	8007c0e <_strtod_l+0x8e6>
 8007c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c64:	ea13 0f0a 	tst.w	r3, sl
 8007c68:	e7e0      	b.n	8007c2c <_strtod_l+0x904>
 8007c6a:	f7ff fb3f 	bl	80072ec <sulp>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c76:	f7f8 fb0f 	bl	8000298 <__aeabi_dsub>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4682      	mov	sl, r0
 8007c80:	468b      	mov	fp, r1
 8007c82:	f7f8 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d0c1      	beq.n	8007c0e <_strtod_l+0x8e6>
 8007c8a:	e60e      	b.n	80078aa <_strtod_l+0x582>
 8007c8c:	fffffc02 	.word	0xfffffc02
 8007c90:	7ff00000 	.word	0x7ff00000
 8007c94:	39500000 	.word	0x39500000
 8007c98:	000fffff 	.word	0x000fffff
 8007c9c:	7fefffff 	.word	0x7fefffff
 8007ca0:	0800ae98 	.word	0x0800ae98
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f002 f82e 	bl	8009d08 <__ratio>
 8007cac:	ec59 8b10 	vmov	r8, r9, d0
 8007cb0:	ee10 0a10 	vmov	r0, s0
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 ff20 	bl	8000b00 <__aeabi_dcmple>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d07c      	beq.n	8007dbe <_strtod_l+0xa96>
 8007cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d04c      	beq.n	8007d64 <_strtod_l+0xa3c>
 8007cca:	4b95      	ldr	r3, [pc, #596]	; (8007f20 <_strtod_l+0xbf8>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007cd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f20 <_strtod_l+0xbf8>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	4b92      	ldr	r3, [pc, #584]	; (8007f24 <_strtod_l+0xbfc>)
 8007cdc:	403b      	ands	r3, r7
 8007cde:	9311      	str	r3, [sp, #68]	; 0x44
 8007ce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ce2:	4b91      	ldr	r3, [pc, #580]	; (8007f28 <_strtod_l+0xc00>)
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	f040 80b2 	bne.w	8007e4e <_strtod_l+0xb26>
 8007cea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007cf6:	ec4b ab10 	vmov	d0, sl, fp
 8007cfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007cfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d02:	f001 ff29 	bl	8009b58 <__ulp>
 8007d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d0a:	ec53 2b10 	vmov	r2, r3, d0
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	4652      	mov	r2, sl
 8007d14:	465b      	mov	r3, fp
 8007d16:	f7f8 fac1 	bl	800029c <__adddf3>
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4981      	ldr	r1, [pc, #516]	; (8007f24 <_strtod_l+0xbfc>)
 8007d1e:	4a83      	ldr	r2, [pc, #524]	; (8007f2c <_strtod_l+0xc04>)
 8007d20:	4019      	ands	r1, r3
 8007d22:	4291      	cmp	r1, r2
 8007d24:	4682      	mov	sl, r0
 8007d26:	d95e      	bls.n	8007de6 <_strtod_l+0xabe>
 8007d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d103      	bne.n	8007d3a <_strtod_l+0xa12>
 8007d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d34:	3301      	adds	r3, #1
 8007d36:	f43f ad43 	beq.w	80077c0 <_strtod_l+0x498>
 8007d3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007f38 <_strtod_l+0xc10>
 8007d3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007d42:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 fbdb 	bl	8009500 <_Bfree>
 8007d4a:	9907      	ldr	r1, [sp, #28]
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f001 fbd7 	bl	8009500 <_Bfree>
 8007d52:	4631      	mov	r1, r6
 8007d54:	4620      	mov	r0, r4
 8007d56:	f001 fbd3 	bl	8009500 <_Bfree>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f001 fbcf 	bl	8009500 <_Bfree>
 8007d62:	e613      	b.n	800798c <_strtod_l+0x664>
 8007d64:	f1ba 0f00 	cmp.w	sl, #0
 8007d68:	d11b      	bne.n	8007da2 <_strtod_l+0xa7a>
 8007d6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d6e:	b9f3      	cbnz	r3, 8007dae <_strtod_l+0xa86>
 8007d70:	4b6b      	ldr	r3, [pc, #428]	; (8007f20 <_strtod_l+0xbf8>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 feb8 	bl	8000aec <__aeabi_dcmplt>
 8007d7c:	b9d0      	cbnz	r0, 8007db4 <_strtod_l+0xa8c>
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	4b6b      	ldr	r3, [pc, #428]	; (8007f30 <_strtod_l+0xc08>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	f7f8 fc3f 	bl	8000608 <__aeabi_dmul>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007d96:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007d9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007da0:	e79b      	b.n	8007cda <_strtod_l+0x9b2>
 8007da2:	f1ba 0f01 	cmp.w	sl, #1
 8007da6:	d102      	bne.n	8007dae <_strtod_l+0xa86>
 8007da8:	2f00      	cmp	r7, #0
 8007daa:	f43f ad7e 	beq.w	80078aa <_strtod_l+0x582>
 8007dae:	4b61      	ldr	r3, [pc, #388]	; (8007f34 <_strtod_l+0xc0c>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	e78c      	b.n	8007cce <_strtod_l+0x9a6>
 8007db4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007f30 <_strtod_l+0xc08>
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	e7e7      	b.n	8007d8e <_strtod_l+0xa66>
 8007dbe:	4b5c      	ldr	r3, [pc, #368]	; (8007f30 <_strtod_l+0xc08>)
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f7f8 fc1f 	bl	8000608 <__aeabi_dmul>
 8007dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dcc:	4680      	mov	r8, r0
 8007dce:	4689      	mov	r9, r1
 8007dd0:	b933      	cbnz	r3, 8007de0 <_strtod_l+0xab8>
 8007dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dd6:	9012      	str	r0, [sp, #72]	; 0x48
 8007dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007dde:	e7dd      	b.n	8007d9c <_strtod_l+0xa74>
 8007de0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007de4:	e7f9      	b.n	8007dda <_strtod_l+0xab2>
 8007de6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1a8      	bne.n	8007d42 <_strtod_l+0xa1a>
 8007df0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007df4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007df6:	0d1b      	lsrs	r3, r3, #20
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d1a1      	bne.n	8007d42 <_strtod_l+0xa1a>
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4649      	mov	r1, r9
 8007e02:	f7f8 ff61 	bl	8000cc8 <__aeabi_d2lz>
 8007e06:	f7f8 fbd1 	bl	80005ac <__aeabi_l2d>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fa41 	bl	8000298 <__aeabi_dsub>
 8007e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e1c:	ea43 030a 	orr.w	r3, r3, sl
 8007e20:	4313      	orrs	r3, r2
 8007e22:	4680      	mov	r8, r0
 8007e24:	4689      	mov	r9, r1
 8007e26:	d053      	beq.n	8007ed0 <_strtod_l+0xba8>
 8007e28:	a335      	add	r3, pc, #212	; (adr r3, 8007f00 <_strtod_l+0xbd8>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fe5d 	bl	8000aec <__aeabi_dcmplt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f47f acce 	bne.w	80077d4 <_strtod_l+0x4ac>
 8007e38:	a333      	add	r3, pc, #204	; (adr r3, 8007f08 <_strtod_l+0xbe0>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fe71 	bl	8000b28 <__aeabi_dcmpgt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f43f af7b 	beq.w	8007d42 <_strtod_l+0xa1a>
 8007e4c:	e4c2      	b.n	80077d4 <_strtod_l+0x4ac>
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	b333      	cbz	r3, 8007ea0 <_strtod_l+0xb78>
 8007e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e58:	d822      	bhi.n	8007ea0 <_strtod_l+0xb78>
 8007e5a:	a32d      	add	r3, pc, #180	; (adr r3, 8007f10 <_strtod_l+0xbe8>)
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fe4c 	bl	8000b00 <__aeabi_dcmple>
 8007e68:	b1a0      	cbz	r0, 8007e94 <_strtod_l+0xb6c>
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	f7f8 fea3 	bl	8000bb8 <__aeabi_d2uiz>
 8007e72:	2801      	cmp	r0, #1
 8007e74:	bf38      	it	cc
 8007e76:	2001      	movcc	r0, #1
 8007e78:	f7f8 fb4c 	bl	8000514 <__aeabi_ui2d>
 8007e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	bb13      	cbnz	r3, 8007eca <_strtod_l+0xba2>
 8007e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e88:	9014      	str	r0, [sp, #80]	; 0x50
 8007e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e9c:	1a9b      	subs	r3, r3, r2
 8007e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8007ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ea4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ea8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007eac:	f001 fe54 	bl	8009b58 <__ulp>
 8007eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eb4:	ec53 2b10 	vmov	r2, r3, d0
 8007eb8:	f7f8 fba6 	bl	8000608 <__aeabi_dmul>
 8007ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ec0:	f7f8 f9ec 	bl	800029c <__adddf3>
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	468b      	mov	fp, r1
 8007ec8:	e78f      	b.n	8007dea <_strtod_l+0xac2>
 8007eca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007ece:	e7dd      	b.n	8007e8c <_strtod_l+0xb64>
 8007ed0:	a311      	add	r3, pc, #68	; (adr r3, 8007f18 <_strtod_l+0xbf0>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fe09 	bl	8000aec <__aeabi_dcmplt>
 8007eda:	e7b4      	b.n	8007e46 <_strtod_l+0xb1e>
 8007edc:	2300      	movs	r3, #0
 8007ede:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ee2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	f7ff ba65 	b.w	80073b4 <_strtod_l+0x8c>
 8007eea:	2b65      	cmp	r3, #101	; 0x65
 8007eec:	f43f ab5d 	beq.w	80075aa <_strtod_l+0x282>
 8007ef0:	2b45      	cmp	r3, #69	; 0x45
 8007ef2:	f43f ab5a 	beq.w	80075aa <_strtod_l+0x282>
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f7ff bb92 	b.w	8007620 <_strtod_l+0x2f8>
 8007efc:	f3af 8000 	nop.w
 8007f00:	94a03595 	.word	0x94a03595
 8007f04:	3fdfffff 	.word	0x3fdfffff
 8007f08:	35afe535 	.word	0x35afe535
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	ffc00000 	.word	0xffc00000
 8007f14:	41dfffff 	.word	0x41dfffff
 8007f18:	94a03595 	.word	0x94a03595
 8007f1c:	3fcfffff 	.word	0x3fcfffff
 8007f20:	3ff00000 	.word	0x3ff00000
 8007f24:	7ff00000 	.word	0x7ff00000
 8007f28:	7fe00000 	.word	0x7fe00000
 8007f2c:	7c9fffff 	.word	0x7c9fffff
 8007f30:	3fe00000 	.word	0x3fe00000
 8007f34:	bff00000 	.word	0xbff00000
 8007f38:	7fefffff 	.word	0x7fefffff

08007f3c <_strtod_r>:
 8007f3c:	4b01      	ldr	r3, [pc, #4]	; (8007f44 <_strtod_r+0x8>)
 8007f3e:	f7ff b9f3 	b.w	8007328 <_strtod_l>
 8007f42:	bf00      	nop
 8007f44:	20000170 	.word	0x20000170

08007f48 <_strtol_l.isra.0>:
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4e:	d001      	beq.n	8007f54 <_strtol_l.isra.0+0xc>
 8007f50:	2b24      	cmp	r3, #36	; 0x24
 8007f52:	d906      	bls.n	8007f62 <_strtol_l.isra.0+0x1a>
 8007f54:	f7fe fac4 	bl	80064e0 <__errno>
 8007f58:	2316      	movs	r3, #22
 8007f5a:	6003      	str	r3, [r0, #0]
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	4f3a      	ldr	r7, [pc, #232]	; (800804c <_strtol_l.isra.0+0x104>)
 8007f64:	468e      	mov	lr, r1
 8007f66:	4676      	mov	r6, lr
 8007f68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f6c:	5de5      	ldrb	r5, [r4, r7]
 8007f6e:	f015 0508 	ands.w	r5, r5, #8
 8007f72:	d1f8      	bne.n	8007f66 <_strtol_l.isra.0+0x1e>
 8007f74:	2c2d      	cmp	r4, #45	; 0x2d
 8007f76:	d134      	bne.n	8007fe2 <_strtol_l.isra.0+0x9a>
 8007f78:	f89e 4000 	ldrb.w	r4, [lr]
 8007f7c:	f04f 0801 	mov.w	r8, #1
 8007f80:	f106 0e02 	add.w	lr, r6, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05c      	beq.n	8008042 <_strtol_l.isra.0+0xfa>
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d10c      	bne.n	8007fa6 <_strtol_l.isra.0+0x5e>
 8007f8c:	2c30      	cmp	r4, #48	; 0x30
 8007f8e:	d10a      	bne.n	8007fa6 <_strtol_l.isra.0+0x5e>
 8007f90:	f89e 4000 	ldrb.w	r4, [lr]
 8007f94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f98:	2c58      	cmp	r4, #88	; 0x58
 8007f9a:	d14d      	bne.n	8008038 <_strtol_l.isra.0+0xf0>
 8007f9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f10e 0e02 	add.w	lr, lr, #2
 8007fa6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007faa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007fae:	2600      	movs	r6, #0
 8007fb0:	fbbc f9f3 	udiv	r9, ip, r3
 8007fb4:	4635      	mov	r5, r6
 8007fb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fbe:	2f09      	cmp	r7, #9
 8007fc0:	d818      	bhi.n	8007ff4 <_strtol_l.isra.0+0xac>
 8007fc2:	463c      	mov	r4, r7
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	dd24      	ble.n	8008012 <_strtol_l.isra.0+0xca>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	db1f      	blt.n	800800c <_strtol_l.isra.0+0xc4>
 8007fcc:	45a9      	cmp	r9, r5
 8007fce:	d31d      	bcc.n	800800c <_strtol_l.isra.0+0xc4>
 8007fd0:	d101      	bne.n	8007fd6 <_strtol_l.isra.0+0x8e>
 8007fd2:	45a2      	cmp	sl, r4
 8007fd4:	db1a      	blt.n	800800c <_strtol_l.isra.0+0xc4>
 8007fd6:	fb05 4503 	mla	r5, r5, r3, r4
 8007fda:	2601      	movs	r6, #1
 8007fdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007fe0:	e7eb      	b.n	8007fba <_strtol_l.isra.0+0x72>
 8007fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8007fe4:	bf08      	it	eq
 8007fe6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007fea:	46a8      	mov	r8, r5
 8007fec:	bf08      	it	eq
 8007fee:	f106 0e02 	addeq.w	lr, r6, #2
 8007ff2:	e7c7      	b.n	8007f84 <_strtol_l.isra.0+0x3c>
 8007ff4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ff8:	2f19      	cmp	r7, #25
 8007ffa:	d801      	bhi.n	8008000 <_strtol_l.isra.0+0xb8>
 8007ffc:	3c37      	subs	r4, #55	; 0x37
 8007ffe:	e7e1      	b.n	8007fc4 <_strtol_l.isra.0+0x7c>
 8008000:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008004:	2f19      	cmp	r7, #25
 8008006:	d804      	bhi.n	8008012 <_strtol_l.isra.0+0xca>
 8008008:	3c57      	subs	r4, #87	; 0x57
 800800a:	e7db      	b.n	8007fc4 <_strtol_l.isra.0+0x7c>
 800800c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008010:	e7e4      	b.n	8007fdc <_strtol_l.isra.0+0x94>
 8008012:	2e00      	cmp	r6, #0
 8008014:	da05      	bge.n	8008022 <_strtol_l.isra.0+0xda>
 8008016:	2322      	movs	r3, #34	; 0x22
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	4665      	mov	r5, ip
 800801c:	b942      	cbnz	r2, 8008030 <_strtol_l.isra.0+0xe8>
 800801e:	4628      	mov	r0, r5
 8008020:	e79d      	b.n	8007f5e <_strtol_l.isra.0+0x16>
 8008022:	f1b8 0f00 	cmp.w	r8, #0
 8008026:	d000      	beq.n	800802a <_strtol_l.isra.0+0xe2>
 8008028:	426d      	negs	r5, r5
 800802a:	2a00      	cmp	r2, #0
 800802c:	d0f7      	beq.n	800801e <_strtol_l.isra.0+0xd6>
 800802e:	b10e      	cbz	r6, 8008034 <_strtol_l.isra.0+0xec>
 8008030:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	e7f2      	b.n	800801e <_strtol_l.isra.0+0xd6>
 8008038:	2430      	movs	r4, #48	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1b3      	bne.n	8007fa6 <_strtol_l.isra.0+0x5e>
 800803e:	2308      	movs	r3, #8
 8008040:	e7b1      	b.n	8007fa6 <_strtol_l.isra.0+0x5e>
 8008042:	2c30      	cmp	r4, #48	; 0x30
 8008044:	d0a4      	beq.n	8007f90 <_strtol_l.isra.0+0x48>
 8008046:	230a      	movs	r3, #10
 8008048:	e7ad      	b.n	8007fa6 <_strtol_l.isra.0+0x5e>
 800804a:	bf00      	nop
 800804c:	0800aec1 	.word	0x0800aec1

08008050 <_strtol_r>:
 8008050:	f7ff bf7a 	b.w	8007f48 <_strtol_l.isra.0>

08008054 <quorem>:
 8008054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	6903      	ldr	r3, [r0, #16]
 800805a:	690c      	ldr	r4, [r1, #16]
 800805c:	42a3      	cmp	r3, r4
 800805e:	4607      	mov	r7, r0
 8008060:	f2c0 8081 	blt.w	8008166 <quorem+0x112>
 8008064:	3c01      	subs	r4, #1
 8008066:	f101 0814 	add.w	r8, r1, #20
 800806a:	f100 0514 	add.w	r5, r0, #20
 800806e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807c:	3301      	adds	r3, #1
 800807e:	429a      	cmp	r2, r3
 8008080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008088:	fbb2 f6f3 	udiv	r6, r2, r3
 800808c:	d331      	bcc.n	80080f2 <quorem+0x9e>
 800808e:	f04f 0e00 	mov.w	lr, #0
 8008092:	4640      	mov	r0, r8
 8008094:	46ac      	mov	ip, r5
 8008096:	46f2      	mov	sl, lr
 8008098:	f850 2b04 	ldr.w	r2, [r0], #4
 800809c:	b293      	uxth	r3, r2
 800809e:	fb06 e303 	mla	r3, r6, r3, lr
 80080a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ebaa 0303 	sub.w	r3, sl, r3
 80080ac:	0c12      	lsrs	r2, r2, #16
 80080ae:	f8dc a000 	ldr.w	sl, [ip]
 80080b2:	fb06 e202 	mla	r2, r6, r2, lr
 80080b6:	fa13 f38a 	uxtah	r3, r3, sl
 80080ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080be:	fa1f fa82 	uxth.w	sl, r2
 80080c2:	f8dc 2000 	ldr.w	r2, [ip]
 80080c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d4:	4581      	cmp	r9, r0
 80080d6:	f84c 3b04 	str.w	r3, [ip], #4
 80080da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080de:	d2db      	bcs.n	8008098 <quorem+0x44>
 80080e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080e4:	b92b      	cbnz	r3, 80080f2 <quorem+0x9e>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	429d      	cmp	r5, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	d32e      	bcc.n	800814e <quorem+0xfa>
 80080f0:	613c      	str	r4, [r7, #16]
 80080f2:	4638      	mov	r0, r7
 80080f4:	f001 fc8c 	bl	8009a10 <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	db24      	blt.n	8008146 <quorem+0xf2>
 80080fc:	3601      	adds	r6, #1
 80080fe:	4628      	mov	r0, r5
 8008100:	f04f 0c00 	mov.w	ip, #0
 8008104:	f858 2b04 	ldr.w	r2, [r8], #4
 8008108:	f8d0 e000 	ldr.w	lr, [r0]
 800810c:	b293      	uxth	r3, r2
 800810e:	ebac 0303 	sub.w	r3, ip, r3
 8008112:	0c12      	lsrs	r2, r2, #16
 8008114:	fa13 f38e 	uxtah	r3, r3, lr
 8008118:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800811c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008120:	b29b      	uxth	r3, r3
 8008122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008126:	45c1      	cmp	r9, r8
 8008128:	f840 3b04 	str.w	r3, [r0], #4
 800812c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008130:	d2e8      	bcs.n	8008104 <quorem+0xb0>
 8008132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813a:	b922      	cbnz	r2, 8008146 <quorem+0xf2>
 800813c:	3b04      	subs	r3, #4
 800813e:	429d      	cmp	r5, r3
 8008140:	461a      	mov	r2, r3
 8008142:	d30a      	bcc.n	800815a <quorem+0x106>
 8008144:	613c      	str	r4, [r7, #16]
 8008146:	4630      	mov	r0, r6
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	3b04      	subs	r3, #4
 8008152:	2a00      	cmp	r2, #0
 8008154:	d1cc      	bne.n	80080f0 <quorem+0x9c>
 8008156:	3c01      	subs	r4, #1
 8008158:	e7c7      	b.n	80080ea <quorem+0x96>
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	3b04      	subs	r3, #4
 800815e:	2a00      	cmp	r2, #0
 8008160:	d1f0      	bne.n	8008144 <quorem+0xf0>
 8008162:	3c01      	subs	r4, #1
 8008164:	e7eb      	b.n	800813e <quorem+0xea>
 8008166:	2000      	movs	r0, #0
 8008168:	e7ee      	b.n	8008148 <quorem+0xf4>
 800816a:	0000      	movs	r0, r0
 800816c:	0000      	movs	r0, r0
	...

08008170 <_dtoa_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	ed2d 8b02 	vpush	{d8}
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	b095      	sub	sp, #84	; 0x54
 800817e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008180:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008184:	9105      	str	r1, [sp, #20]
 8008186:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800818a:	4604      	mov	r4, r0
 800818c:	9209      	str	r2, [sp, #36]	; 0x24
 800818e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008190:	b975      	cbnz	r5, 80081b0 <_dtoa_r+0x40>
 8008192:	2010      	movs	r0, #16
 8008194:	f001 f94c 	bl	8009430 <malloc>
 8008198:	4602      	mov	r2, r0
 800819a:	6260      	str	r0, [r4, #36]	; 0x24
 800819c:	b920      	cbnz	r0, 80081a8 <_dtoa_r+0x38>
 800819e:	4bb2      	ldr	r3, [pc, #712]	; (8008468 <_dtoa_r+0x2f8>)
 80081a0:	21ea      	movs	r1, #234	; 0xea
 80081a2:	48b2      	ldr	r0, [pc, #712]	; (800846c <_dtoa_r+0x2fc>)
 80081a4:	f002 f874 	bl	800a290 <__assert_func>
 80081a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ac:	6005      	str	r5, [r0, #0]
 80081ae:	60c5      	str	r5, [r0, #12]
 80081b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	b151      	cbz	r1, 80081cc <_dtoa_r+0x5c>
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	604a      	str	r2, [r1, #4]
 80081ba:	2301      	movs	r3, #1
 80081bc:	4093      	lsls	r3, r2
 80081be:	608b      	str	r3, [r1, #8]
 80081c0:	4620      	mov	r0, r4
 80081c2:	f001 f99d 	bl	8009500 <_Bfree>
 80081c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	1e3b      	subs	r3, r7, #0
 80081ce:	bfb9      	ittee	lt
 80081d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	9303      	strlt	r3, [sp, #12]
 80081d6:	2300      	movge	r3, #0
 80081d8:	f8c8 3000 	strge.w	r3, [r8]
 80081dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80081e0:	4ba3      	ldr	r3, [pc, #652]	; (8008470 <_dtoa_r+0x300>)
 80081e2:	bfbc      	itt	lt
 80081e4:	2201      	movlt	r2, #1
 80081e6:	f8c8 2000 	strlt.w	r2, [r8]
 80081ea:	ea33 0309 	bics.w	r3, r3, r9
 80081ee:	d11b      	bne.n	8008228 <_dtoa_r+0xb8>
 80081f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081fc:	4333      	orrs	r3, r6
 80081fe:	f000 857a 	beq.w	8008cf6 <_dtoa_r+0xb86>
 8008202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008204:	b963      	cbnz	r3, 8008220 <_dtoa_r+0xb0>
 8008206:	4b9b      	ldr	r3, [pc, #620]	; (8008474 <_dtoa_r+0x304>)
 8008208:	e024      	b.n	8008254 <_dtoa_r+0xe4>
 800820a:	4b9b      	ldr	r3, [pc, #620]	; (8008478 <_dtoa_r+0x308>)
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	9800      	ldr	r0, [sp, #0]
 8008216:	b015      	add	sp, #84	; 0x54
 8008218:	ecbd 8b02 	vpop	{d8}
 800821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008220:	4b94      	ldr	r3, [pc, #592]	; (8008474 <_dtoa_r+0x304>)
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	3303      	adds	r3, #3
 8008226:	e7f3      	b.n	8008210 <_dtoa_r+0xa0>
 8008228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800822c:	2200      	movs	r2, #0
 800822e:	ec51 0b17 	vmov	r0, r1, d7
 8008232:	2300      	movs	r3, #0
 8008234:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008238:	f7f8 fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800823c:	4680      	mov	r8, r0
 800823e:	b158      	cbz	r0, 8008258 <_dtoa_r+0xe8>
 8008240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008242:	2301      	movs	r3, #1
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8551 	beq.w	8008cf0 <_dtoa_r+0xb80>
 800824e:	488b      	ldr	r0, [pc, #556]	; (800847c <_dtoa_r+0x30c>)
 8008250:	6018      	str	r0, [r3, #0]
 8008252:	1e43      	subs	r3, r0, #1
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	e7dd      	b.n	8008214 <_dtoa_r+0xa4>
 8008258:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800825c:	aa12      	add	r2, sp, #72	; 0x48
 800825e:	a913      	add	r1, sp, #76	; 0x4c
 8008260:	4620      	mov	r0, r4
 8008262:	f001 fcf5 	bl	8009c50 <__d2b>
 8008266:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800826a:	4683      	mov	fp, r0
 800826c:	2d00      	cmp	r5, #0
 800826e:	d07c      	beq.n	800836a <_dtoa_r+0x1fa>
 8008270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008272:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800827e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800828a:	4b7d      	ldr	r3, [pc, #500]	; (8008480 <_dtoa_r+0x310>)
 800828c:	2200      	movs	r2, #0
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	f7f8 f801 	bl	8000298 <__aeabi_dsub>
 8008296:	a36e      	add	r3, pc, #440	; (adr r3, 8008450 <_dtoa_r+0x2e0>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f9b4 	bl	8000608 <__aeabi_dmul>
 80082a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008458 <_dtoa_r+0x2e8>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f7 fff9 	bl	800029c <__adddf3>
 80082aa:	4606      	mov	r6, r0
 80082ac:	4628      	mov	r0, r5
 80082ae:	460f      	mov	r7, r1
 80082b0:	f7f8 f940 	bl	8000534 <__aeabi_i2d>
 80082b4:	a36a      	add	r3, pc, #424	; (adr r3, 8008460 <_dtoa_r+0x2f0>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 f9a5 	bl	8000608 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f7 ffe9 	bl	800029c <__adddf3>
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	f7f8 fc4b 	bl	8000b68 <__aeabi_d2iz>
 80082d2:	2200      	movs	r2, #0
 80082d4:	4682      	mov	sl, r0
 80082d6:	2300      	movs	r3, #0
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f7f8 fc06 	bl	8000aec <__aeabi_dcmplt>
 80082e0:	b148      	cbz	r0, 80082f6 <_dtoa_r+0x186>
 80082e2:	4650      	mov	r0, sl
 80082e4:	f7f8 f926 	bl	8000534 <__aeabi_i2d>
 80082e8:	4632      	mov	r2, r6
 80082ea:	463b      	mov	r3, r7
 80082ec:	f7f8 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80082f0:	b908      	cbnz	r0, 80082f6 <_dtoa_r+0x186>
 80082f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80082f6:	f1ba 0f16 	cmp.w	sl, #22
 80082fa:	d854      	bhi.n	80083a6 <_dtoa_r+0x236>
 80082fc:	4b61      	ldr	r3, [pc, #388]	; (8008484 <_dtoa_r+0x314>)
 80082fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800830a:	f7f8 fbef 	bl	8000aec <__aeabi_dcmplt>
 800830e:	2800      	cmp	r0, #0
 8008310:	d04b      	beq.n	80083aa <_dtoa_r+0x23a>
 8008312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008316:	2300      	movs	r3, #0
 8008318:	930e      	str	r3, [sp, #56]	; 0x38
 800831a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800831c:	1b5d      	subs	r5, r3, r5
 800831e:	1e6b      	subs	r3, r5, #1
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	bf43      	ittte	mi
 8008324:	2300      	movmi	r3, #0
 8008326:	f1c5 0801 	rsbmi	r8, r5, #1
 800832a:	9304      	strmi	r3, [sp, #16]
 800832c:	f04f 0800 	movpl.w	r8, #0
 8008330:	f1ba 0f00 	cmp.w	sl, #0
 8008334:	db3b      	blt.n	80083ae <_dtoa_r+0x23e>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800833c:	4453      	add	r3, sl
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	2300      	movs	r3, #0
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	2b09      	cmp	r3, #9
 8008348:	d869      	bhi.n	800841e <_dtoa_r+0x2ae>
 800834a:	2b05      	cmp	r3, #5
 800834c:	bfc4      	itt	gt
 800834e:	3b04      	subgt	r3, #4
 8008350:	9305      	strgt	r3, [sp, #20]
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	f1a3 0302 	sub.w	r3, r3, #2
 8008358:	bfcc      	ite	gt
 800835a:	2500      	movgt	r5, #0
 800835c:	2501      	movle	r5, #1
 800835e:	2b03      	cmp	r3, #3
 8008360:	d869      	bhi.n	8008436 <_dtoa_r+0x2c6>
 8008362:	e8df f003 	tbb	[pc, r3]
 8008366:	4e2c      	.short	0x4e2c
 8008368:	5a4c      	.short	0x5a4c
 800836a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800836e:	441d      	add	r5, r3
 8008370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008374:	2b20      	cmp	r3, #32
 8008376:	bfc1      	itttt	gt
 8008378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800837c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008380:	fa09 f303 	lslgt.w	r3, r9, r3
 8008384:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008388:	bfda      	itte	le
 800838a:	f1c3 0320 	rsble	r3, r3, #32
 800838e:	fa06 f003 	lslle.w	r0, r6, r3
 8008392:	4318      	orrgt	r0, r3
 8008394:	f7f8 f8be 	bl	8000514 <__aeabi_ui2d>
 8008398:	2301      	movs	r3, #1
 800839a:	4606      	mov	r6, r0
 800839c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083a0:	3d01      	subs	r5, #1
 80083a2:	9310      	str	r3, [sp, #64]	; 0x40
 80083a4:	e771      	b.n	800828a <_dtoa_r+0x11a>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7b6      	b.n	8008318 <_dtoa_r+0x1a8>
 80083aa:	900e      	str	r0, [sp, #56]	; 0x38
 80083ac:	e7b5      	b.n	800831a <_dtoa_r+0x1aa>
 80083ae:	f1ca 0300 	rsb	r3, sl, #0
 80083b2:	9306      	str	r3, [sp, #24]
 80083b4:	2300      	movs	r3, #0
 80083b6:	eba8 080a 	sub.w	r8, r8, sl
 80083ba:	930d      	str	r3, [sp, #52]	; 0x34
 80083bc:	e7c2      	b.n	8008344 <_dtoa_r+0x1d4>
 80083be:	2300      	movs	r3, #0
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc39      	bgt.n	800843c <_dtoa_r+0x2cc>
 80083c8:	f04f 0901 	mov.w	r9, #1
 80083cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80083d0:	464b      	mov	r3, r9
 80083d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083d8:	2200      	movs	r2, #0
 80083da:	6042      	str	r2, [r0, #4]
 80083dc:	2204      	movs	r2, #4
 80083de:	f102 0614 	add.w	r6, r2, #20
 80083e2:	429e      	cmp	r6, r3
 80083e4:	6841      	ldr	r1, [r0, #4]
 80083e6:	d92f      	bls.n	8008448 <_dtoa_r+0x2d8>
 80083e8:	4620      	mov	r0, r4
 80083ea:	f001 f849 	bl	8009480 <_Balloc>
 80083ee:	9000      	str	r0, [sp, #0]
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d14b      	bne.n	800848c <_dtoa_r+0x31c>
 80083f4:	4b24      	ldr	r3, [pc, #144]	; (8008488 <_dtoa_r+0x318>)
 80083f6:	4602      	mov	r2, r0
 80083f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083fc:	e6d1      	b.n	80081a2 <_dtoa_r+0x32>
 80083fe:	2301      	movs	r3, #1
 8008400:	e7de      	b.n	80083c0 <_dtoa_r+0x250>
 8008402:	2300      	movs	r3, #0
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	eb0a 0903 	add.w	r9, sl, r3
 800840c:	f109 0301 	add.w	r3, r9, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	bfb8      	it	lt
 8008416:	2301      	movlt	r3, #1
 8008418:	e7dd      	b.n	80083d6 <_dtoa_r+0x266>
 800841a:	2301      	movs	r3, #1
 800841c:	e7f2      	b.n	8008404 <_dtoa_r+0x294>
 800841e:	2501      	movs	r5, #1
 8008420:	2300      	movs	r3, #0
 8008422:	9305      	str	r3, [sp, #20]
 8008424:	9508      	str	r5, [sp, #32]
 8008426:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800842a:	2200      	movs	r2, #0
 800842c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008430:	2312      	movs	r3, #18
 8008432:	9209      	str	r2, [sp, #36]	; 0x24
 8008434:	e7cf      	b.n	80083d6 <_dtoa_r+0x266>
 8008436:	2301      	movs	r3, #1
 8008438:	9308      	str	r3, [sp, #32]
 800843a:	e7f4      	b.n	8008426 <_dtoa_r+0x2b6>
 800843c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008440:	f8cd 9004 	str.w	r9, [sp, #4]
 8008444:	464b      	mov	r3, r9
 8008446:	e7c6      	b.n	80083d6 <_dtoa_r+0x266>
 8008448:	3101      	adds	r1, #1
 800844a:	6041      	str	r1, [r0, #4]
 800844c:	0052      	lsls	r2, r2, #1
 800844e:	e7c6      	b.n	80083de <_dtoa_r+0x26e>
 8008450:	636f4361 	.word	0x636f4361
 8008454:	3fd287a7 	.word	0x3fd287a7
 8008458:	8b60c8b3 	.word	0x8b60c8b3
 800845c:	3fc68a28 	.word	0x3fc68a28
 8008460:	509f79fb 	.word	0x509f79fb
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	0800afce 	.word	0x0800afce
 800846c:	0800afe5 	.word	0x0800afe5
 8008470:	7ff00000 	.word	0x7ff00000
 8008474:	0800afca 	.word	0x0800afca
 8008478:	0800afc1 	.word	0x0800afc1
 800847c:	0800ae45 	.word	0x0800ae45
 8008480:	3ff80000 	.word	0x3ff80000
 8008484:	0800b160 	.word	0x0800b160
 8008488:	0800b044 	.word	0x0800b044
 800848c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848e:	9a00      	ldr	r2, [sp, #0]
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	2b0e      	cmp	r3, #14
 8008496:	f200 80ad 	bhi.w	80085f4 <_dtoa_r+0x484>
 800849a:	2d00      	cmp	r5, #0
 800849c:	f000 80aa 	beq.w	80085f4 <_dtoa_r+0x484>
 80084a0:	f1ba 0f00 	cmp.w	sl, #0
 80084a4:	dd36      	ble.n	8008514 <_dtoa_r+0x3a4>
 80084a6:	4ac3      	ldr	r2, [pc, #780]	; (80087b4 <_dtoa_r+0x644>)
 80084a8:	f00a 030f 	and.w	r3, sl, #15
 80084ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084b0:	ed93 7b00 	vldr	d7, [r3]
 80084b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80084b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80084bc:	eeb0 8a47 	vmov.f32	s16, s14
 80084c0:	eef0 8a67 	vmov.f32	s17, s15
 80084c4:	d016      	beq.n	80084f4 <_dtoa_r+0x384>
 80084c6:	4bbc      	ldr	r3, [pc, #752]	; (80087b8 <_dtoa_r+0x648>)
 80084c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084d0:	f7f8 f9c4 	bl	800085c <__aeabi_ddiv>
 80084d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d8:	f007 070f 	and.w	r7, r7, #15
 80084dc:	2503      	movs	r5, #3
 80084de:	4eb6      	ldr	r6, [pc, #728]	; (80087b8 <_dtoa_r+0x648>)
 80084e0:	b957      	cbnz	r7, 80084f8 <_dtoa_r+0x388>
 80084e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e6:	ec53 2b18 	vmov	r2, r3, d8
 80084ea:	f7f8 f9b7 	bl	800085c <__aeabi_ddiv>
 80084ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f2:	e029      	b.n	8008548 <_dtoa_r+0x3d8>
 80084f4:	2502      	movs	r5, #2
 80084f6:	e7f2      	b.n	80084de <_dtoa_r+0x36e>
 80084f8:	07f9      	lsls	r1, r7, #31
 80084fa:	d508      	bpl.n	800850e <_dtoa_r+0x39e>
 80084fc:	ec51 0b18 	vmov	r0, r1, d8
 8008500:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	ec41 0b18 	vmov	d8, r0, r1
 800850c:	3501      	adds	r5, #1
 800850e:	107f      	asrs	r7, r7, #1
 8008510:	3608      	adds	r6, #8
 8008512:	e7e5      	b.n	80084e0 <_dtoa_r+0x370>
 8008514:	f000 80a6 	beq.w	8008664 <_dtoa_r+0x4f4>
 8008518:	f1ca 0600 	rsb	r6, sl, #0
 800851c:	4ba5      	ldr	r3, [pc, #660]	; (80087b4 <_dtoa_r+0x644>)
 800851e:	4fa6      	ldr	r7, [pc, #664]	; (80087b8 <_dtoa_r+0x648>)
 8008520:	f006 020f 	and.w	r2, r6, #15
 8008524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	1136      	asrs	r6, r6, #4
 800853a:	2300      	movs	r3, #0
 800853c:	2502      	movs	r5, #2
 800853e:	2e00      	cmp	r6, #0
 8008540:	f040 8085 	bne.w	800864e <_dtoa_r+0x4de>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1d2      	bne.n	80084ee <_dtoa_r+0x37e>
 8008548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 808c 	beq.w	8008668 <_dtoa_r+0x4f8>
 8008550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008554:	4b99      	ldr	r3, [pc, #612]	; (80087bc <_dtoa_r+0x64c>)
 8008556:	2200      	movs	r2, #0
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fac6 	bl	8000aec <__aeabi_dcmplt>
 8008560:	2800      	cmp	r0, #0
 8008562:	f000 8081 	beq.w	8008668 <_dtoa_r+0x4f8>
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d07d      	beq.n	8008668 <_dtoa_r+0x4f8>
 800856c:	f1b9 0f00 	cmp.w	r9, #0
 8008570:	dd3c      	ble.n	80085ec <_dtoa_r+0x47c>
 8008572:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	2200      	movs	r2, #0
 800857a:	4b91      	ldr	r3, [pc, #580]	; (80087c0 <_dtoa_r+0x650>)
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	f7f8 f842 	bl	8000608 <__aeabi_dmul>
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	3501      	adds	r5, #1
 800858a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800858e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008592:	4628      	mov	r0, r5
 8008594:	f7f7 ffce 	bl	8000534 <__aeabi_i2d>
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	4b88      	ldr	r3, [pc, #544]	; (80087c4 <_dtoa_r+0x654>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	f7f7 fe7a 	bl	800029c <__adddf3>
 80085a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d15c      	bne.n	8008672 <_dtoa_r+0x502>
 80085b8:	4b83      	ldr	r3, [pc, #524]	; (80087c8 <_dtoa_r+0x658>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f7 fe6a 	bl	8000298 <__aeabi_dsub>
 80085c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	f7f8 faac 	bl	8000b28 <__aeabi_dcmpgt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f040 8296 	bne.w	8008b02 <_dtoa_r+0x992>
 80085d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085da:	4630      	mov	r0, r6
 80085dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085e0:	4639      	mov	r1, r7
 80085e2:	f7f8 fa83 	bl	8000aec <__aeabi_dcmplt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 8288 	bne.w	8008afc <_dtoa_r+0x98c>
 80085ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f2c0 8158 	blt.w	80088ac <_dtoa_r+0x73c>
 80085fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008600:	f300 8154 	bgt.w	80088ac <_dtoa_r+0x73c>
 8008604:	4b6b      	ldr	r3, [pc, #428]	; (80087b4 <_dtoa_r+0x644>)
 8008606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800860a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800860e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	f280 80e3 	bge.w	80087dc <_dtoa_r+0x66c>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f300 80df 	bgt.w	80087dc <_dtoa_r+0x66c>
 800861e:	f040 826d 	bne.w	8008afc <_dtoa_r+0x98c>
 8008622:	4b69      	ldr	r3, [pc, #420]	; (80087c8 <_dtoa_r+0x658>)
 8008624:	2200      	movs	r2, #0
 8008626:	4640      	mov	r0, r8
 8008628:	4649      	mov	r1, r9
 800862a:	f7f7 ffed 	bl	8000608 <__aeabi_dmul>
 800862e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008632:	f7f8 fa6f 	bl	8000b14 <__aeabi_dcmpge>
 8008636:	9e01      	ldr	r6, [sp, #4]
 8008638:	4637      	mov	r7, r6
 800863a:	2800      	cmp	r0, #0
 800863c:	f040 8243 	bne.w	8008ac6 <_dtoa_r+0x956>
 8008640:	9d00      	ldr	r5, [sp, #0]
 8008642:	2331      	movs	r3, #49	; 0x31
 8008644:	f805 3b01 	strb.w	r3, [r5], #1
 8008648:	f10a 0a01 	add.w	sl, sl, #1
 800864c:	e23f      	b.n	8008ace <_dtoa_r+0x95e>
 800864e:	07f2      	lsls	r2, r6, #31
 8008650:	d505      	bpl.n	800865e <_dtoa_r+0x4ee>
 8008652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008656:	f7f7 ffd7 	bl	8000608 <__aeabi_dmul>
 800865a:	3501      	adds	r5, #1
 800865c:	2301      	movs	r3, #1
 800865e:	1076      	asrs	r6, r6, #1
 8008660:	3708      	adds	r7, #8
 8008662:	e76c      	b.n	800853e <_dtoa_r+0x3ce>
 8008664:	2502      	movs	r5, #2
 8008666:	e76f      	b.n	8008548 <_dtoa_r+0x3d8>
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	f8cd a01c 	str.w	sl, [sp, #28]
 800866e:	930c      	str	r3, [sp, #48]	; 0x30
 8008670:	e78d      	b.n	800858e <_dtoa_r+0x41e>
 8008672:	9900      	ldr	r1, [sp, #0]
 8008674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008678:	4b4e      	ldr	r3, [pc, #312]	; (80087b4 <_dtoa_r+0x644>)
 800867a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800867e:	4401      	add	r1, r0
 8008680:	9102      	str	r1, [sp, #8]
 8008682:	9908      	ldr	r1, [sp, #32]
 8008684:	eeb0 8a47 	vmov.f32	s16, s14
 8008688:	eef0 8a67 	vmov.f32	s17, s15
 800868c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008694:	2900      	cmp	r1, #0
 8008696:	d045      	beq.n	8008724 <_dtoa_r+0x5b4>
 8008698:	494c      	ldr	r1, [pc, #304]	; (80087cc <_dtoa_r+0x65c>)
 800869a:	2000      	movs	r0, #0
 800869c:	f7f8 f8de 	bl	800085c <__aeabi_ddiv>
 80086a0:	ec53 2b18 	vmov	r2, r3, d8
 80086a4:	f7f7 fdf8 	bl	8000298 <__aeabi_dsub>
 80086a8:	9d00      	ldr	r5, [sp, #0]
 80086aa:	ec41 0b18 	vmov	d8, r0, r1
 80086ae:	4639      	mov	r1, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7f8 fa59 	bl	8000b68 <__aeabi_d2iz>
 80086b6:	900c      	str	r0, [sp, #48]	; 0x30
 80086b8:	f7f7 ff3c 	bl	8000534 <__aeabi_i2d>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f7 fde8 	bl	8000298 <__aeabi_dsub>
 80086c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ca:	3330      	adds	r3, #48	; 0x30
 80086cc:	f805 3b01 	strb.w	r3, [r5], #1
 80086d0:	ec53 2b18 	vmov	r2, r3, d8
 80086d4:	4606      	mov	r6, r0
 80086d6:	460f      	mov	r7, r1
 80086d8:	f7f8 fa08 	bl	8000aec <__aeabi_dcmplt>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d165      	bne.n	80087ac <_dtoa_r+0x63c>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	4935      	ldr	r1, [pc, #212]	; (80087bc <_dtoa_r+0x64c>)
 80086e6:	2000      	movs	r0, #0
 80086e8:	f7f7 fdd6 	bl	8000298 <__aeabi_dsub>
 80086ec:	ec53 2b18 	vmov	r2, r3, d8
 80086f0:	f7f8 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f040 80b9 	bne.w	800886c <_dtoa_r+0x6fc>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	429d      	cmp	r5, r3
 80086fe:	f43f af75 	beq.w	80085ec <_dtoa_r+0x47c>
 8008702:	4b2f      	ldr	r3, [pc, #188]	; (80087c0 <_dtoa_r+0x650>)
 8008704:	ec51 0b18 	vmov	r0, r1, d8
 8008708:	2200      	movs	r2, #0
 800870a:	f7f7 ff7d 	bl	8000608 <__aeabi_dmul>
 800870e:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <_dtoa_r+0x650>)
 8008710:	ec41 0b18 	vmov	d8, r0, r1
 8008714:	2200      	movs	r2, #0
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	e7c4      	b.n	80086ae <_dtoa_r+0x53e>
 8008724:	ec51 0b17 	vmov	r0, r1, d7
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	9d00      	ldr	r5, [sp, #0]
 8008730:	930c      	str	r3, [sp, #48]	; 0x30
 8008732:	ec41 0b18 	vmov	d8, r0, r1
 8008736:	4639      	mov	r1, r7
 8008738:	4630      	mov	r0, r6
 800873a:	f7f8 fa15 	bl	8000b68 <__aeabi_d2iz>
 800873e:	9011      	str	r0, [sp, #68]	; 0x44
 8008740:	f7f7 fef8 	bl	8000534 <__aeabi_i2d>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fda4 	bl	8000298 <__aeabi_dsub>
 8008750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008752:	3330      	adds	r3, #48	; 0x30
 8008754:	f805 3b01 	strb.w	r3, [r5], #1
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	429d      	cmp	r5, r3
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	d134      	bne.n	80087d0 <_dtoa_r+0x660>
 8008766:	4b19      	ldr	r3, [pc, #100]	; (80087cc <_dtoa_r+0x65c>)
 8008768:	ec51 0b18 	vmov	r0, r1, d8
 800876c:	f7f7 fd96 	bl	800029c <__adddf3>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f8 f9d6 	bl	8000b28 <__aeabi_dcmpgt>
 800877c:	2800      	cmp	r0, #0
 800877e:	d175      	bne.n	800886c <_dtoa_r+0x6fc>
 8008780:	ec53 2b18 	vmov	r2, r3, d8
 8008784:	4911      	ldr	r1, [pc, #68]	; (80087cc <_dtoa_r+0x65c>)
 8008786:	2000      	movs	r0, #0
 8008788:	f7f7 fd86 	bl	8000298 <__aeabi_dsub>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4630      	mov	r0, r6
 8008792:	4639      	mov	r1, r7
 8008794:	f7f8 f9aa 	bl	8000aec <__aeabi_dcmplt>
 8008798:	2800      	cmp	r0, #0
 800879a:	f43f af27 	beq.w	80085ec <_dtoa_r+0x47c>
 800879e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087a0:	1e6b      	subs	r3, r5, #1
 80087a2:	930c      	str	r3, [sp, #48]	; 0x30
 80087a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087a8:	2b30      	cmp	r3, #48	; 0x30
 80087aa:	d0f8      	beq.n	800879e <_dtoa_r+0x62e>
 80087ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087b0:	e04a      	b.n	8008848 <_dtoa_r+0x6d8>
 80087b2:	bf00      	nop
 80087b4:	0800b160 	.word	0x0800b160
 80087b8:	0800b138 	.word	0x0800b138
 80087bc:	3ff00000 	.word	0x3ff00000
 80087c0:	40240000 	.word	0x40240000
 80087c4:	401c0000 	.word	0x401c0000
 80087c8:	40140000 	.word	0x40140000
 80087cc:	3fe00000 	.word	0x3fe00000
 80087d0:	4baf      	ldr	r3, [pc, #700]	; (8008a90 <_dtoa_r+0x920>)
 80087d2:	f7f7 ff19 	bl	8000608 <__aeabi_dmul>
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	e7ac      	b.n	8008736 <_dtoa_r+0x5c6>
 80087dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087e0:	9d00      	ldr	r5, [sp, #0]
 80087e2:	4642      	mov	r2, r8
 80087e4:	464b      	mov	r3, r9
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f8 f837 	bl	800085c <__aeabi_ddiv>
 80087ee:	f7f8 f9bb 	bl	8000b68 <__aeabi_d2iz>
 80087f2:	9002      	str	r0, [sp, #8]
 80087f4:	f7f7 fe9e 	bl	8000534 <__aeabi_i2d>
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_dmul>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f7 fd46 	bl	8000298 <__aeabi_dsub>
 800880c:	9e02      	ldr	r6, [sp, #8]
 800880e:	9f01      	ldr	r7, [sp, #4]
 8008810:	3630      	adds	r6, #48	; 0x30
 8008812:	f805 6b01 	strb.w	r6, [r5], #1
 8008816:	9e00      	ldr	r6, [sp, #0]
 8008818:	1bae      	subs	r6, r5, r6
 800881a:	42b7      	cmp	r7, r6
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	d137      	bne.n	8008892 <_dtoa_r+0x722>
 8008822:	f7f7 fd3b 	bl	800029c <__adddf3>
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	f7f8 f97b 	bl	8000b28 <__aeabi_dcmpgt>
 8008832:	b9c8      	cbnz	r0, 8008868 <_dtoa_r+0x6f8>
 8008834:	4642      	mov	r2, r8
 8008836:	464b      	mov	r3, r9
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008840:	b110      	cbz	r0, 8008848 <_dtoa_r+0x6d8>
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	d40f      	bmi.n	8008868 <_dtoa_r+0x6f8>
 8008848:	4620      	mov	r0, r4
 800884a:	4659      	mov	r1, fp
 800884c:	f000 fe58 	bl	8009500 <_Bfree>
 8008850:	2300      	movs	r3, #0
 8008852:	702b      	strb	r3, [r5, #0]
 8008854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008856:	f10a 0001 	add.w	r0, sl, #1
 800885a:	6018      	str	r0, [r3, #0]
 800885c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885e:	2b00      	cmp	r3, #0
 8008860:	f43f acd8 	beq.w	8008214 <_dtoa_r+0xa4>
 8008864:	601d      	str	r5, [r3, #0]
 8008866:	e4d5      	b.n	8008214 <_dtoa_r+0xa4>
 8008868:	f8cd a01c 	str.w	sl, [sp, #28]
 800886c:	462b      	mov	r3, r5
 800886e:	461d      	mov	r5, r3
 8008870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008874:	2a39      	cmp	r2, #57	; 0x39
 8008876:	d108      	bne.n	800888a <_dtoa_r+0x71a>
 8008878:	9a00      	ldr	r2, [sp, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d1f7      	bne.n	800886e <_dtoa_r+0x6fe>
 800887e:	9a07      	ldr	r2, [sp, #28]
 8008880:	9900      	ldr	r1, [sp, #0]
 8008882:	3201      	adds	r2, #1
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	2230      	movs	r2, #48	; 0x30
 8008888:	700a      	strb	r2, [r1, #0]
 800888a:	781a      	ldrb	r2, [r3, #0]
 800888c:	3201      	adds	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	e78c      	b.n	80087ac <_dtoa_r+0x63c>
 8008892:	4b7f      	ldr	r3, [pc, #508]	; (8008a90 <_dtoa_r+0x920>)
 8008894:	2200      	movs	r2, #0
 8008896:	f7f7 feb7 	bl	8000608 <__aeabi_dmul>
 800889a:	2200      	movs	r2, #0
 800889c:	2300      	movs	r3, #0
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	f7f8 f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d09b      	beq.n	80087e2 <_dtoa_r+0x672>
 80088aa:	e7cd      	b.n	8008848 <_dtoa_r+0x6d8>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	f000 80c4 	beq.w	8008a3c <_dtoa_r+0x8cc>
 80088b4:	9a05      	ldr	r2, [sp, #20]
 80088b6:	2a01      	cmp	r2, #1
 80088b8:	f300 80a8 	bgt.w	8008a0c <_dtoa_r+0x89c>
 80088bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088be:	2a00      	cmp	r2, #0
 80088c0:	f000 80a0 	beq.w	8008a04 <_dtoa_r+0x894>
 80088c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088c8:	9e06      	ldr	r6, [sp, #24]
 80088ca:	4645      	mov	r5, r8
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	2101      	movs	r1, #1
 80088d0:	441a      	add	r2, r3
 80088d2:	4620      	mov	r0, r4
 80088d4:	4498      	add	r8, r3
 80088d6:	9204      	str	r2, [sp, #16]
 80088d8:	f000 ff18 	bl	800970c <__i2b>
 80088dc:	4607      	mov	r7, r0
 80088de:	2d00      	cmp	r5, #0
 80088e0:	dd0b      	ble.n	80088fa <_dtoa_r+0x78a>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd08      	ble.n	80088fa <_dtoa_r+0x78a>
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	9a04      	ldr	r2, [sp, #16]
 80088ec:	bfa8      	it	ge
 80088ee:	462b      	movge	r3, r5
 80088f0:	eba8 0803 	sub.w	r8, r8, r3
 80088f4:	1aed      	subs	r5, r5, r3
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	b1fb      	cbz	r3, 800893e <_dtoa_r+0x7ce>
 80088fe:	9b08      	ldr	r3, [sp, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 809f 	beq.w	8008a44 <_dtoa_r+0x8d4>
 8008906:	2e00      	cmp	r6, #0
 8008908:	dd11      	ble.n	800892e <_dtoa_r+0x7be>
 800890a:	4639      	mov	r1, r7
 800890c:	4632      	mov	r2, r6
 800890e:	4620      	mov	r0, r4
 8008910:	f000 ffb8 	bl	8009884 <__pow5mult>
 8008914:	465a      	mov	r2, fp
 8008916:	4601      	mov	r1, r0
 8008918:	4607      	mov	r7, r0
 800891a:	4620      	mov	r0, r4
 800891c:	f000 ff0c 	bl	8009738 <__multiply>
 8008920:	4659      	mov	r1, fp
 8008922:	9007      	str	r0, [sp, #28]
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fdeb 	bl	8009500 <_Bfree>
 800892a:	9b07      	ldr	r3, [sp, #28]
 800892c:	469b      	mov	fp, r3
 800892e:	9b06      	ldr	r3, [sp, #24]
 8008930:	1b9a      	subs	r2, r3, r6
 8008932:	d004      	beq.n	800893e <_dtoa_r+0x7ce>
 8008934:	4659      	mov	r1, fp
 8008936:	4620      	mov	r0, r4
 8008938:	f000 ffa4 	bl	8009884 <__pow5mult>
 800893c:	4683      	mov	fp, r0
 800893e:	2101      	movs	r1, #1
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fee3 	bl	800970c <__i2b>
 8008946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008948:	2b00      	cmp	r3, #0
 800894a:	4606      	mov	r6, r0
 800894c:	dd7c      	ble.n	8008a48 <_dtoa_r+0x8d8>
 800894e:	461a      	mov	r2, r3
 8008950:	4601      	mov	r1, r0
 8008952:	4620      	mov	r0, r4
 8008954:	f000 ff96 	bl	8009884 <__pow5mult>
 8008958:	9b05      	ldr	r3, [sp, #20]
 800895a:	2b01      	cmp	r3, #1
 800895c:	4606      	mov	r6, r0
 800895e:	dd76      	ble.n	8008a4e <_dtoa_r+0x8de>
 8008960:	2300      	movs	r3, #0
 8008962:	9306      	str	r3, [sp, #24]
 8008964:	6933      	ldr	r3, [r6, #16]
 8008966:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800896a:	6918      	ldr	r0, [r3, #16]
 800896c:	f000 fe7e 	bl	800966c <__hi0bits>
 8008970:	f1c0 0020 	rsb	r0, r0, #32
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	4418      	add	r0, r3
 8008978:	f010 001f 	ands.w	r0, r0, #31
 800897c:	f000 8086 	beq.w	8008a8c <_dtoa_r+0x91c>
 8008980:	f1c0 0320 	rsb	r3, r0, #32
 8008984:	2b04      	cmp	r3, #4
 8008986:	dd7f      	ble.n	8008a88 <_dtoa_r+0x918>
 8008988:	f1c0 001c 	rsb	r0, r0, #28
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	4403      	add	r3, r0
 8008990:	4480      	add	r8, r0
 8008992:	4405      	add	r5, r0
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	f1b8 0f00 	cmp.w	r8, #0
 800899a:	dd05      	ble.n	80089a8 <_dtoa_r+0x838>
 800899c:	4659      	mov	r1, fp
 800899e:	4642      	mov	r2, r8
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 ffc9 	bl	8009938 <__lshift>
 80089a6:	4683      	mov	fp, r0
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd05      	ble.n	80089ba <_dtoa_r+0x84a>
 80089ae:	4631      	mov	r1, r6
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 ffc0 	bl	8009938 <__lshift>
 80089b8:	4606      	mov	r6, r0
 80089ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d069      	beq.n	8008a94 <_dtoa_r+0x924>
 80089c0:	4631      	mov	r1, r6
 80089c2:	4658      	mov	r0, fp
 80089c4:	f001 f824 	bl	8009a10 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	da63      	bge.n	8008a94 <_dtoa_r+0x924>
 80089cc:	2300      	movs	r3, #0
 80089ce:	4659      	mov	r1, fp
 80089d0:	220a      	movs	r2, #10
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fdb6 	bl	8009544 <__multadd>
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089de:	4683      	mov	fp, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 818f 	beq.w	8008d04 <_dtoa_r+0xb94>
 80089e6:	4639      	mov	r1, r7
 80089e8:	2300      	movs	r3, #0
 80089ea:	220a      	movs	r2, #10
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fda9 	bl	8009544 <__multadd>
 80089f2:	f1b9 0f00 	cmp.w	r9, #0
 80089f6:	4607      	mov	r7, r0
 80089f8:	f300 808e 	bgt.w	8008b18 <_dtoa_r+0x9a8>
 80089fc:	9b05      	ldr	r3, [sp, #20]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	dc50      	bgt.n	8008aa4 <_dtoa_r+0x934>
 8008a02:	e089      	b.n	8008b18 <_dtoa_r+0x9a8>
 8008a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a0a:	e75d      	b.n	80088c8 <_dtoa_r+0x758>
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	1e5e      	subs	r6, r3, #1
 8008a10:	9b06      	ldr	r3, [sp, #24]
 8008a12:	42b3      	cmp	r3, r6
 8008a14:	bfbf      	itttt	lt
 8008a16:	9b06      	ldrlt	r3, [sp, #24]
 8008a18:	9606      	strlt	r6, [sp, #24]
 8008a1a:	1af2      	sublt	r2, r6, r3
 8008a1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008a1e:	bfb6      	itet	lt
 8008a20:	189b      	addlt	r3, r3, r2
 8008a22:	1b9e      	subge	r6, r3, r6
 8008a24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	bfb8      	it	lt
 8008a2a:	2600      	movlt	r6, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bfb5      	itete	lt
 8008a30:	eba8 0503 	sublt.w	r5, r8, r3
 8008a34:	9b01      	ldrge	r3, [sp, #4]
 8008a36:	2300      	movlt	r3, #0
 8008a38:	4645      	movge	r5, r8
 8008a3a:	e747      	b.n	80088cc <_dtoa_r+0x75c>
 8008a3c:	9e06      	ldr	r6, [sp, #24]
 8008a3e:	9f08      	ldr	r7, [sp, #32]
 8008a40:	4645      	mov	r5, r8
 8008a42:	e74c      	b.n	80088de <_dtoa_r+0x76e>
 8008a44:	9a06      	ldr	r2, [sp, #24]
 8008a46:	e775      	b.n	8008934 <_dtoa_r+0x7c4>
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	dc18      	bgt.n	8008a80 <_dtoa_r+0x910>
 8008a4e:	9b02      	ldr	r3, [sp, #8]
 8008a50:	b9b3      	cbnz	r3, 8008a80 <_dtoa_r+0x910>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a58:	b9a3      	cbnz	r3, 8008a84 <_dtoa_r+0x914>
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a60:	0d1b      	lsrs	r3, r3, #20
 8008a62:	051b      	lsls	r3, r3, #20
 8008a64:	b12b      	cbz	r3, 8008a72 <_dtoa_r+0x902>
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	f108 0801 	add.w	r8, r8, #1
 8008a70:	2301      	movs	r3, #1
 8008a72:	9306      	str	r3, [sp, #24]
 8008a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f47f af74 	bne.w	8008964 <_dtoa_r+0x7f4>
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e779      	b.n	8008974 <_dtoa_r+0x804>
 8008a80:	2300      	movs	r3, #0
 8008a82:	e7f6      	b.n	8008a72 <_dtoa_r+0x902>
 8008a84:	9b02      	ldr	r3, [sp, #8]
 8008a86:	e7f4      	b.n	8008a72 <_dtoa_r+0x902>
 8008a88:	d085      	beq.n	8008996 <_dtoa_r+0x826>
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	301c      	adds	r0, #28
 8008a8e:	e77d      	b.n	800898c <_dtoa_r+0x81c>
 8008a90:	40240000 	.word	0x40240000
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dc38      	bgt.n	8008b0c <_dtoa_r+0x99c>
 8008a9a:	9b05      	ldr	r3, [sp, #20]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	dd35      	ble.n	8008b0c <_dtoa_r+0x99c>
 8008aa0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008aa4:	f1b9 0f00 	cmp.w	r9, #0
 8008aa8:	d10d      	bne.n	8008ac6 <_dtoa_r+0x956>
 8008aaa:	4631      	mov	r1, r6
 8008aac:	464b      	mov	r3, r9
 8008aae:	2205      	movs	r2, #5
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fd47 	bl	8009544 <__multadd>
 8008ab6:	4601      	mov	r1, r0
 8008ab8:	4606      	mov	r6, r0
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 ffa8 	bl	8009a10 <__mcmp>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f73f adbd 	bgt.w	8008640 <_dtoa_r+0x4d0>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac8:	9d00      	ldr	r5, [sp, #0]
 8008aca:	ea6f 0a03 	mvn.w	sl, r3
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fd13 	bl	8009500 <_Bfree>
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	f43f aeb4 	beq.w	8008848 <_dtoa_r+0x6d8>
 8008ae0:	f1b8 0f00 	cmp.w	r8, #0
 8008ae4:	d005      	beq.n	8008af2 <_dtoa_r+0x982>
 8008ae6:	45b8      	cmp	r8, r7
 8008ae8:	d003      	beq.n	8008af2 <_dtoa_r+0x982>
 8008aea:	4641      	mov	r1, r8
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fd07 	bl	8009500 <_Bfree>
 8008af2:	4639      	mov	r1, r7
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fd03 	bl	8009500 <_Bfree>
 8008afa:	e6a5      	b.n	8008848 <_dtoa_r+0x6d8>
 8008afc:	2600      	movs	r6, #0
 8008afe:	4637      	mov	r7, r6
 8008b00:	e7e1      	b.n	8008ac6 <_dtoa_r+0x956>
 8008b02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b08:	4637      	mov	r7, r6
 8008b0a:	e599      	b.n	8008640 <_dtoa_r+0x4d0>
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 80fd 	beq.w	8008d12 <_dtoa_r+0xba2>
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	dd05      	ble.n	8008b28 <_dtoa_r+0x9b8>
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 ff09 	bl	8009938 <__lshift>
 8008b26:	4607      	mov	r7, r0
 8008b28:	9b06      	ldr	r3, [sp, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d05c      	beq.n	8008be8 <_dtoa_r+0xa78>
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fca5 	bl	8009480 <_Balloc>
 8008b36:	4605      	mov	r5, r0
 8008b38:	b928      	cbnz	r0, 8008b46 <_dtoa_r+0x9d6>
 8008b3a:	4b80      	ldr	r3, [pc, #512]	; (8008d3c <_dtoa_r+0xbcc>)
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b42:	f7ff bb2e 	b.w	80081a2 <_dtoa_r+0x32>
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	3202      	adds	r2, #2
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	f107 010c 	add.w	r1, r7, #12
 8008b50:	300c      	adds	r0, #12
 8008b52:	f000 fc87 	bl	8009464 <memcpy>
 8008b56:	2201      	movs	r2, #1
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 feec 	bl	8009938 <__lshift>
 8008b60:	9b00      	ldr	r3, [sp, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	444b      	add	r3, r9
 8008b6a:	9307      	str	r3, [sp, #28]
 8008b6c:	9b02      	ldr	r3, [sp, #8]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	46b8      	mov	r8, r7
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	4607      	mov	r7, r0
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4658      	mov	r0, fp
 8008b80:	9302      	str	r3, [sp, #8]
 8008b82:	f7ff fa67 	bl	8008054 <quorem>
 8008b86:	4603      	mov	r3, r0
 8008b88:	3330      	adds	r3, #48	; 0x30
 8008b8a:	9004      	str	r0, [sp, #16]
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	4658      	mov	r0, fp
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	f000 ff3d 	bl	8009a10 <__mcmp>
 8008b96:	463a      	mov	r2, r7
 8008b98:	4681      	mov	r9, r0
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 ff53 	bl	8009a48 <__mdiff>
 8008ba2:	68c2      	ldr	r2, [r0, #12]
 8008ba4:	9b08      	ldr	r3, [sp, #32]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	bb02      	cbnz	r2, 8008bec <_dtoa_r+0xa7c>
 8008baa:	4601      	mov	r1, r0
 8008bac:	4658      	mov	r0, fp
 8008bae:	f000 ff2f 	bl	8009a10 <__mcmp>
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4620      	mov	r0, r4
 8008bba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008bbe:	f000 fc9f 	bl	8009500 <_Bfree>
 8008bc2:	9b05      	ldr	r3, [sp, #20]
 8008bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc6:	9d01      	ldr	r5, [sp, #4]
 8008bc8:	ea43 0102 	orr.w	r1, r3, r2
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	9b08      	ldr	r3, [sp, #32]
 8008bd2:	d10d      	bne.n	8008bf0 <_dtoa_r+0xa80>
 8008bd4:	2b39      	cmp	r3, #57	; 0x39
 8008bd6:	d029      	beq.n	8008c2c <_dtoa_r+0xabc>
 8008bd8:	f1b9 0f00 	cmp.w	r9, #0
 8008bdc:	dd01      	ble.n	8008be2 <_dtoa_r+0xa72>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	3331      	adds	r3, #49	; 0x31
 8008be2:	9a02      	ldr	r2, [sp, #8]
 8008be4:	7013      	strb	r3, [r2, #0]
 8008be6:	e774      	b.n	8008ad2 <_dtoa_r+0x962>
 8008be8:	4638      	mov	r0, r7
 8008bea:	e7b9      	b.n	8008b60 <_dtoa_r+0x9f0>
 8008bec:	2201      	movs	r2, #1
 8008bee:	e7e2      	b.n	8008bb6 <_dtoa_r+0xa46>
 8008bf0:	f1b9 0f00 	cmp.w	r9, #0
 8008bf4:	db06      	blt.n	8008c04 <_dtoa_r+0xa94>
 8008bf6:	9905      	ldr	r1, [sp, #20]
 8008bf8:	ea41 0909 	orr.w	r9, r1, r9
 8008bfc:	9906      	ldr	r1, [sp, #24]
 8008bfe:	ea59 0101 	orrs.w	r1, r9, r1
 8008c02:	d120      	bne.n	8008c46 <_dtoa_r+0xad6>
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	ddec      	ble.n	8008be2 <_dtoa_r+0xa72>
 8008c08:	4659      	mov	r1, fp
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	f000 fe92 	bl	8009938 <__lshift>
 8008c14:	4631      	mov	r1, r6
 8008c16:	4683      	mov	fp, r0
 8008c18:	f000 fefa 	bl	8009a10 <__mcmp>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	dc02      	bgt.n	8008c28 <_dtoa_r+0xab8>
 8008c22:	d1de      	bne.n	8008be2 <_dtoa_r+0xa72>
 8008c24:	07da      	lsls	r2, r3, #31
 8008c26:	d5dc      	bpl.n	8008be2 <_dtoa_r+0xa72>
 8008c28:	2b39      	cmp	r3, #57	; 0x39
 8008c2a:	d1d8      	bne.n	8008bde <_dtoa_r+0xa6e>
 8008c2c:	9a02      	ldr	r2, [sp, #8]
 8008c2e:	2339      	movs	r3, #57	; 0x39
 8008c30:	7013      	strb	r3, [r2, #0]
 8008c32:	462b      	mov	r3, r5
 8008c34:	461d      	mov	r5, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c3c:	2a39      	cmp	r2, #57	; 0x39
 8008c3e:	d050      	beq.n	8008ce2 <_dtoa_r+0xb72>
 8008c40:	3201      	adds	r2, #1
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	e745      	b.n	8008ad2 <_dtoa_r+0x962>
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	dd03      	ble.n	8008c52 <_dtoa_r+0xae2>
 8008c4a:	2b39      	cmp	r3, #57	; 0x39
 8008c4c:	d0ee      	beq.n	8008c2c <_dtoa_r+0xabc>
 8008c4e:	3301      	adds	r3, #1
 8008c50:	e7c7      	b.n	8008be2 <_dtoa_r+0xa72>
 8008c52:	9a01      	ldr	r2, [sp, #4]
 8008c54:	9907      	ldr	r1, [sp, #28]
 8008c56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c5a:	428a      	cmp	r2, r1
 8008c5c:	d02a      	beq.n	8008cb4 <_dtoa_r+0xb44>
 8008c5e:	4659      	mov	r1, fp
 8008c60:	2300      	movs	r3, #0
 8008c62:	220a      	movs	r2, #10
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fc6d 	bl	8009544 <__multadd>
 8008c6a:	45b8      	cmp	r8, r7
 8008c6c:	4683      	mov	fp, r0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	f04f 020a 	mov.w	r2, #10
 8008c76:	4641      	mov	r1, r8
 8008c78:	4620      	mov	r0, r4
 8008c7a:	d107      	bne.n	8008c8c <_dtoa_r+0xb1c>
 8008c7c:	f000 fc62 	bl	8009544 <__multadd>
 8008c80:	4680      	mov	r8, r0
 8008c82:	4607      	mov	r7, r0
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	3301      	adds	r3, #1
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	e775      	b.n	8008b78 <_dtoa_r+0xa08>
 8008c8c:	f000 fc5a 	bl	8009544 <__multadd>
 8008c90:	4639      	mov	r1, r7
 8008c92:	4680      	mov	r8, r0
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fc53 	bl	8009544 <__multadd>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	e7f0      	b.n	8008c84 <_dtoa_r+0xb14>
 8008ca2:	f1b9 0f00 	cmp.w	r9, #0
 8008ca6:	9a00      	ldr	r2, [sp, #0]
 8008ca8:	bfcc      	ite	gt
 8008caa:	464d      	movgt	r5, r9
 8008cac:	2501      	movle	r5, #1
 8008cae:	4415      	add	r5, r2
 8008cb0:	f04f 0800 	mov.w	r8, #0
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	f000 fe3c 	bl	8009938 <__lshift>
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4683      	mov	fp, r0
 8008cc4:	f000 fea4 	bl	8009a10 <__mcmp>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dcb2      	bgt.n	8008c32 <_dtoa_r+0xac2>
 8008ccc:	d102      	bne.n	8008cd4 <_dtoa_r+0xb64>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	07db      	lsls	r3, r3, #31
 8008cd2:	d4ae      	bmi.n	8008c32 <_dtoa_r+0xac2>
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cdc:	2a30      	cmp	r2, #48	; 0x30
 8008cde:	d0fa      	beq.n	8008cd6 <_dtoa_r+0xb66>
 8008ce0:	e6f7      	b.n	8008ad2 <_dtoa_r+0x962>
 8008ce2:	9a00      	ldr	r2, [sp, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d1a5      	bne.n	8008c34 <_dtoa_r+0xac4>
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	2331      	movs	r3, #49	; 0x31
 8008cee:	e779      	b.n	8008be4 <_dtoa_r+0xa74>
 8008cf0:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <_dtoa_r+0xbd0>)
 8008cf2:	f7ff baaf 	b.w	8008254 <_dtoa_r+0xe4>
 8008cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f47f aa86 	bne.w	800820a <_dtoa_r+0x9a>
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <_dtoa_r+0xbd4>)
 8008d00:	f7ff baa8 	b.w	8008254 <_dtoa_r+0xe4>
 8008d04:	f1b9 0f00 	cmp.w	r9, #0
 8008d08:	dc03      	bgt.n	8008d12 <_dtoa_r+0xba2>
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	f73f aec9 	bgt.w	8008aa4 <_dtoa_r+0x934>
 8008d12:	9d00      	ldr	r5, [sp, #0]
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	f7ff f99c 	bl	8008054 <quorem>
 8008d1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d20:	f805 3b01 	strb.w	r3, [r5], #1
 8008d24:	9a00      	ldr	r2, [sp, #0]
 8008d26:	1aaa      	subs	r2, r5, r2
 8008d28:	4591      	cmp	r9, r2
 8008d2a:	ddba      	ble.n	8008ca2 <_dtoa_r+0xb32>
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	2300      	movs	r3, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fc06 	bl	8009544 <__multadd>
 8008d38:	4683      	mov	fp, r0
 8008d3a:	e7eb      	b.n	8008d14 <_dtoa_r+0xba4>
 8008d3c:	0800b044 	.word	0x0800b044
 8008d40:	0800ae44 	.word	0x0800ae44
 8008d44:	0800afc1 	.word	0x0800afc1

08008d48 <rshift>:
 8008d48:	6903      	ldr	r3, [r0, #16]
 8008d4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d56:	f100 0414 	add.w	r4, r0, #20
 8008d5a:	dd45      	ble.n	8008de8 <rshift+0xa0>
 8008d5c:	f011 011f 	ands.w	r1, r1, #31
 8008d60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d68:	d10c      	bne.n	8008d84 <rshift+0x3c>
 8008d6a:	f100 0710 	add.w	r7, r0, #16
 8008d6e:	4629      	mov	r1, r5
 8008d70:	42b1      	cmp	r1, r6
 8008d72:	d334      	bcc.n	8008dde <rshift+0x96>
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	1eea      	subs	r2, r5, #3
 8008d7a:	4296      	cmp	r6, r2
 8008d7c:	bf38      	it	cc
 8008d7e:	2300      	movcc	r3, #0
 8008d80:	4423      	add	r3, r4
 8008d82:	e015      	b.n	8008db0 <rshift+0x68>
 8008d84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d88:	f1c1 0820 	rsb	r8, r1, #32
 8008d8c:	40cf      	lsrs	r7, r1
 8008d8e:	f105 0e04 	add.w	lr, r5, #4
 8008d92:	46a1      	mov	r9, r4
 8008d94:	4576      	cmp	r6, lr
 8008d96:	46f4      	mov	ip, lr
 8008d98:	d815      	bhi.n	8008dc6 <rshift+0x7e>
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	009a      	lsls	r2, r3, #2
 8008d9e:	3a04      	subs	r2, #4
 8008da0:	3501      	adds	r5, #1
 8008da2:	42ae      	cmp	r6, r5
 8008da4:	bf38      	it	cc
 8008da6:	2200      	movcc	r2, #0
 8008da8:	18a3      	adds	r3, r4, r2
 8008daa:	50a7      	str	r7, [r4, r2]
 8008dac:	b107      	cbz	r7, 8008db0 <rshift+0x68>
 8008dae:	3304      	adds	r3, #4
 8008db0:	1b1a      	subs	r2, r3, r4
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008db8:	bf08      	it	eq
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	6102      	str	r2, [r0, #16]
 8008dbe:	bf08      	it	eq
 8008dc0:	6143      	streq	r3, [r0, #20]
 8008dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	f8dc c000 	ldr.w	ip, [ip]
 8008dca:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dce:	ea4c 0707 	orr.w	r7, ip, r7
 8008dd2:	f849 7b04 	str.w	r7, [r9], #4
 8008dd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dda:	40cf      	lsrs	r7, r1
 8008ddc:	e7da      	b.n	8008d94 <rshift+0x4c>
 8008dde:	f851 cb04 	ldr.w	ip, [r1], #4
 8008de2:	f847 cf04 	str.w	ip, [r7, #4]!
 8008de6:	e7c3      	b.n	8008d70 <rshift+0x28>
 8008de8:	4623      	mov	r3, r4
 8008dea:	e7e1      	b.n	8008db0 <rshift+0x68>

08008dec <__hexdig_fun>:
 8008dec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008df0:	2b09      	cmp	r3, #9
 8008df2:	d802      	bhi.n	8008dfa <__hexdig_fun+0xe>
 8008df4:	3820      	subs	r0, #32
 8008df6:	b2c0      	uxtb	r0, r0
 8008df8:	4770      	bx	lr
 8008dfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d801      	bhi.n	8008e06 <__hexdig_fun+0x1a>
 8008e02:	3847      	subs	r0, #71	; 0x47
 8008e04:	e7f7      	b.n	8008df6 <__hexdig_fun+0xa>
 8008e06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d801      	bhi.n	8008e12 <__hexdig_fun+0x26>
 8008e0e:	3827      	subs	r0, #39	; 0x27
 8008e10:	e7f1      	b.n	8008df6 <__hexdig_fun+0xa>
 8008e12:	2000      	movs	r0, #0
 8008e14:	4770      	bx	lr
	...

08008e18 <__gethex>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	ed2d 8b02 	vpush	{d8}
 8008e20:	b089      	sub	sp, #36	; 0x24
 8008e22:	ee08 0a10 	vmov	s16, r0
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	4bbc      	ldr	r3, [pc, #752]	; (800911c <__gethex+0x304>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	468b      	mov	fp, r1
 8008e32:	4690      	mov	r8, r2
 8008e34:	f7f7 f9d4 	bl	80001e0 <strlen>
 8008e38:	9b01      	ldr	r3, [sp, #4]
 8008e3a:	f8db 2000 	ldr.w	r2, [fp]
 8008e3e:	4403      	add	r3, r0
 8008e40:	4682      	mov	sl, r0
 8008e42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	1c93      	adds	r3, r2, #2
 8008e4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e52:	32fe      	adds	r2, #254	; 0xfe
 8008e54:	18d1      	adds	r1, r2, r3
 8008e56:	461f      	mov	r7, r3
 8008e58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e5c:	9100      	str	r1, [sp, #0]
 8008e5e:	2830      	cmp	r0, #48	; 0x30
 8008e60:	d0f8      	beq.n	8008e54 <__gethex+0x3c>
 8008e62:	f7ff ffc3 	bl	8008dec <__hexdig_fun>
 8008e66:	4604      	mov	r4, r0
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d13a      	bne.n	8008ee2 <__gethex+0xca>
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	4652      	mov	r2, sl
 8008e70:	4638      	mov	r0, r7
 8008e72:	f001 f9ed 	bl	800a250 <strncmp>
 8008e76:	4605      	mov	r5, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d168      	bne.n	8008f4e <__gethex+0x136>
 8008e7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e80:	eb07 060a 	add.w	r6, r7, sl
 8008e84:	f7ff ffb2 	bl	8008dec <__hexdig_fun>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d062      	beq.n	8008f52 <__gethex+0x13a>
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	7818      	ldrb	r0, [r3, #0]
 8008e90:	2830      	cmp	r0, #48	; 0x30
 8008e92:	461f      	mov	r7, r3
 8008e94:	f103 0301 	add.w	r3, r3, #1
 8008e98:	d0f9      	beq.n	8008e8e <__gethex+0x76>
 8008e9a:	f7ff ffa7 	bl	8008dec <__hexdig_fun>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	fab0 f480 	clz	r4, r0
 8008ea4:	0964      	lsrs	r4, r4, #5
 8008ea6:	4635      	mov	r5, r6
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	463a      	mov	r2, r7
 8008eac:	4616      	mov	r6, r2
 8008eae:	3201      	adds	r2, #1
 8008eb0:	7830      	ldrb	r0, [r6, #0]
 8008eb2:	f7ff ff9b 	bl	8008dec <__hexdig_fun>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d1f8      	bne.n	8008eac <__gethex+0x94>
 8008eba:	9901      	ldr	r1, [sp, #4]
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f001 f9c6 	bl	800a250 <strncmp>
 8008ec4:	b980      	cbnz	r0, 8008ee8 <__gethex+0xd0>
 8008ec6:	b94d      	cbnz	r5, 8008edc <__gethex+0xc4>
 8008ec8:	eb06 050a 	add.w	r5, r6, sl
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4616      	mov	r6, r2
 8008ed0:	3201      	adds	r2, #1
 8008ed2:	7830      	ldrb	r0, [r6, #0]
 8008ed4:	f7ff ff8a 	bl	8008dec <__hexdig_fun>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1f8      	bne.n	8008ece <__gethex+0xb6>
 8008edc:	1bad      	subs	r5, r5, r6
 8008ede:	00ad      	lsls	r5, r5, #2
 8008ee0:	e004      	b.n	8008eec <__gethex+0xd4>
 8008ee2:	2400      	movs	r4, #0
 8008ee4:	4625      	mov	r5, r4
 8008ee6:	e7e0      	b.n	8008eaa <__gethex+0x92>
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	d1f7      	bne.n	8008edc <__gethex+0xc4>
 8008eec:	7833      	ldrb	r3, [r6, #0]
 8008eee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ef2:	2b50      	cmp	r3, #80	; 0x50
 8008ef4:	d13b      	bne.n	8008f6e <__gethex+0x156>
 8008ef6:	7873      	ldrb	r3, [r6, #1]
 8008ef8:	2b2b      	cmp	r3, #43	; 0x2b
 8008efa:	d02c      	beq.n	8008f56 <__gethex+0x13e>
 8008efc:	2b2d      	cmp	r3, #45	; 0x2d
 8008efe:	d02e      	beq.n	8008f5e <__gethex+0x146>
 8008f00:	1c71      	adds	r1, r6, #1
 8008f02:	f04f 0900 	mov.w	r9, #0
 8008f06:	7808      	ldrb	r0, [r1, #0]
 8008f08:	f7ff ff70 	bl	8008dec <__hexdig_fun>
 8008f0c:	1e43      	subs	r3, r0, #1
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b18      	cmp	r3, #24
 8008f12:	d82c      	bhi.n	8008f6e <__gethex+0x156>
 8008f14:	f1a0 0210 	sub.w	r2, r0, #16
 8008f18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f1c:	f7ff ff66 	bl	8008dec <__hexdig_fun>
 8008f20:	1e43      	subs	r3, r0, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b18      	cmp	r3, #24
 8008f26:	d91d      	bls.n	8008f64 <__gethex+0x14c>
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d000      	beq.n	8008f30 <__gethex+0x118>
 8008f2e:	4252      	negs	r2, r2
 8008f30:	4415      	add	r5, r2
 8008f32:	f8cb 1000 	str.w	r1, [fp]
 8008f36:	b1e4      	cbz	r4, 8008f72 <__gethex+0x15a>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bf14      	ite	ne
 8008f3e:	2700      	movne	r7, #0
 8008f40:	2706      	moveq	r7, #6
 8008f42:	4638      	mov	r0, r7
 8008f44:	b009      	add	sp, #36	; 0x24
 8008f46:	ecbd 8b02 	vpop	{d8}
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	463e      	mov	r6, r7
 8008f50:	4625      	mov	r5, r4
 8008f52:	2401      	movs	r4, #1
 8008f54:	e7ca      	b.n	8008eec <__gethex+0xd4>
 8008f56:	f04f 0900 	mov.w	r9, #0
 8008f5a:	1cb1      	adds	r1, r6, #2
 8008f5c:	e7d3      	b.n	8008f06 <__gethex+0xee>
 8008f5e:	f04f 0901 	mov.w	r9, #1
 8008f62:	e7fa      	b.n	8008f5a <__gethex+0x142>
 8008f64:	230a      	movs	r3, #10
 8008f66:	fb03 0202 	mla	r2, r3, r2, r0
 8008f6a:	3a10      	subs	r2, #16
 8008f6c:	e7d4      	b.n	8008f18 <__gethex+0x100>
 8008f6e:	4631      	mov	r1, r6
 8008f70:	e7df      	b.n	8008f32 <__gethex+0x11a>
 8008f72:	1bf3      	subs	r3, r6, r7
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4621      	mov	r1, r4
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	dc0b      	bgt.n	8008f94 <__gethex+0x17c>
 8008f7c:	ee18 0a10 	vmov	r0, s16
 8008f80:	f000 fa7e 	bl	8009480 <_Balloc>
 8008f84:	4604      	mov	r4, r0
 8008f86:	b940      	cbnz	r0, 8008f9a <__gethex+0x182>
 8008f88:	4b65      	ldr	r3, [pc, #404]	; (8009120 <__gethex+0x308>)
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	21de      	movs	r1, #222	; 0xde
 8008f8e:	4865      	ldr	r0, [pc, #404]	; (8009124 <__gethex+0x30c>)
 8008f90:	f001 f97e 	bl	800a290 <__assert_func>
 8008f94:	3101      	adds	r1, #1
 8008f96:	105b      	asrs	r3, r3, #1
 8008f98:	e7ee      	b.n	8008f78 <__gethex+0x160>
 8008f9a:	f100 0914 	add.w	r9, r0, #20
 8008f9e:	f04f 0b00 	mov.w	fp, #0
 8008fa2:	f1ca 0301 	rsb	r3, sl, #1
 8008fa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008faa:	f8cd b000 	str.w	fp, [sp]
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	42b7      	cmp	r7, r6
 8008fb2:	d340      	bcc.n	8009036 <__gethex+0x21e>
 8008fb4:	9802      	ldr	r0, [sp, #8]
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	f840 3b04 	str.w	r3, [r0], #4
 8008fbc:	eba0 0009 	sub.w	r0, r0, r9
 8008fc0:	1080      	asrs	r0, r0, #2
 8008fc2:	0146      	lsls	r6, r0, #5
 8008fc4:	6120      	str	r0, [r4, #16]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fb50 	bl	800966c <__hi0bits>
 8008fcc:	1a30      	subs	r0, r6, r0
 8008fce:	f8d8 6000 	ldr.w	r6, [r8]
 8008fd2:	42b0      	cmp	r0, r6
 8008fd4:	dd63      	ble.n	800909e <__gethex+0x286>
 8008fd6:	1b87      	subs	r7, r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 feea 	bl	8009db4 <__any_on>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	b1a8      	cbz	r0, 8009010 <__gethex+0x1f8>
 8008fe4:	1e7b      	subs	r3, r7, #1
 8008fe6:	1159      	asrs	r1, r3, #5
 8008fe8:	f003 021f 	and.w	r2, r3, #31
 8008fec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ff0:	f04f 0a01 	mov.w	sl, #1
 8008ff4:	fa0a f202 	lsl.w	r2, sl, r2
 8008ff8:	420a      	tst	r2, r1
 8008ffa:	d009      	beq.n	8009010 <__gethex+0x1f8>
 8008ffc:	4553      	cmp	r3, sl
 8008ffe:	dd05      	ble.n	800900c <__gethex+0x1f4>
 8009000:	1eb9      	subs	r1, r7, #2
 8009002:	4620      	mov	r0, r4
 8009004:	f000 fed6 	bl	8009db4 <__any_on>
 8009008:	2800      	cmp	r0, #0
 800900a:	d145      	bne.n	8009098 <__gethex+0x280>
 800900c:	f04f 0a02 	mov.w	sl, #2
 8009010:	4639      	mov	r1, r7
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff fe98 	bl	8008d48 <rshift>
 8009018:	443d      	add	r5, r7
 800901a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800901e:	42ab      	cmp	r3, r5
 8009020:	da4c      	bge.n	80090bc <__gethex+0x2a4>
 8009022:	ee18 0a10 	vmov	r0, s16
 8009026:	4621      	mov	r1, r4
 8009028:	f000 fa6a 	bl	8009500 <_Bfree>
 800902c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800902e:	2300      	movs	r3, #0
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	27a3      	movs	r7, #163	; 0xa3
 8009034:	e785      	b.n	8008f42 <__gethex+0x12a>
 8009036:	1e73      	subs	r3, r6, #1
 8009038:	9a05      	ldr	r2, [sp, #20]
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009040:	4293      	cmp	r3, r2
 8009042:	d019      	beq.n	8009078 <__gethex+0x260>
 8009044:	f1bb 0f20 	cmp.w	fp, #32
 8009048:	d107      	bne.n	800905a <__gethex+0x242>
 800904a:	9b02      	ldr	r3, [sp, #8]
 800904c:	9a00      	ldr	r2, [sp, #0]
 800904e:	f843 2b04 	str.w	r2, [r3], #4
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	469b      	mov	fp, r3
 800905a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800905e:	f7ff fec5 	bl	8008dec <__hexdig_fun>
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	f000 000f 	and.w	r0, r0, #15
 8009068:	fa00 f00b 	lsl.w	r0, r0, fp
 800906c:	4303      	orrs	r3, r0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	f10b 0b04 	add.w	fp, fp, #4
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	e00d      	b.n	8009094 <__gethex+0x27c>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	9a06      	ldr	r2, [sp, #24]
 800907c:	4413      	add	r3, r2
 800907e:	42bb      	cmp	r3, r7
 8009080:	d3e0      	bcc.n	8009044 <__gethex+0x22c>
 8009082:	4618      	mov	r0, r3
 8009084:	9901      	ldr	r1, [sp, #4]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	4652      	mov	r2, sl
 800908a:	f001 f8e1 	bl	800a250 <strncmp>
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	2800      	cmp	r0, #0
 8009092:	d1d7      	bne.n	8009044 <__gethex+0x22c>
 8009094:	461e      	mov	r6, r3
 8009096:	e78b      	b.n	8008fb0 <__gethex+0x198>
 8009098:	f04f 0a03 	mov.w	sl, #3
 800909c:	e7b8      	b.n	8009010 <__gethex+0x1f8>
 800909e:	da0a      	bge.n	80090b6 <__gethex+0x29e>
 80090a0:	1a37      	subs	r7, r6, r0
 80090a2:	4621      	mov	r1, r4
 80090a4:	ee18 0a10 	vmov	r0, s16
 80090a8:	463a      	mov	r2, r7
 80090aa:	f000 fc45 	bl	8009938 <__lshift>
 80090ae:	1bed      	subs	r5, r5, r7
 80090b0:	4604      	mov	r4, r0
 80090b2:	f100 0914 	add.w	r9, r0, #20
 80090b6:	f04f 0a00 	mov.w	sl, #0
 80090ba:	e7ae      	b.n	800901a <__gethex+0x202>
 80090bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80090c0:	42a8      	cmp	r0, r5
 80090c2:	dd72      	ble.n	80091aa <__gethex+0x392>
 80090c4:	1b45      	subs	r5, r0, r5
 80090c6:	42ae      	cmp	r6, r5
 80090c8:	dc36      	bgt.n	8009138 <__gethex+0x320>
 80090ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d02a      	beq.n	8009128 <__gethex+0x310>
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d02c      	beq.n	8009130 <__gethex+0x318>
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d115      	bne.n	8009106 <__gethex+0x2ee>
 80090da:	42ae      	cmp	r6, r5
 80090dc:	d113      	bne.n	8009106 <__gethex+0x2ee>
 80090de:	2e01      	cmp	r6, #1
 80090e0:	d10b      	bne.n	80090fa <__gethex+0x2e2>
 80090e2:	9a04      	ldr	r2, [sp, #16]
 80090e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	2301      	movs	r3, #1
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	f8c9 3000 	str.w	r3, [r9]
 80090f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f4:	2762      	movs	r7, #98	; 0x62
 80090f6:	601c      	str	r4, [r3, #0]
 80090f8:	e723      	b.n	8008f42 <__gethex+0x12a>
 80090fa:	1e71      	subs	r1, r6, #1
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fe59 	bl	8009db4 <__any_on>
 8009102:	2800      	cmp	r0, #0
 8009104:	d1ed      	bne.n	80090e2 <__gethex+0x2ca>
 8009106:	ee18 0a10 	vmov	r0, s16
 800910a:	4621      	mov	r1, r4
 800910c:	f000 f9f8 	bl	8009500 <_Bfree>
 8009110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009112:	2300      	movs	r3, #0
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	2750      	movs	r7, #80	; 0x50
 8009118:	e713      	b.n	8008f42 <__gethex+0x12a>
 800911a:	bf00      	nop
 800911c:	0800b0c0 	.word	0x0800b0c0
 8009120:	0800b044 	.word	0x0800b044
 8009124:	0800b055 	.word	0x0800b055
 8009128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1eb      	bne.n	8009106 <__gethex+0x2ee>
 800912e:	e7d8      	b.n	80090e2 <__gethex+0x2ca>
 8009130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1d5      	bne.n	80090e2 <__gethex+0x2ca>
 8009136:	e7e6      	b.n	8009106 <__gethex+0x2ee>
 8009138:	1e6f      	subs	r7, r5, #1
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	d131      	bne.n	80091a4 <__gethex+0x38c>
 8009140:	b127      	cbz	r7, 800914c <__gethex+0x334>
 8009142:	4639      	mov	r1, r7
 8009144:	4620      	mov	r0, r4
 8009146:	f000 fe35 	bl	8009db4 <__any_on>
 800914a:	4682      	mov	sl, r0
 800914c:	117b      	asrs	r3, r7, #5
 800914e:	2101      	movs	r1, #1
 8009150:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009154:	f007 071f 	and.w	r7, r7, #31
 8009158:	fa01 f707 	lsl.w	r7, r1, r7
 800915c:	421f      	tst	r7, r3
 800915e:	4629      	mov	r1, r5
 8009160:	4620      	mov	r0, r4
 8009162:	bf18      	it	ne
 8009164:	f04a 0a02 	orrne.w	sl, sl, #2
 8009168:	1b76      	subs	r6, r6, r5
 800916a:	f7ff fded 	bl	8008d48 <rshift>
 800916e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009172:	2702      	movs	r7, #2
 8009174:	f1ba 0f00 	cmp.w	sl, #0
 8009178:	d048      	beq.n	800920c <__gethex+0x3f4>
 800917a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d015      	beq.n	80091ae <__gethex+0x396>
 8009182:	2b03      	cmp	r3, #3
 8009184:	d017      	beq.n	80091b6 <__gethex+0x39e>
 8009186:	2b01      	cmp	r3, #1
 8009188:	d109      	bne.n	800919e <__gethex+0x386>
 800918a:	f01a 0f02 	tst.w	sl, #2
 800918e:	d006      	beq.n	800919e <__gethex+0x386>
 8009190:	f8d9 0000 	ldr.w	r0, [r9]
 8009194:	ea4a 0a00 	orr.w	sl, sl, r0
 8009198:	f01a 0f01 	tst.w	sl, #1
 800919c:	d10e      	bne.n	80091bc <__gethex+0x3a4>
 800919e:	f047 0710 	orr.w	r7, r7, #16
 80091a2:	e033      	b.n	800920c <__gethex+0x3f4>
 80091a4:	f04f 0a01 	mov.w	sl, #1
 80091a8:	e7d0      	b.n	800914c <__gethex+0x334>
 80091aa:	2701      	movs	r7, #1
 80091ac:	e7e2      	b.n	8009174 <__gethex+0x35c>
 80091ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b0:	f1c3 0301 	rsb	r3, r3, #1
 80091b4:	9315      	str	r3, [sp, #84]	; 0x54
 80091b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0f0      	beq.n	800919e <__gethex+0x386>
 80091bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091c0:	f104 0314 	add.w	r3, r4, #20
 80091c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091cc:	f04f 0c00 	mov.w	ip, #0
 80091d0:	4618      	mov	r0, r3
 80091d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80091da:	d01c      	beq.n	8009216 <__gethex+0x3fe>
 80091dc:	3201      	adds	r2, #1
 80091de:	6002      	str	r2, [r0, #0]
 80091e0:	2f02      	cmp	r7, #2
 80091e2:	f104 0314 	add.w	r3, r4, #20
 80091e6:	d13f      	bne.n	8009268 <__gethex+0x450>
 80091e8:	f8d8 2000 	ldr.w	r2, [r8]
 80091ec:	3a01      	subs	r2, #1
 80091ee:	42b2      	cmp	r2, r6
 80091f0:	d10a      	bne.n	8009208 <__gethex+0x3f0>
 80091f2:	1171      	asrs	r1, r6, #5
 80091f4:	2201      	movs	r2, #1
 80091f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091fa:	f006 061f 	and.w	r6, r6, #31
 80091fe:	fa02 f606 	lsl.w	r6, r2, r6
 8009202:	421e      	tst	r6, r3
 8009204:	bf18      	it	ne
 8009206:	4617      	movne	r7, r2
 8009208:	f047 0720 	orr.w	r7, r7, #32
 800920c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800920e:	601c      	str	r4, [r3, #0]
 8009210:	9b04      	ldr	r3, [sp, #16]
 8009212:	601d      	str	r5, [r3, #0]
 8009214:	e695      	b.n	8008f42 <__gethex+0x12a>
 8009216:	4299      	cmp	r1, r3
 8009218:	f843 cc04 	str.w	ip, [r3, #-4]
 800921c:	d8d8      	bhi.n	80091d0 <__gethex+0x3b8>
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	459b      	cmp	fp, r3
 8009222:	db19      	blt.n	8009258 <__gethex+0x440>
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	ee18 0a10 	vmov	r0, s16
 800922a:	3101      	adds	r1, #1
 800922c:	f000 f928 	bl	8009480 <_Balloc>
 8009230:	4681      	mov	r9, r0
 8009232:	b918      	cbnz	r0, 800923c <__gethex+0x424>
 8009234:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <__gethex+0x488>)
 8009236:	4602      	mov	r2, r0
 8009238:	2184      	movs	r1, #132	; 0x84
 800923a:	e6a8      	b.n	8008f8e <__gethex+0x176>
 800923c:	6922      	ldr	r2, [r4, #16]
 800923e:	3202      	adds	r2, #2
 8009240:	f104 010c 	add.w	r1, r4, #12
 8009244:	0092      	lsls	r2, r2, #2
 8009246:	300c      	adds	r0, #12
 8009248:	f000 f90c 	bl	8009464 <memcpy>
 800924c:	4621      	mov	r1, r4
 800924e:	ee18 0a10 	vmov	r0, s16
 8009252:	f000 f955 	bl	8009500 <_Bfree>
 8009256:	464c      	mov	r4, r9
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009260:	6122      	str	r2, [r4, #16]
 8009262:	2201      	movs	r2, #1
 8009264:	615a      	str	r2, [r3, #20]
 8009266:	e7bb      	b.n	80091e0 <__gethex+0x3c8>
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	455a      	cmp	r2, fp
 800926c:	dd0b      	ble.n	8009286 <__gethex+0x46e>
 800926e:	2101      	movs	r1, #1
 8009270:	4620      	mov	r0, r4
 8009272:	f7ff fd69 	bl	8008d48 <rshift>
 8009276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800927a:	3501      	adds	r5, #1
 800927c:	42ab      	cmp	r3, r5
 800927e:	f6ff aed0 	blt.w	8009022 <__gethex+0x20a>
 8009282:	2701      	movs	r7, #1
 8009284:	e7c0      	b.n	8009208 <__gethex+0x3f0>
 8009286:	f016 061f 	ands.w	r6, r6, #31
 800928a:	d0fa      	beq.n	8009282 <__gethex+0x46a>
 800928c:	449a      	add	sl, r3
 800928e:	f1c6 0620 	rsb	r6, r6, #32
 8009292:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009296:	f000 f9e9 	bl	800966c <__hi0bits>
 800929a:	42b0      	cmp	r0, r6
 800929c:	dbe7      	blt.n	800926e <__gethex+0x456>
 800929e:	e7f0      	b.n	8009282 <__gethex+0x46a>
 80092a0:	0800b044 	.word	0x0800b044

080092a4 <L_shift>:
 80092a4:	f1c2 0208 	rsb	r2, r2, #8
 80092a8:	0092      	lsls	r2, r2, #2
 80092aa:	b570      	push	{r4, r5, r6, lr}
 80092ac:	f1c2 0620 	rsb	r6, r2, #32
 80092b0:	6843      	ldr	r3, [r0, #4]
 80092b2:	6804      	ldr	r4, [r0, #0]
 80092b4:	fa03 f506 	lsl.w	r5, r3, r6
 80092b8:	432c      	orrs	r4, r5
 80092ba:	40d3      	lsrs	r3, r2
 80092bc:	6004      	str	r4, [r0, #0]
 80092be:	f840 3f04 	str.w	r3, [r0, #4]!
 80092c2:	4288      	cmp	r0, r1
 80092c4:	d3f4      	bcc.n	80092b0 <L_shift+0xc>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}

080092c8 <__match>:
 80092c8:	b530      	push	{r4, r5, lr}
 80092ca:	6803      	ldr	r3, [r0, #0]
 80092cc:	3301      	adds	r3, #1
 80092ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d2:	b914      	cbnz	r4, 80092da <__match+0x12>
 80092d4:	6003      	str	r3, [r0, #0]
 80092d6:	2001      	movs	r0, #1
 80092d8:	bd30      	pop	{r4, r5, pc}
 80092da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092e2:	2d19      	cmp	r5, #25
 80092e4:	bf98      	it	ls
 80092e6:	3220      	addls	r2, #32
 80092e8:	42a2      	cmp	r2, r4
 80092ea:	d0f0      	beq.n	80092ce <__match+0x6>
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7f3      	b.n	80092d8 <__match+0x10>

080092f0 <__hexnan>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	680b      	ldr	r3, [r1, #0]
 80092f6:	6801      	ldr	r1, [r0, #0]
 80092f8:	115e      	asrs	r6, r3, #5
 80092fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092fe:	f013 031f 	ands.w	r3, r3, #31
 8009302:	b087      	sub	sp, #28
 8009304:	bf18      	it	ne
 8009306:	3604      	addne	r6, #4
 8009308:	2500      	movs	r5, #0
 800930a:	1f37      	subs	r7, r6, #4
 800930c:	4682      	mov	sl, r0
 800930e:	4690      	mov	r8, r2
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	f846 5c04 	str.w	r5, [r6, #-4]
 8009316:	46b9      	mov	r9, r7
 8009318:	463c      	mov	r4, r7
 800931a:	9502      	str	r5, [sp, #8]
 800931c:	46ab      	mov	fp, r5
 800931e:	784a      	ldrb	r2, [r1, #1]
 8009320:	1c4b      	adds	r3, r1, #1
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	b342      	cbz	r2, 8009378 <__hexnan+0x88>
 8009326:	4610      	mov	r0, r2
 8009328:	9105      	str	r1, [sp, #20]
 800932a:	9204      	str	r2, [sp, #16]
 800932c:	f7ff fd5e 	bl	8008dec <__hexdig_fun>
 8009330:	2800      	cmp	r0, #0
 8009332:	d14f      	bne.n	80093d4 <__hexnan+0xe4>
 8009334:	9a04      	ldr	r2, [sp, #16]
 8009336:	9905      	ldr	r1, [sp, #20]
 8009338:	2a20      	cmp	r2, #32
 800933a:	d818      	bhi.n	800936e <__hexnan+0x7e>
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	459b      	cmp	fp, r3
 8009340:	dd13      	ble.n	800936a <__hexnan+0x7a>
 8009342:	454c      	cmp	r4, r9
 8009344:	d206      	bcs.n	8009354 <__hexnan+0x64>
 8009346:	2d07      	cmp	r5, #7
 8009348:	dc04      	bgt.n	8009354 <__hexnan+0x64>
 800934a:	462a      	mov	r2, r5
 800934c:	4649      	mov	r1, r9
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff ffa8 	bl	80092a4 <L_shift>
 8009354:	4544      	cmp	r4, r8
 8009356:	d950      	bls.n	80093fa <__hexnan+0x10a>
 8009358:	2300      	movs	r3, #0
 800935a:	f1a4 0904 	sub.w	r9, r4, #4
 800935e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009362:	f8cd b008 	str.w	fp, [sp, #8]
 8009366:	464c      	mov	r4, r9
 8009368:	461d      	mov	r5, r3
 800936a:	9903      	ldr	r1, [sp, #12]
 800936c:	e7d7      	b.n	800931e <__hexnan+0x2e>
 800936e:	2a29      	cmp	r2, #41	; 0x29
 8009370:	d156      	bne.n	8009420 <__hexnan+0x130>
 8009372:	3102      	adds	r1, #2
 8009374:	f8ca 1000 	str.w	r1, [sl]
 8009378:	f1bb 0f00 	cmp.w	fp, #0
 800937c:	d050      	beq.n	8009420 <__hexnan+0x130>
 800937e:	454c      	cmp	r4, r9
 8009380:	d206      	bcs.n	8009390 <__hexnan+0xa0>
 8009382:	2d07      	cmp	r5, #7
 8009384:	dc04      	bgt.n	8009390 <__hexnan+0xa0>
 8009386:	462a      	mov	r2, r5
 8009388:	4649      	mov	r1, r9
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff ff8a 	bl	80092a4 <L_shift>
 8009390:	4544      	cmp	r4, r8
 8009392:	d934      	bls.n	80093fe <__hexnan+0x10e>
 8009394:	f1a8 0204 	sub.w	r2, r8, #4
 8009398:	4623      	mov	r3, r4
 800939a:	f853 1b04 	ldr.w	r1, [r3], #4
 800939e:	f842 1f04 	str.w	r1, [r2, #4]!
 80093a2:	429f      	cmp	r7, r3
 80093a4:	d2f9      	bcs.n	800939a <__hexnan+0xaa>
 80093a6:	1b3b      	subs	r3, r7, r4
 80093a8:	f023 0303 	bic.w	r3, r3, #3
 80093ac:	3304      	adds	r3, #4
 80093ae:	3401      	adds	r4, #1
 80093b0:	3e03      	subs	r6, #3
 80093b2:	42b4      	cmp	r4, r6
 80093b4:	bf88      	it	hi
 80093b6:	2304      	movhi	r3, #4
 80093b8:	4443      	add	r3, r8
 80093ba:	2200      	movs	r2, #0
 80093bc:	f843 2b04 	str.w	r2, [r3], #4
 80093c0:	429f      	cmp	r7, r3
 80093c2:	d2fb      	bcs.n	80093bc <__hexnan+0xcc>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	b91b      	cbnz	r3, 80093d0 <__hexnan+0xe0>
 80093c8:	4547      	cmp	r7, r8
 80093ca:	d127      	bne.n	800941c <__hexnan+0x12c>
 80093cc:	2301      	movs	r3, #1
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	2005      	movs	r0, #5
 80093d2:	e026      	b.n	8009422 <__hexnan+0x132>
 80093d4:	3501      	adds	r5, #1
 80093d6:	2d08      	cmp	r5, #8
 80093d8:	f10b 0b01 	add.w	fp, fp, #1
 80093dc:	dd06      	ble.n	80093ec <__hexnan+0xfc>
 80093de:	4544      	cmp	r4, r8
 80093e0:	d9c3      	bls.n	800936a <__hexnan+0x7a>
 80093e2:	2300      	movs	r3, #0
 80093e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80093e8:	2501      	movs	r5, #1
 80093ea:	3c04      	subs	r4, #4
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	f000 000f 	and.w	r0, r0, #15
 80093f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093f6:	6022      	str	r2, [r4, #0]
 80093f8:	e7b7      	b.n	800936a <__hexnan+0x7a>
 80093fa:	2508      	movs	r5, #8
 80093fc:	e7b5      	b.n	800936a <__hexnan+0x7a>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0df      	beq.n	80093c4 <__hexnan+0xd4>
 8009404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009408:	f1c3 0320 	rsb	r3, r3, #32
 800940c:	fa22 f303 	lsr.w	r3, r2, r3
 8009410:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009414:	401a      	ands	r2, r3
 8009416:	f846 2c04 	str.w	r2, [r6, #-4]
 800941a:	e7d3      	b.n	80093c4 <__hexnan+0xd4>
 800941c:	3f04      	subs	r7, #4
 800941e:	e7d1      	b.n	80093c4 <__hexnan+0xd4>
 8009420:	2004      	movs	r0, #4
 8009422:	b007      	add	sp, #28
 8009424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009428 <_localeconv_r>:
 8009428:	4800      	ldr	r0, [pc, #0]	; (800942c <_localeconv_r+0x4>)
 800942a:	4770      	bx	lr
 800942c:	20000260 	.word	0x20000260

08009430 <malloc>:
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <malloc+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f000 bd3d 	b.w	8009eb4 <_malloc_r>
 800943a:	bf00      	nop
 800943c:	20000108 	.word	0x20000108

08009440 <__ascii_mbtowc>:
 8009440:	b082      	sub	sp, #8
 8009442:	b901      	cbnz	r1, 8009446 <__ascii_mbtowc+0x6>
 8009444:	a901      	add	r1, sp, #4
 8009446:	b142      	cbz	r2, 800945a <__ascii_mbtowc+0x1a>
 8009448:	b14b      	cbz	r3, 800945e <__ascii_mbtowc+0x1e>
 800944a:	7813      	ldrb	r3, [r2, #0]
 800944c:	600b      	str	r3, [r1, #0]
 800944e:	7812      	ldrb	r2, [r2, #0]
 8009450:	1e10      	subs	r0, r2, #0
 8009452:	bf18      	it	ne
 8009454:	2001      	movne	r0, #1
 8009456:	b002      	add	sp, #8
 8009458:	4770      	bx	lr
 800945a:	4610      	mov	r0, r2
 800945c:	e7fb      	b.n	8009456 <__ascii_mbtowc+0x16>
 800945e:	f06f 0001 	mvn.w	r0, #1
 8009462:	e7f8      	b.n	8009456 <__ascii_mbtowc+0x16>

08009464 <memcpy>:
 8009464:	440a      	add	r2, r1
 8009466:	4291      	cmp	r1, r2
 8009468:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800946c:	d100      	bne.n	8009470 <memcpy+0xc>
 800946e:	4770      	bx	lr
 8009470:	b510      	push	{r4, lr}
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800947a:	4291      	cmp	r1, r2
 800947c:	d1f9      	bne.n	8009472 <memcpy+0xe>
 800947e:	bd10      	pop	{r4, pc}

08009480 <_Balloc>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009484:	4604      	mov	r4, r0
 8009486:	460d      	mov	r5, r1
 8009488:	b976      	cbnz	r6, 80094a8 <_Balloc+0x28>
 800948a:	2010      	movs	r0, #16
 800948c:	f7ff ffd0 	bl	8009430 <malloc>
 8009490:	4602      	mov	r2, r0
 8009492:	6260      	str	r0, [r4, #36]	; 0x24
 8009494:	b920      	cbnz	r0, 80094a0 <_Balloc+0x20>
 8009496:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <_Balloc+0x78>)
 8009498:	4818      	ldr	r0, [pc, #96]	; (80094fc <_Balloc+0x7c>)
 800949a:	2166      	movs	r1, #102	; 0x66
 800949c:	f000 fef8 	bl	800a290 <__assert_func>
 80094a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a4:	6006      	str	r6, [r0, #0]
 80094a6:	60c6      	str	r6, [r0, #12]
 80094a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094aa:	68f3      	ldr	r3, [r6, #12]
 80094ac:	b183      	cbz	r3, 80094d0 <_Balloc+0x50>
 80094ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094b6:	b9b8      	cbnz	r0, 80094e8 <_Balloc+0x68>
 80094b8:	2101      	movs	r1, #1
 80094ba:	fa01 f605 	lsl.w	r6, r1, r5
 80094be:	1d72      	adds	r2, r6, #5
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fc97 	bl	8009df6 <_calloc_r>
 80094c8:	b160      	cbz	r0, 80094e4 <_Balloc+0x64>
 80094ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094ce:	e00e      	b.n	80094ee <_Balloc+0x6e>
 80094d0:	2221      	movs	r2, #33	; 0x21
 80094d2:	2104      	movs	r1, #4
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fc8e 	bl	8009df6 <_calloc_r>
 80094da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094dc:	60f0      	str	r0, [r6, #12]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <_Balloc+0x2e>
 80094e4:	2000      	movs	r0, #0
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	6802      	ldr	r2, [r0, #0]
 80094ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094ee:	2300      	movs	r3, #0
 80094f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094f4:	e7f7      	b.n	80094e6 <_Balloc+0x66>
 80094f6:	bf00      	nop
 80094f8:	0800afce 	.word	0x0800afce
 80094fc:	0800b0d4 	.word	0x0800b0d4

08009500 <_Bfree>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009504:	4605      	mov	r5, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b976      	cbnz	r6, 8009528 <_Bfree+0x28>
 800950a:	2010      	movs	r0, #16
 800950c:	f7ff ff90 	bl	8009430 <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	6268      	str	r0, [r5, #36]	; 0x24
 8009514:	b920      	cbnz	r0, 8009520 <_Bfree+0x20>
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <_Bfree+0x3c>)
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <_Bfree+0x40>)
 800951a:	218a      	movs	r1, #138	; 0x8a
 800951c:	f000 feb8 	bl	800a290 <__assert_func>
 8009520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009524:	6006      	str	r6, [r0, #0]
 8009526:	60c6      	str	r6, [r0, #12]
 8009528:	b13c      	cbz	r4, 800953a <_Bfree+0x3a>
 800952a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800952c:	6862      	ldr	r2, [r4, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009534:	6021      	str	r1, [r4, #0]
 8009536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	0800afce 	.word	0x0800afce
 8009540:	0800b0d4 	.word	0x0800b0d4

08009544 <__multadd>:
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	690e      	ldr	r6, [r1, #16]
 800954a:	4607      	mov	r7, r0
 800954c:	4698      	mov	r8, r3
 800954e:	460c      	mov	r4, r1
 8009550:	f101 0014 	add.w	r0, r1, #20
 8009554:	2300      	movs	r3, #0
 8009556:	6805      	ldr	r5, [r0, #0]
 8009558:	b2a9      	uxth	r1, r5
 800955a:	fb02 8101 	mla	r1, r2, r1, r8
 800955e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009562:	0c2d      	lsrs	r5, r5, #16
 8009564:	fb02 c505 	mla	r5, r2, r5, ip
 8009568:	b289      	uxth	r1, r1
 800956a:	3301      	adds	r3, #1
 800956c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009570:	429e      	cmp	r6, r3
 8009572:	f840 1b04 	str.w	r1, [r0], #4
 8009576:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800957a:	dcec      	bgt.n	8009556 <__multadd+0x12>
 800957c:	f1b8 0f00 	cmp.w	r8, #0
 8009580:	d022      	beq.n	80095c8 <__multadd+0x84>
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	42b3      	cmp	r3, r6
 8009586:	dc19      	bgt.n	80095bc <__multadd+0x78>
 8009588:	6861      	ldr	r1, [r4, #4]
 800958a:	4638      	mov	r0, r7
 800958c:	3101      	adds	r1, #1
 800958e:	f7ff ff77 	bl	8009480 <_Balloc>
 8009592:	4605      	mov	r5, r0
 8009594:	b928      	cbnz	r0, 80095a2 <__multadd+0x5e>
 8009596:	4602      	mov	r2, r0
 8009598:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <__multadd+0x8c>)
 800959a:	480e      	ldr	r0, [pc, #56]	; (80095d4 <__multadd+0x90>)
 800959c:	21b5      	movs	r1, #181	; 0xb5
 800959e:	f000 fe77 	bl	800a290 <__assert_func>
 80095a2:	6922      	ldr	r2, [r4, #16]
 80095a4:	3202      	adds	r2, #2
 80095a6:	f104 010c 	add.w	r1, r4, #12
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	300c      	adds	r0, #12
 80095ae:	f7ff ff59 	bl	8009464 <memcpy>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4638      	mov	r0, r7
 80095b6:	f7ff ffa3 	bl	8009500 <_Bfree>
 80095ba:	462c      	mov	r4, r5
 80095bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80095c0:	3601      	adds	r6, #1
 80095c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80095c6:	6126      	str	r6, [r4, #16]
 80095c8:	4620      	mov	r0, r4
 80095ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ce:	bf00      	nop
 80095d0:	0800b044 	.word	0x0800b044
 80095d4:	0800b0d4 	.word	0x0800b0d4

080095d8 <__s2b>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	460c      	mov	r4, r1
 80095de:	4615      	mov	r5, r2
 80095e0:	461f      	mov	r7, r3
 80095e2:	2209      	movs	r2, #9
 80095e4:	3308      	adds	r3, #8
 80095e6:	4606      	mov	r6, r0
 80095e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ec:	2100      	movs	r1, #0
 80095ee:	2201      	movs	r2, #1
 80095f0:	429a      	cmp	r2, r3
 80095f2:	db09      	blt.n	8009608 <__s2b+0x30>
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff ff43 	bl	8009480 <_Balloc>
 80095fa:	b940      	cbnz	r0, 800960e <__s2b+0x36>
 80095fc:	4602      	mov	r2, r0
 80095fe:	4b19      	ldr	r3, [pc, #100]	; (8009664 <__s2b+0x8c>)
 8009600:	4819      	ldr	r0, [pc, #100]	; (8009668 <__s2b+0x90>)
 8009602:	21ce      	movs	r1, #206	; 0xce
 8009604:	f000 fe44 	bl	800a290 <__assert_func>
 8009608:	0052      	lsls	r2, r2, #1
 800960a:	3101      	adds	r1, #1
 800960c:	e7f0      	b.n	80095f0 <__s2b+0x18>
 800960e:	9b08      	ldr	r3, [sp, #32]
 8009610:	6143      	str	r3, [r0, #20]
 8009612:	2d09      	cmp	r5, #9
 8009614:	f04f 0301 	mov.w	r3, #1
 8009618:	6103      	str	r3, [r0, #16]
 800961a:	dd16      	ble.n	800964a <__s2b+0x72>
 800961c:	f104 0909 	add.w	r9, r4, #9
 8009620:	46c8      	mov	r8, r9
 8009622:	442c      	add	r4, r5
 8009624:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009628:	4601      	mov	r1, r0
 800962a:	3b30      	subs	r3, #48	; 0x30
 800962c:	220a      	movs	r2, #10
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ff88 	bl	8009544 <__multadd>
 8009634:	45a0      	cmp	r8, r4
 8009636:	d1f5      	bne.n	8009624 <__s2b+0x4c>
 8009638:	f1a5 0408 	sub.w	r4, r5, #8
 800963c:	444c      	add	r4, r9
 800963e:	1b2d      	subs	r5, r5, r4
 8009640:	1963      	adds	r3, r4, r5
 8009642:	42bb      	cmp	r3, r7
 8009644:	db04      	blt.n	8009650 <__s2b+0x78>
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964a:	340a      	adds	r4, #10
 800964c:	2509      	movs	r5, #9
 800964e:	e7f6      	b.n	800963e <__s2b+0x66>
 8009650:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009654:	4601      	mov	r1, r0
 8009656:	3b30      	subs	r3, #48	; 0x30
 8009658:	220a      	movs	r2, #10
 800965a:	4630      	mov	r0, r6
 800965c:	f7ff ff72 	bl	8009544 <__multadd>
 8009660:	e7ee      	b.n	8009640 <__s2b+0x68>
 8009662:	bf00      	nop
 8009664:	0800b044 	.word	0x0800b044
 8009668:	0800b0d4 	.word	0x0800b0d4

0800966c <__hi0bits>:
 800966c:	0c03      	lsrs	r3, r0, #16
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	b9d3      	cbnz	r3, 80096a8 <__hi0bits+0x3c>
 8009672:	0400      	lsls	r0, r0, #16
 8009674:	2310      	movs	r3, #16
 8009676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800967a:	bf04      	itt	eq
 800967c:	0200      	lsleq	r0, r0, #8
 800967e:	3308      	addeq	r3, #8
 8009680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009684:	bf04      	itt	eq
 8009686:	0100      	lsleq	r0, r0, #4
 8009688:	3304      	addeq	r3, #4
 800968a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800968e:	bf04      	itt	eq
 8009690:	0080      	lsleq	r0, r0, #2
 8009692:	3302      	addeq	r3, #2
 8009694:	2800      	cmp	r0, #0
 8009696:	db05      	blt.n	80096a4 <__hi0bits+0x38>
 8009698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800969c:	f103 0301 	add.w	r3, r3, #1
 80096a0:	bf08      	it	eq
 80096a2:	2320      	moveq	r3, #32
 80096a4:	4618      	mov	r0, r3
 80096a6:	4770      	bx	lr
 80096a8:	2300      	movs	r3, #0
 80096aa:	e7e4      	b.n	8009676 <__hi0bits+0xa>

080096ac <__lo0bits>:
 80096ac:	6803      	ldr	r3, [r0, #0]
 80096ae:	f013 0207 	ands.w	r2, r3, #7
 80096b2:	4601      	mov	r1, r0
 80096b4:	d00b      	beq.n	80096ce <__lo0bits+0x22>
 80096b6:	07da      	lsls	r2, r3, #31
 80096b8:	d424      	bmi.n	8009704 <__lo0bits+0x58>
 80096ba:	0798      	lsls	r0, r3, #30
 80096bc:	bf49      	itett	mi
 80096be:	085b      	lsrmi	r3, r3, #1
 80096c0:	089b      	lsrpl	r3, r3, #2
 80096c2:	2001      	movmi	r0, #1
 80096c4:	600b      	strmi	r3, [r1, #0]
 80096c6:	bf5c      	itt	pl
 80096c8:	600b      	strpl	r3, [r1, #0]
 80096ca:	2002      	movpl	r0, #2
 80096cc:	4770      	bx	lr
 80096ce:	b298      	uxth	r0, r3
 80096d0:	b9b0      	cbnz	r0, 8009700 <__lo0bits+0x54>
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	2010      	movs	r0, #16
 80096d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096da:	bf04      	itt	eq
 80096dc:	0a1b      	lsreq	r3, r3, #8
 80096de:	3008      	addeq	r0, #8
 80096e0:	071a      	lsls	r2, r3, #28
 80096e2:	bf04      	itt	eq
 80096e4:	091b      	lsreq	r3, r3, #4
 80096e6:	3004      	addeq	r0, #4
 80096e8:	079a      	lsls	r2, r3, #30
 80096ea:	bf04      	itt	eq
 80096ec:	089b      	lsreq	r3, r3, #2
 80096ee:	3002      	addeq	r0, #2
 80096f0:	07da      	lsls	r2, r3, #31
 80096f2:	d403      	bmi.n	80096fc <__lo0bits+0x50>
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	f100 0001 	add.w	r0, r0, #1
 80096fa:	d005      	beq.n	8009708 <__lo0bits+0x5c>
 80096fc:	600b      	str	r3, [r1, #0]
 80096fe:	4770      	bx	lr
 8009700:	4610      	mov	r0, r2
 8009702:	e7e8      	b.n	80096d6 <__lo0bits+0x2a>
 8009704:	2000      	movs	r0, #0
 8009706:	4770      	bx	lr
 8009708:	2020      	movs	r0, #32
 800970a:	4770      	bx	lr

0800970c <__i2b>:
 800970c:	b510      	push	{r4, lr}
 800970e:	460c      	mov	r4, r1
 8009710:	2101      	movs	r1, #1
 8009712:	f7ff feb5 	bl	8009480 <_Balloc>
 8009716:	4602      	mov	r2, r0
 8009718:	b928      	cbnz	r0, 8009726 <__i2b+0x1a>
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <__i2b+0x24>)
 800971c:	4805      	ldr	r0, [pc, #20]	; (8009734 <__i2b+0x28>)
 800971e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009722:	f000 fdb5 	bl	800a290 <__assert_func>
 8009726:	2301      	movs	r3, #1
 8009728:	6144      	str	r4, [r0, #20]
 800972a:	6103      	str	r3, [r0, #16]
 800972c:	bd10      	pop	{r4, pc}
 800972e:	bf00      	nop
 8009730:	0800b044 	.word	0x0800b044
 8009734:	0800b0d4 	.word	0x0800b0d4

08009738 <__multiply>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	4614      	mov	r4, r2
 800973e:	690a      	ldr	r2, [r1, #16]
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	bfb8      	it	lt
 8009746:	460b      	movlt	r3, r1
 8009748:	460d      	mov	r5, r1
 800974a:	bfbc      	itt	lt
 800974c:	4625      	movlt	r5, r4
 800974e:	461c      	movlt	r4, r3
 8009750:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009754:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009758:	68ab      	ldr	r3, [r5, #8]
 800975a:	6869      	ldr	r1, [r5, #4]
 800975c:	eb0a 0709 	add.w	r7, sl, r9
 8009760:	42bb      	cmp	r3, r7
 8009762:	b085      	sub	sp, #20
 8009764:	bfb8      	it	lt
 8009766:	3101      	addlt	r1, #1
 8009768:	f7ff fe8a 	bl	8009480 <_Balloc>
 800976c:	b930      	cbnz	r0, 800977c <__multiply+0x44>
 800976e:	4602      	mov	r2, r0
 8009770:	4b42      	ldr	r3, [pc, #264]	; (800987c <__multiply+0x144>)
 8009772:	4843      	ldr	r0, [pc, #268]	; (8009880 <__multiply+0x148>)
 8009774:	f240 115d 	movw	r1, #349	; 0x15d
 8009778:	f000 fd8a 	bl	800a290 <__assert_func>
 800977c:	f100 0614 	add.w	r6, r0, #20
 8009780:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009784:	4633      	mov	r3, r6
 8009786:	2200      	movs	r2, #0
 8009788:	4543      	cmp	r3, r8
 800978a:	d31e      	bcc.n	80097ca <__multiply+0x92>
 800978c:	f105 0c14 	add.w	ip, r5, #20
 8009790:	f104 0314 	add.w	r3, r4, #20
 8009794:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009798:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800979c:	9202      	str	r2, [sp, #8]
 800979e:	ebac 0205 	sub.w	r2, ip, r5
 80097a2:	3a15      	subs	r2, #21
 80097a4:	f022 0203 	bic.w	r2, r2, #3
 80097a8:	3204      	adds	r2, #4
 80097aa:	f105 0115 	add.w	r1, r5, #21
 80097ae:	458c      	cmp	ip, r1
 80097b0:	bf38      	it	cc
 80097b2:	2204      	movcc	r2, #4
 80097b4:	9201      	str	r2, [sp, #4]
 80097b6:	9a02      	ldr	r2, [sp, #8]
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d808      	bhi.n	80097d0 <__multiply+0x98>
 80097be:	2f00      	cmp	r7, #0
 80097c0:	dc55      	bgt.n	800986e <__multiply+0x136>
 80097c2:	6107      	str	r7, [r0, #16]
 80097c4:	b005      	add	sp, #20
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	f843 2b04 	str.w	r2, [r3], #4
 80097ce:	e7db      	b.n	8009788 <__multiply+0x50>
 80097d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80097d4:	f1ba 0f00 	cmp.w	sl, #0
 80097d8:	d020      	beq.n	800981c <__multiply+0xe4>
 80097da:	f105 0e14 	add.w	lr, r5, #20
 80097de:	46b1      	mov	r9, r6
 80097e0:	2200      	movs	r2, #0
 80097e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80097e6:	f8d9 b000 	ldr.w	fp, [r9]
 80097ea:	b2a1      	uxth	r1, r4
 80097ec:	fa1f fb8b 	uxth.w	fp, fp
 80097f0:	fb0a b101 	mla	r1, sl, r1, fp
 80097f4:	4411      	add	r1, r2
 80097f6:	f8d9 2000 	ldr.w	r2, [r9]
 80097fa:	0c24      	lsrs	r4, r4, #16
 80097fc:	0c12      	lsrs	r2, r2, #16
 80097fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8009802:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009806:	b289      	uxth	r1, r1
 8009808:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800980c:	45f4      	cmp	ip, lr
 800980e:	f849 1b04 	str.w	r1, [r9], #4
 8009812:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009816:	d8e4      	bhi.n	80097e2 <__multiply+0xaa>
 8009818:	9901      	ldr	r1, [sp, #4]
 800981a:	5072      	str	r2, [r6, r1]
 800981c:	9a03      	ldr	r2, [sp, #12]
 800981e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009822:	3304      	adds	r3, #4
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	d01f      	beq.n	800986a <__multiply+0x132>
 800982a:	6834      	ldr	r4, [r6, #0]
 800982c:	f105 0114 	add.w	r1, r5, #20
 8009830:	46b6      	mov	lr, r6
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	880a      	ldrh	r2, [r1, #0]
 8009838:	f8be b002 	ldrh.w	fp, [lr, #2]
 800983c:	fb09 b202 	mla	r2, r9, r2, fp
 8009840:	4492      	add	sl, r2
 8009842:	b2a4      	uxth	r4, r4
 8009844:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009848:	f84e 4b04 	str.w	r4, [lr], #4
 800984c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009850:	f8be 2000 	ldrh.w	r2, [lr]
 8009854:	0c24      	lsrs	r4, r4, #16
 8009856:	fb09 2404 	mla	r4, r9, r4, r2
 800985a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800985e:	458c      	cmp	ip, r1
 8009860:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009864:	d8e7      	bhi.n	8009836 <__multiply+0xfe>
 8009866:	9a01      	ldr	r2, [sp, #4]
 8009868:	50b4      	str	r4, [r6, r2]
 800986a:	3604      	adds	r6, #4
 800986c:	e7a3      	b.n	80097b6 <__multiply+0x7e>
 800986e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1a5      	bne.n	80097c2 <__multiply+0x8a>
 8009876:	3f01      	subs	r7, #1
 8009878:	e7a1      	b.n	80097be <__multiply+0x86>
 800987a:	bf00      	nop
 800987c:	0800b044 	.word	0x0800b044
 8009880:	0800b0d4 	.word	0x0800b0d4

08009884 <__pow5mult>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	4615      	mov	r5, r2
 800988a:	f012 0203 	ands.w	r2, r2, #3
 800988e:	4606      	mov	r6, r0
 8009890:	460f      	mov	r7, r1
 8009892:	d007      	beq.n	80098a4 <__pow5mult+0x20>
 8009894:	4c25      	ldr	r4, [pc, #148]	; (800992c <__pow5mult+0xa8>)
 8009896:	3a01      	subs	r2, #1
 8009898:	2300      	movs	r3, #0
 800989a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800989e:	f7ff fe51 	bl	8009544 <__multadd>
 80098a2:	4607      	mov	r7, r0
 80098a4:	10ad      	asrs	r5, r5, #2
 80098a6:	d03d      	beq.n	8009924 <__pow5mult+0xa0>
 80098a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098aa:	b97c      	cbnz	r4, 80098cc <__pow5mult+0x48>
 80098ac:	2010      	movs	r0, #16
 80098ae:	f7ff fdbf 	bl	8009430 <malloc>
 80098b2:	4602      	mov	r2, r0
 80098b4:	6270      	str	r0, [r6, #36]	; 0x24
 80098b6:	b928      	cbnz	r0, 80098c4 <__pow5mult+0x40>
 80098b8:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <__pow5mult+0xac>)
 80098ba:	481e      	ldr	r0, [pc, #120]	; (8009934 <__pow5mult+0xb0>)
 80098bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098c0:	f000 fce6 	bl	800a290 <__assert_func>
 80098c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098c8:	6004      	str	r4, [r0, #0]
 80098ca:	60c4      	str	r4, [r0, #12]
 80098cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098d4:	b94c      	cbnz	r4, 80098ea <__pow5mult+0x66>
 80098d6:	f240 2171 	movw	r1, #625	; 0x271
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff16 	bl	800970c <__i2b>
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098e6:	4604      	mov	r4, r0
 80098e8:	6003      	str	r3, [r0, #0]
 80098ea:	f04f 0900 	mov.w	r9, #0
 80098ee:	07eb      	lsls	r3, r5, #31
 80098f0:	d50a      	bpl.n	8009908 <__pow5mult+0x84>
 80098f2:	4639      	mov	r1, r7
 80098f4:	4622      	mov	r2, r4
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff1e 	bl	8009738 <__multiply>
 80098fc:	4639      	mov	r1, r7
 80098fe:	4680      	mov	r8, r0
 8009900:	4630      	mov	r0, r6
 8009902:	f7ff fdfd 	bl	8009500 <_Bfree>
 8009906:	4647      	mov	r7, r8
 8009908:	106d      	asrs	r5, r5, #1
 800990a:	d00b      	beq.n	8009924 <__pow5mult+0xa0>
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	b938      	cbnz	r0, 8009920 <__pow5mult+0x9c>
 8009910:	4622      	mov	r2, r4
 8009912:	4621      	mov	r1, r4
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff ff0f 	bl	8009738 <__multiply>
 800991a:	6020      	str	r0, [r4, #0]
 800991c:	f8c0 9000 	str.w	r9, [r0]
 8009920:	4604      	mov	r4, r0
 8009922:	e7e4      	b.n	80098ee <__pow5mult+0x6a>
 8009924:	4638      	mov	r0, r7
 8009926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992a:	bf00      	nop
 800992c:	0800b228 	.word	0x0800b228
 8009930:	0800afce 	.word	0x0800afce
 8009934:	0800b0d4 	.word	0x0800b0d4

08009938 <__lshift>:
 8009938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	6849      	ldr	r1, [r1, #4]
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	4607      	mov	r7, r0
 800994a:	4691      	mov	r9, r2
 800994c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009950:	f108 0601 	add.w	r6, r8, #1
 8009954:	42b3      	cmp	r3, r6
 8009956:	db0b      	blt.n	8009970 <__lshift+0x38>
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff fd91 	bl	8009480 <_Balloc>
 800995e:	4605      	mov	r5, r0
 8009960:	b948      	cbnz	r0, 8009976 <__lshift+0x3e>
 8009962:	4602      	mov	r2, r0
 8009964:	4b28      	ldr	r3, [pc, #160]	; (8009a08 <__lshift+0xd0>)
 8009966:	4829      	ldr	r0, [pc, #164]	; (8009a0c <__lshift+0xd4>)
 8009968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800996c:	f000 fc90 	bl	800a290 <__assert_func>
 8009970:	3101      	adds	r1, #1
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	e7ee      	b.n	8009954 <__lshift+0x1c>
 8009976:	2300      	movs	r3, #0
 8009978:	f100 0114 	add.w	r1, r0, #20
 800997c:	f100 0210 	add.w	r2, r0, #16
 8009980:	4618      	mov	r0, r3
 8009982:	4553      	cmp	r3, sl
 8009984:	db33      	blt.n	80099ee <__lshift+0xb6>
 8009986:	6920      	ldr	r0, [r4, #16]
 8009988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800998c:	f104 0314 	add.w	r3, r4, #20
 8009990:	f019 091f 	ands.w	r9, r9, #31
 8009994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800999c:	d02b      	beq.n	80099f6 <__lshift+0xbe>
 800999e:	f1c9 0e20 	rsb	lr, r9, #32
 80099a2:	468a      	mov	sl, r1
 80099a4:	2200      	movs	r2, #0
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	fa00 f009 	lsl.w	r0, r0, r9
 80099ac:	4302      	orrs	r2, r0
 80099ae:	f84a 2b04 	str.w	r2, [sl], #4
 80099b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b6:	459c      	cmp	ip, r3
 80099b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099bc:	d8f3      	bhi.n	80099a6 <__lshift+0x6e>
 80099be:	ebac 0304 	sub.w	r3, ip, r4
 80099c2:	3b15      	subs	r3, #21
 80099c4:	f023 0303 	bic.w	r3, r3, #3
 80099c8:	3304      	adds	r3, #4
 80099ca:	f104 0015 	add.w	r0, r4, #21
 80099ce:	4584      	cmp	ip, r0
 80099d0:	bf38      	it	cc
 80099d2:	2304      	movcc	r3, #4
 80099d4:	50ca      	str	r2, [r1, r3]
 80099d6:	b10a      	cbz	r2, 80099dc <__lshift+0xa4>
 80099d8:	f108 0602 	add.w	r6, r8, #2
 80099dc:	3e01      	subs	r6, #1
 80099de:	4638      	mov	r0, r7
 80099e0:	612e      	str	r6, [r5, #16]
 80099e2:	4621      	mov	r1, r4
 80099e4:	f7ff fd8c 	bl	8009500 <_Bfree>
 80099e8:	4628      	mov	r0, r5
 80099ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80099f2:	3301      	adds	r3, #1
 80099f4:	e7c5      	b.n	8009982 <__lshift+0x4a>
 80099f6:	3904      	subs	r1, #4
 80099f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a00:	459c      	cmp	ip, r3
 8009a02:	d8f9      	bhi.n	80099f8 <__lshift+0xc0>
 8009a04:	e7ea      	b.n	80099dc <__lshift+0xa4>
 8009a06:	bf00      	nop
 8009a08:	0800b044 	.word	0x0800b044
 8009a0c:	0800b0d4 	.word	0x0800b0d4

08009a10 <__mcmp>:
 8009a10:	b530      	push	{r4, r5, lr}
 8009a12:	6902      	ldr	r2, [r0, #16]
 8009a14:	690c      	ldr	r4, [r1, #16]
 8009a16:	1b12      	subs	r2, r2, r4
 8009a18:	d10e      	bne.n	8009a38 <__mcmp+0x28>
 8009a1a:	f100 0314 	add.w	r3, r0, #20
 8009a1e:	3114      	adds	r1, #20
 8009a20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a30:	42a5      	cmp	r5, r4
 8009a32:	d003      	beq.n	8009a3c <__mcmp+0x2c>
 8009a34:	d305      	bcc.n	8009a42 <__mcmp+0x32>
 8009a36:	2201      	movs	r2, #1
 8009a38:	4610      	mov	r0, r2
 8009a3a:	bd30      	pop	{r4, r5, pc}
 8009a3c:	4283      	cmp	r3, r0
 8009a3e:	d3f3      	bcc.n	8009a28 <__mcmp+0x18>
 8009a40:	e7fa      	b.n	8009a38 <__mcmp+0x28>
 8009a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a46:	e7f7      	b.n	8009a38 <__mcmp+0x28>

08009a48 <__mdiff>:
 8009a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	4606      	mov	r6, r0
 8009a50:	4611      	mov	r1, r2
 8009a52:	4620      	mov	r0, r4
 8009a54:	4617      	mov	r7, r2
 8009a56:	f7ff ffdb 	bl	8009a10 <__mcmp>
 8009a5a:	1e05      	subs	r5, r0, #0
 8009a5c:	d110      	bne.n	8009a80 <__mdiff+0x38>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff fd0d 	bl	8009480 <_Balloc>
 8009a66:	b930      	cbnz	r0, 8009a76 <__mdiff+0x2e>
 8009a68:	4b39      	ldr	r3, [pc, #228]	; (8009b50 <__mdiff+0x108>)
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	f240 2132 	movw	r1, #562	; 0x232
 8009a70:	4838      	ldr	r0, [pc, #224]	; (8009b54 <__mdiff+0x10c>)
 8009a72:	f000 fc0d 	bl	800a290 <__assert_func>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a80:	bfa4      	itt	ge
 8009a82:	463b      	movge	r3, r7
 8009a84:	4627      	movge	r7, r4
 8009a86:	4630      	mov	r0, r6
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	bfa6      	itte	ge
 8009a8c:	461c      	movge	r4, r3
 8009a8e:	2500      	movge	r5, #0
 8009a90:	2501      	movlt	r5, #1
 8009a92:	f7ff fcf5 	bl	8009480 <_Balloc>
 8009a96:	b920      	cbnz	r0, 8009aa2 <__mdiff+0x5a>
 8009a98:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <__mdiff+0x108>)
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009aa0:	e7e6      	b.n	8009a70 <__mdiff+0x28>
 8009aa2:	693e      	ldr	r6, [r7, #16]
 8009aa4:	60c5      	str	r5, [r0, #12]
 8009aa6:	6925      	ldr	r5, [r4, #16]
 8009aa8:	f107 0114 	add.w	r1, r7, #20
 8009aac:	f104 0914 	add.w	r9, r4, #20
 8009ab0:	f100 0e14 	add.w	lr, r0, #20
 8009ab4:	f107 0210 	add.w	r2, r7, #16
 8009ab8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009abc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ac0:	46f2      	mov	sl, lr
 8009ac2:	2700      	movs	r7, #0
 8009ac4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009acc:	fa1f f883 	uxth.w	r8, r3
 8009ad0:	fa17 f78b 	uxtah	r7, r7, fp
 8009ad4:	0c1b      	lsrs	r3, r3, #16
 8009ad6:	eba7 0808 	sub.w	r8, r7, r8
 8009ada:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ade:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ae2:	fa1f f888 	uxth.w	r8, r8
 8009ae6:	141f      	asrs	r7, r3, #16
 8009ae8:	454d      	cmp	r5, r9
 8009aea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aee:	f84a 3b04 	str.w	r3, [sl], #4
 8009af2:	d8e7      	bhi.n	8009ac4 <__mdiff+0x7c>
 8009af4:	1b2b      	subs	r3, r5, r4
 8009af6:	3b15      	subs	r3, #21
 8009af8:	f023 0303 	bic.w	r3, r3, #3
 8009afc:	3304      	adds	r3, #4
 8009afe:	3415      	adds	r4, #21
 8009b00:	42a5      	cmp	r5, r4
 8009b02:	bf38      	it	cc
 8009b04:	2304      	movcc	r3, #4
 8009b06:	4419      	add	r1, r3
 8009b08:	4473      	add	r3, lr
 8009b0a:	469e      	mov	lr, r3
 8009b0c:	460d      	mov	r5, r1
 8009b0e:	4565      	cmp	r5, ip
 8009b10:	d30e      	bcc.n	8009b30 <__mdiff+0xe8>
 8009b12:	f10c 0203 	add.w	r2, ip, #3
 8009b16:	1a52      	subs	r2, r2, r1
 8009b18:	f022 0203 	bic.w	r2, r2, #3
 8009b1c:	3903      	subs	r1, #3
 8009b1e:	458c      	cmp	ip, r1
 8009b20:	bf38      	it	cc
 8009b22:	2200      	movcc	r2, #0
 8009b24:	441a      	add	r2, r3
 8009b26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b2a:	b17b      	cbz	r3, 8009b4c <__mdiff+0x104>
 8009b2c:	6106      	str	r6, [r0, #16]
 8009b2e:	e7a5      	b.n	8009a7c <__mdiff+0x34>
 8009b30:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b34:	fa17 f488 	uxtah	r4, r7, r8
 8009b38:	1422      	asrs	r2, r4, #16
 8009b3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009b3e:	b2a4      	uxth	r4, r4
 8009b40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b44:	f84e 4b04 	str.w	r4, [lr], #4
 8009b48:	1417      	asrs	r7, r2, #16
 8009b4a:	e7e0      	b.n	8009b0e <__mdiff+0xc6>
 8009b4c:	3e01      	subs	r6, #1
 8009b4e:	e7ea      	b.n	8009b26 <__mdiff+0xde>
 8009b50:	0800b044 	.word	0x0800b044
 8009b54:	0800b0d4 	.word	0x0800b0d4

08009b58 <__ulp>:
 8009b58:	b082      	sub	sp, #8
 8009b5a:	ed8d 0b00 	vstr	d0, [sp]
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	4912      	ldr	r1, [pc, #72]	; (8009bac <__ulp+0x54>)
 8009b62:	4019      	ands	r1, r3
 8009b64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	dd05      	ble.n	8009b78 <__ulp+0x20>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	ec43 2b10 	vmov	d0, r2, r3
 8009b74:	b002      	add	sp, #8
 8009b76:	4770      	bx	lr
 8009b78:	4249      	negs	r1, r1
 8009b7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	f04f 0300 	mov.w	r3, #0
 8009b8a:	da04      	bge.n	8009b96 <__ulp+0x3e>
 8009b8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b90:	fa41 f300 	asr.w	r3, r1, r0
 8009b94:	e7ec      	b.n	8009b70 <__ulp+0x18>
 8009b96:	f1a0 0114 	sub.w	r1, r0, #20
 8009b9a:	291e      	cmp	r1, #30
 8009b9c:	bfda      	itte	le
 8009b9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009ba2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009ba6:	2101      	movgt	r1, #1
 8009ba8:	460a      	mov	r2, r1
 8009baa:	e7e1      	b.n	8009b70 <__ulp+0x18>
 8009bac:	7ff00000 	.word	0x7ff00000

08009bb0 <__b2d>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	6905      	ldr	r5, [r0, #16]
 8009bb4:	f100 0714 	add.w	r7, r0, #20
 8009bb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009bbc:	1f2e      	subs	r6, r5, #4
 8009bbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7ff fd52 	bl	800966c <__hi0bits>
 8009bc8:	f1c0 0320 	rsb	r3, r0, #32
 8009bcc:	280a      	cmp	r0, #10
 8009bce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c4c <__b2d+0x9c>
 8009bd2:	600b      	str	r3, [r1, #0]
 8009bd4:	dc14      	bgt.n	8009c00 <__b2d+0x50>
 8009bd6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009bda:	fa24 f10e 	lsr.w	r1, r4, lr
 8009bde:	42b7      	cmp	r7, r6
 8009be0:	ea41 030c 	orr.w	r3, r1, ip
 8009be4:	bf34      	ite	cc
 8009be6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bea:	2100      	movcs	r1, #0
 8009bec:	3015      	adds	r0, #21
 8009bee:	fa04 f000 	lsl.w	r0, r4, r0
 8009bf2:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bf6:	ea40 0201 	orr.w	r2, r0, r1
 8009bfa:	ec43 2b10 	vmov	d0, r2, r3
 8009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c00:	42b7      	cmp	r7, r6
 8009c02:	bf3a      	itte	cc
 8009c04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c08:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c0c:	2100      	movcs	r1, #0
 8009c0e:	380b      	subs	r0, #11
 8009c10:	d017      	beq.n	8009c42 <__b2d+0x92>
 8009c12:	f1c0 0c20 	rsb	ip, r0, #32
 8009c16:	fa04 f500 	lsl.w	r5, r4, r0
 8009c1a:	42be      	cmp	r6, r7
 8009c1c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c20:	ea45 0504 	orr.w	r5, r5, r4
 8009c24:	bf8c      	ite	hi
 8009c26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c2a:	2400      	movls	r4, #0
 8009c2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c30:	fa01 f000 	lsl.w	r0, r1, r0
 8009c34:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c3c:	ea40 0204 	orr.w	r2, r0, r4
 8009c40:	e7db      	b.n	8009bfa <__b2d+0x4a>
 8009c42:	ea44 030c 	orr.w	r3, r4, ip
 8009c46:	460a      	mov	r2, r1
 8009c48:	e7d7      	b.n	8009bfa <__b2d+0x4a>
 8009c4a:	bf00      	nop
 8009c4c:	3ff00000 	.word	0x3ff00000

08009c50 <__d2b>:
 8009c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	4689      	mov	r9, r1
 8009c56:	2101      	movs	r1, #1
 8009c58:	ec57 6b10 	vmov	r6, r7, d0
 8009c5c:	4690      	mov	r8, r2
 8009c5e:	f7ff fc0f 	bl	8009480 <_Balloc>
 8009c62:	4604      	mov	r4, r0
 8009c64:	b930      	cbnz	r0, 8009c74 <__d2b+0x24>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <__d2b+0xb0>)
 8009c6a:	4826      	ldr	r0, [pc, #152]	; (8009d04 <__d2b+0xb4>)
 8009c6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c70:	f000 fb0e 	bl	800a290 <__assert_func>
 8009c74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c7c:	bb35      	cbnz	r5, 8009ccc <__d2b+0x7c>
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	d028      	beq.n	8009cd6 <__d2b+0x86>
 8009c84:	4668      	mov	r0, sp
 8009c86:	9600      	str	r6, [sp, #0]
 8009c88:	f7ff fd10 	bl	80096ac <__lo0bits>
 8009c8c:	9900      	ldr	r1, [sp, #0]
 8009c8e:	b300      	cbz	r0, 8009cd2 <__d2b+0x82>
 8009c90:	9a01      	ldr	r2, [sp, #4]
 8009c92:	f1c0 0320 	rsb	r3, r0, #32
 8009c96:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	40c2      	lsrs	r2, r0
 8009c9e:	6163      	str	r3, [r4, #20]
 8009ca0:	9201      	str	r2, [sp, #4]
 8009ca2:	9b01      	ldr	r3, [sp, #4]
 8009ca4:	61a3      	str	r3, [r4, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bf14      	ite	ne
 8009caa:	2202      	movne	r2, #2
 8009cac:	2201      	moveq	r2, #1
 8009cae:	6122      	str	r2, [r4, #16]
 8009cb0:	b1d5      	cbz	r5, 8009ce8 <__d2b+0x98>
 8009cb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cb6:	4405      	add	r5, r0
 8009cb8:	f8c9 5000 	str.w	r5, [r9]
 8009cbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cc0:	f8c8 0000 	str.w	r0, [r8]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	b003      	add	sp, #12
 8009cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cd0:	e7d5      	b.n	8009c7e <__d2b+0x2e>
 8009cd2:	6161      	str	r1, [r4, #20]
 8009cd4:	e7e5      	b.n	8009ca2 <__d2b+0x52>
 8009cd6:	a801      	add	r0, sp, #4
 8009cd8:	f7ff fce8 	bl	80096ac <__lo0bits>
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	6163      	str	r3, [r4, #20]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	6122      	str	r2, [r4, #16]
 8009ce4:	3020      	adds	r0, #32
 8009ce6:	e7e3      	b.n	8009cb0 <__d2b+0x60>
 8009ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cf0:	f8c9 0000 	str.w	r0, [r9]
 8009cf4:	6918      	ldr	r0, [r3, #16]
 8009cf6:	f7ff fcb9 	bl	800966c <__hi0bits>
 8009cfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cfe:	e7df      	b.n	8009cc0 <__d2b+0x70>
 8009d00:	0800b044 	.word	0x0800b044
 8009d04:	0800b0d4 	.word	0x0800b0d4

08009d08 <__ratio>:
 8009d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4688      	mov	r8, r1
 8009d0e:	4669      	mov	r1, sp
 8009d10:	4681      	mov	r9, r0
 8009d12:	f7ff ff4d 	bl	8009bb0 <__b2d>
 8009d16:	a901      	add	r1, sp, #4
 8009d18:	4640      	mov	r0, r8
 8009d1a:	ec55 4b10 	vmov	r4, r5, d0
 8009d1e:	f7ff ff47 	bl	8009bb0 <__b2d>
 8009d22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d2a:	eba3 0c02 	sub.w	ip, r3, r2
 8009d2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d38:	ec51 0b10 	vmov	r0, r1, d0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfd6      	itet	le
 8009d40:	460a      	movle	r2, r1
 8009d42:	462a      	movgt	r2, r5
 8009d44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d48:	468b      	mov	fp, r1
 8009d4a:	462f      	mov	r7, r5
 8009d4c:	bfd4      	ite	le
 8009d4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d56:	4620      	mov	r0, r4
 8009d58:	ee10 2a10 	vmov	r2, s0
 8009d5c:	465b      	mov	r3, fp
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fd7c 	bl	800085c <__aeabi_ddiv>
 8009d64:	ec41 0b10 	vmov	d0, r0, r1
 8009d68:	b003      	add	sp, #12
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d6e <__copybits>:
 8009d6e:	3901      	subs	r1, #1
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	1149      	asrs	r1, r1, #5
 8009d74:	6914      	ldr	r4, [r2, #16]
 8009d76:	3101      	adds	r1, #1
 8009d78:	f102 0314 	add.w	r3, r2, #20
 8009d7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d84:	1f05      	subs	r5, r0, #4
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	d30c      	bcc.n	8009da4 <__copybits+0x36>
 8009d8a:	1aa3      	subs	r3, r4, r2
 8009d8c:	3b11      	subs	r3, #17
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	3211      	adds	r2, #17
 8009d94:	42a2      	cmp	r2, r4
 8009d96:	bf88      	it	hi
 8009d98:	2300      	movhi	r3, #0
 8009d9a:	4418      	add	r0, r3
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4288      	cmp	r0, r1
 8009da0:	d305      	bcc.n	8009dae <__copybits+0x40>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009da8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dac:	e7eb      	b.n	8009d86 <__copybits+0x18>
 8009dae:	f840 3b04 	str.w	r3, [r0], #4
 8009db2:	e7f4      	b.n	8009d9e <__copybits+0x30>

08009db4 <__any_on>:
 8009db4:	f100 0214 	add.w	r2, r0, #20
 8009db8:	6900      	ldr	r0, [r0, #16]
 8009dba:	114b      	asrs	r3, r1, #5
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	db11      	blt.n	8009de6 <__any_on+0x32>
 8009dc2:	dd0a      	ble.n	8009dda <__any_on+0x26>
 8009dc4:	f011 011f 	ands.w	r1, r1, #31
 8009dc8:	d007      	beq.n	8009dda <__any_on+0x26>
 8009dca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009dce:	fa24 f001 	lsr.w	r0, r4, r1
 8009dd2:	fa00 f101 	lsl.w	r1, r0, r1
 8009dd6:	428c      	cmp	r4, r1
 8009dd8:	d10b      	bne.n	8009df2 <__any_on+0x3e>
 8009dda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d803      	bhi.n	8009dea <__any_on+0x36>
 8009de2:	2000      	movs	r0, #0
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	4603      	mov	r3, r0
 8009de8:	e7f7      	b.n	8009dda <__any_on+0x26>
 8009dea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d0f5      	beq.n	8009dde <__any_on+0x2a>
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7f6      	b.n	8009de4 <__any_on+0x30>

08009df6 <_calloc_r>:
 8009df6:	b513      	push	{r0, r1, r4, lr}
 8009df8:	434a      	muls	r2, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	f000 f859 	bl	8009eb4 <_malloc_r>
 8009e02:	4604      	mov	r4, r0
 8009e04:	b118      	cbz	r0, 8009e0e <_calloc_r+0x18>
 8009e06:	9a01      	ldr	r2, [sp, #4]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	f7fc fb93 	bl	8006534 <memset>
 8009e0e:	4620      	mov	r0, r4
 8009e10:	b002      	add	sp, #8
 8009e12:	bd10      	pop	{r4, pc}

08009e14 <_free_r>:
 8009e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d048      	beq.n	8009eac <_free_r+0x98>
 8009e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e1e:	9001      	str	r0, [sp, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f1a1 0404 	sub.w	r4, r1, #4
 8009e26:	bfb8      	it	lt
 8009e28:	18e4      	addlt	r4, r4, r3
 8009e2a:	f000 fa7b 	bl	800a324 <__malloc_lock>
 8009e2e:	4a20      	ldr	r2, [pc, #128]	; (8009eb0 <_free_r+0x9c>)
 8009e30:	9801      	ldr	r0, [sp, #4]
 8009e32:	6813      	ldr	r3, [r2, #0]
 8009e34:	4615      	mov	r5, r2
 8009e36:	b933      	cbnz	r3, 8009e46 <_free_r+0x32>
 8009e38:	6063      	str	r3, [r4, #4]
 8009e3a:	6014      	str	r4, [r2, #0]
 8009e3c:	b003      	add	sp, #12
 8009e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e42:	f000 ba75 	b.w	800a330 <__malloc_unlock>
 8009e46:	42a3      	cmp	r3, r4
 8009e48:	d90b      	bls.n	8009e62 <_free_r+0x4e>
 8009e4a:	6821      	ldr	r1, [r4, #0]
 8009e4c:	1862      	adds	r2, r4, r1
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	bf04      	itt	eq
 8009e52:	681a      	ldreq	r2, [r3, #0]
 8009e54:	685b      	ldreq	r3, [r3, #4]
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	bf04      	itt	eq
 8009e5a:	1852      	addeq	r2, r2, r1
 8009e5c:	6022      	streq	r2, [r4, #0]
 8009e5e:	602c      	str	r4, [r5, #0]
 8009e60:	e7ec      	b.n	8009e3c <_free_r+0x28>
 8009e62:	461a      	mov	r2, r3
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b10b      	cbz	r3, 8009e6c <_free_r+0x58>
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d9fa      	bls.n	8009e62 <_free_r+0x4e>
 8009e6c:	6811      	ldr	r1, [r2, #0]
 8009e6e:	1855      	adds	r5, r2, r1
 8009e70:	42a5      	cmp	r5, r4
 8009e72:	d10b      	bne.n	8009e8c <_free_r+0x78>
 8009e74:	6824      	ldr	r4, [r4, #0]
 8009e76:	4421      	add	r1, r4
 8009e78:	1854      	adds	r4, r2, r1
 8009e7a:	42a3      	cmp	r3, r4
 8009e7c:	6011      	str	r1, [r2, #0]
 8009e7e:	d1dd      	bne.n	8009e3c <_free_r+0x28>
 8009e80:	681c      	ldr	r4, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	6053      	str	r3, [r2, #4]
 8009e86:	4421      	add	r1, r4
 8009e88:	6011      	str	r1, [r2, #0]
 8009e8a:	e7d7      	b.n	8009e3c <_free_r+0x28>
 8009e8c:	d902      	bls.n	8009e94 <_free_r+0x80>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	e7d3      	b.n	8009e3c <_free_r+0x28>
 8009e94:	6825      	ldr	r5, [r4, #0]
 8009e96:	1961      	adds	r1, r4, r5
 8009e98:	428b      	cmp	r3, r1
 8009e9a:	bf04      	itt	eq
 8009e9c:	6819      	ldreq	r1, [r3, #0]
 8009e9e:	685b      	ldreq	r3, [r3, #4]
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	bf04      	itt	eq
 8009ea4:	1949      	addeq	r1, r1, r5
 8009ea6:	6021      	streq	r1, [r4, #0]
 8009ea8:	6054      	str	r4, [r2, #4]
 8009eaa:	e7c7      	b.n	8009e3c <_free_r+0x28>
 8009eac:	b003      	add	sp, #12
 8009eae:	bd30      	pop	{r4, r5, pc}
 8009eb0:	20000300 	.word	0x20000300

08009eb4 <_malloc_r>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	1ccd      	adds	r5, r1, #3
 8009eb8:	f025 0503 	bic.w	r5, r5, #3
 8009ebc:	3508      	adds	r5, #8
 8009ebe:	2d0c      	cmp	r5, #12
 8009ec0:	bf38      	it	cc
 8009ec2:	250c      	movcc	r5, #12
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	db01      	blt.n	8009ece <_malloc_r+0x1a>
 8009eca:	42a9      	cmp	r1, r5
 8009ecc:	d903      	bls.n	8009ed6 <_malloc_r+0x22>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	6033      	str	r3, [r6, #0]
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed6:	f000 fa25 	bl	800a324 <__malloc_lock>
 8009eda:	4921      	ldr	r1, [pc, #132]	; (8009f60 <_malloc_r+0xac>)
 8009edc:	680a      	ldr	r2, [r1, #0]
 8009ede:	4614      	mov	r4, r2
 8009ee0:	b99c      	cbnz	r4, 8009f0a <_malloc_r+0x56>
 8009ee2:	4f20      	ldr	r7, [pc, #128]	; (8009f64 <_malloc_r+0xb0>)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	b923      	cbnz	r3, 8009ef2 <_malloc_r+0x3e>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f9a0 	bl	800a230 <_sbrk_r>
 8009ef0:	6038      	str	r0, [r7, #0]
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f000 f99b 	bl	800a230 <_sbrk_r>
 8009efa:	1c43      	adds	r3, r0, #1
 8009efc:	d123      	bne.n	8009f46 <_malloc_r+0x92>
 8009efe:	230c      	movs	r3, #12
 8009f00:	6033      	str	r3, [r6, #0]
 8009f02:	4630      	mov	r0, r6
 8009f04:	f000 fa14 	bl	800a330 <__malloc_unlock>
 8009f08:	e7e3      	b.n	8009ed2 <_malloc_r+0x1e>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	1b5b      	subs	r3, r3, r5
 8009f0e:	d417      	bmi.n	8009f40 <_malloc_r+0x8c>
 8009f10:	2b0b      	cmp	r3, #11
 8009f12:	d903      	bls.n	8009f1c <_malloc_r+0x68>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	441c      	add	r4, r3
 8009f18:	6025      	str	r5, [r4, #0]
 8009f1a:	e004      	b.n	8009f26 <_malloc_r+0x72>
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	42a2      	cmp	r2, r4
 8009f20:	bf0c      	ite	eq
 8009f22:	600b      	streq	r3, [r1, #0]
 8009f24:	6053      	strne	r3, [r2, #4]
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 fa02 	bl	800a330 <__malloc_unlock>
 8009f2c:	f104 000b 	add.w	r0, r4, #11
 8009f30:	1d23      	adds	r3, r4, #4
 8009f32:	f020 0007 	bic.w	r0, r0, #7
 8009f36:	1ac2      	subs	r2, r0, r3
 8009f38:	d0cc      	beq.n	8009ed4 <_malloc_r+0x20>
 8009f3a:	1a1b      	subs	r3, r3, r0
 8009f3c:	50a3      	str	r3, [r4, r2]
 8009f3e:	e7c9      	b.n	8009ed4 <_malloc_r+0x20>
 8009f40:	4622      	mov	r2, r4
 8009f42:	6864      	ldr	r4, [r4, #4]
 8009f44:	e7cc      	b.n	8009ee0 <_malloc_r+0x2c>
 8009f46:	1cc4      	adds	r4, r0, #3
 8009f48:	f024 0403 	bic.w	r4, r4, #3
 8009f4c:	42a0      	cmp	r0, r4
 8009f4e:	d0e3      	beq.n	8009f18 <_malloc_r+0x64>
 8009f50:	1a21      	subs	r1, r4, r0
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 f96c 	bl	800a230 <_sbrk_r>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d1dd      	bne.n	8009f18 <_malloc_r+0x64>
 8009f5c:	e7cf      	b.n	8009efe <_malloc_r+0x4a>
 8009f5e:	bf00      	nop
 8009f60:	20000300 	.word	0x20000300
 8009f64:	20000304 	.word	0x20000304

08009f68 <__ssputs_r>:
 8009f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	688e      	ldr	r6, [r1, #8]
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	4682      	mov	sl, r0
 8009f72:	460c      	mov	r4, r1
 8009f74:	4690      	mov	r8, r2
 8009f76:	461f      	mov	r7, r3
 8009f78:	d838      	bhi.n	8009fec <__ssputs_r+0x84>
 8009f7a:	898a      	ldrh	r2, [r1, #12]
 8009f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f80:	d032      	beq.n	8009fe8 <__ssputs_r+0x80>
 8009f82:	6825      	ldr	r5, [r4, #0]
 8009f84:	6909      	ldr	r1, [r1, #16]
 8009f86:	eba5 0901 	sub.w	r9, r5, r1
 8009f8a:	6965      	ldr	r5, [r4, #20]
 8009f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f94:	3301      	adds	r3, #1
 8009f96:	444b      	add	r3, r9
 8009f98:	106d      	asrs	r5, r5, #1
 8009f9a:	429d      	cmp	r5, r3
 8009f9c:	bf38      	it	cc
 8009f9e:	461d      	movcc	r5, r3
 8009fa0:	0553      	lsls	r3, r2, #21
 8009fa2:	d531      	bpl.n	800a008 <__ssputs_r+0xa0>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7ff ff85 	bl	8009eb4 <_malloc_r>
 8009faa:	4606      	mov	r6, r0
 8009fac:	b950      	cbnz	r0, 8009fc4 <__ssputs_r+0x5c>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	f8ca 3000 	str.w	r3, [sl]
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc4:	6921      	ldr	r1, [r4, #16]
 8009fc6:	464a      	mov	r2, r9
 8009fc8:	f7ff fa4c 	bl	8009464 <memcpy>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	6126      	str	r6, [r4, #16]
 8009fda:	6165      	str	r5, [r4, #20]
 8009fdc:	444e      	add	r6, r9
 8009fde:	eba5 0509 	sub.w	r5, r5, r9
 8009fe2:	6026      	str	r6, [r4, #0]
 8009fe4:	60a5      	str	r5, [r4, #8]
 8009fe6:	463e      	mov	r6, r7
 8009fe8:	42be      	cmp	r6, r7
 8009fea:	d900      	bls.n	8009fee <__ssputs_r+0x86>
 8009fec:	463e      	mov	r6, r7
 8009fee:	4632      	mov	r2, r6
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	f000 f97c 	bl	800a2f0 <memmove>
 8009ff8:	68a3      	ldr	r3, [r4, #8]
 8009ffa:	6822      	ldr	r2, [r4, #0]
 8009ffc:	1b9b      	subs	r3, r3, r6
 8009ffe:	4432      	add	r2, r6
 800a000:	60a3      	str	r3, [r4, #8]
 800a002:	6022      	str	r2, [r4, #0]
 800a004:	2000      	movs	r0, #0
 800a006:	e7db      	b.n	8009fc0 <__ssputs_r+0x58>
 800a008:	462a      	mov	r2, r5
 800a00a:	f000 f997 	bl	800a33c <_realloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d1e1      	bne.n	8009fd8 <__ssputs_r+0x70>
 800a014:	6921      	ldr	r1, [r4, #16]
 800a016:	4650      	mov	r0, sl
 800a018:	f7ff fefc 	bl	8009e14 <_free_r>
 800a01c:	e7c7      	b.n	8009fae <__ssputs_r+0x46>
	...

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	4607      	mov	r7, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4614      	mov	r4, r2
 800a032:	d50e      	bpl.n	800a052 <_svfiprintf_r+0x32>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b963      	cbnz	r3, 800a052 <_svfiprintf_r+0x32>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	f7ff ff3b 	bl	8009eb4 <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b920      	cbnz	r0, 800a04e <_svfiprintf_r+0x2e>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a04c:	e0d1      	b.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	616b      	str	r3, [r5, #20]
 800a052:	2300      	movs	r3, #0
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	2320      	movs	r3, #32
 800a058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a060:	2330      	movs	r3, #48	; 0x30
 800a062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a20c <_svfiprintf_r+0x1ec>
 800a066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	4623      	mov	r3, r4
 800a070:	469a      	mov	sl, r3
 800a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a076:	b10a      	cbz	r2, 800a07c <_svfiprintf_r+0x5c>
 800a078:	2a25      	cmp	r2, #37	; 0x25
 800a07a:	d1f9      	bne.n	800a070 <_svfiprintf_r+0x50>
 800a07c:	ebba 0b04 	subs.w	fp, sl, r4
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x7a>
 800a082:	465b      	mov	r3, fp
 800a084:	4622      	mov	r2, r4
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ff6d 	bl	8009f68 <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80aa 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a096:	445a      	add	r2, fp
 800a098:	9209      	str	r2, [sp, #36]	; 0x24
 800a09a:	f89a 3000 	ldrb.w	r3, [sl]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a2 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	4851      	ldr	r0, [pc, #324]	; (800a20c <_svfiprintf_r+0x1ec>)
 800a0c6:	f7f6 f893 	bl	80001f0 <memchr>
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_svfiprintf_r+0xe6>
 800a0ce:	06d0      	lsls	r0, r2, #27
 800a0d0:	bf44      	itt	mi
 800a0d2:	2320      	movmi	r3, #32
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	bf44      	itt	mi
 800a0dc:	232b      	movmi	r3, #43	; 0x2b
 800a0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d015      	beq.n	800a116 <_svfiprintf_r+0xf6>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d94e      	bls.n	800a19e <_svfiprintf_r+0x17e>
 800a100:	b1b0      	cbz	r0, 800a130 <_svfiprintf_r+0x110>
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	e014      	b.n	800a130 <_svfiprintf_r+0x110>
 800a106:	eba0 0308 	sub.w	r3, r0, r8
 800a10a:	fa09 f303 	lsl.w	r3, r9, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	46a2      	mov	sl, r4
 800a114:	e7d2      	b.n	800a0bc <_svfiprintf_r+0x9c>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9103      	str	r1, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfbb      	ittet	lt
 800a122:	425b      	neglt	r3, r3
 800a124:	f042 0202 	orrlt.w	r2, r2, #2
 800a128:	9307      	strge	r3, [sp, #28]
 800a12a:	9307      	strlt	r3, [sp, #28]
 800a12c:	bfb8      	it	lt
 800a12e:	9204      	strlt	r2, [sp, #16]
 800a130:	7823      	ldrb	r3, [r4, #0]
 800a132:	2b2e      	cmp	r3, #46	; 0x2e
 800a134:	d10c      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a136:	7863      	ldrb	r3, [r4, #1]
 800a138:	2b2a      	cmp	r3, #42	; 0x2a
 800a13a:	d135      	bne.n	800a1a8 <_svfiprintf_r+0x188>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	9203      	str	r2, [sp, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb8      	it	lt
 800a148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a14c:	3402      	adds	r4, #2
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a21c <_svfiprintf_r+0x1fc>
 800a154:	7821      	ldrb	r1, [r4, #0]
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	f7f6 f849 	bl	80001f0 <memchr>
 800a15e:	b140      	cbz	r0, 800a172 <_svfiprintf_r+0x152>
 800a160:	2340      	movs	r3, #64	; 0x40
 800a162:	eba0 000a 	sub.w	r0, r0, sl
 800a166:	fa03 f000 	lsl.w	r0, r3, r0
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	4303      	orrs	r3, r0
 800a16e:	3401      	adds	r4, #1
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a176:	4826      	ldr	r0, [pc, #152]	; (800a210 <_svfiprintf_r+0x1f0>)
 800a178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17c:	2206      	movs	r2, #6
 800a17e:	f7f6 f837 	bl	80001f0 <memchr>
 800a182:	2800      	cmp	r0, #0
 800a184:	d038      	beq.n	800a1f8 <_svfiprintf_r+0x1d8>
 800a186:	4b23      	ldr	r3, [pc, #140]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a188:	bb1b      	cbnz	r3, 800a1d2 <_svfiprintf_r+0x1b2>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	3307      	adds	r3, #7
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	3308      	adds	r3, #8
 800a194:	9303      	str	r3, [sp, #12]
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	4433      	add	r3, r6
 800a19a:	9309      	str	r3, [sp, #36]	; 0x24
 800a19c:	e767      	b.n	800a06e <_svfiprintf_r+0x4e>
 800a19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	e7a5      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f04f 0c0a 	mov.w	ip, #10
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ba:	3a30      	subs	r2, #48	; 0x30
 800a1bc:	2a09      	cmp	r2, #9
 800a1be:	d903      	bls.n	800a1c8 <_svfiprintf_r+0x1a8>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0c5      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c4:	9105      	str	r1, [sp, #20]
 800a1c6:	e7c3      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7f0      	b.n	800a1b4 <_svfiprintf_r+0x194>
 800a1d2:	ab03      	add	r3, sp, #12
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a1da:	a904      	add	r1, sp, #16
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7fc fa51 	bl	8006684 <_printf_float>
 800a1e2:	1c42      	adds	r2, r0, #1
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	d1d6      	bne.n	800a196 <_svfiprintf_r+0x176>
 800a1e8:	89ab      	ldrh	r3, [r5, #12]
 800a1ea:	065b      	lsls	r3, r3, #25
 800a1ec:	f53f af2c 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f2:	b01d      	add	sp, #116	; 0x74
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4638      	mov	r0, r7
 800a204:	f7fc fce2 	bl	8006bcc <_printf_i>
 800a208:	e7eb      	b.n	800a1e2 <_svfiprintf_r+0x1c2>
 800a20a:	bf00      	nop
 800a20c:	0800b234 	.word	0x0800b234
 800a210:	0800b23e 	.word	0x0800b23e
 800a214:	08006685 	.word	0x08006685
 800a218:	08009f69 	.word	0x08009f69
 800a21c:	0800b23a 	.word	0x0800b23a

0800a220 <nan>:
 800a220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a228 <nan+0x8>
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	00000000 	.word	0x00000000
 800a22c:	7ff80000 	.word	0x7ff80000

0800a230 <_sbrk_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d06      	ldr	r5, [pc, #24]	; (800a24c <_sbrk_r+0x1c>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f8 fb00 	bl	8002840 <_sbrk>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_sbrk_r+0x1a>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_sbrk_r+0x1a>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20000508 	.word	0x20000508

0800a250 <strncmp>:
 800a250:	b510      	push	{r4, lr}
 800a252:	b16a      	cbz	r2, 800a270 <strncmp+0x20>
 800a254:	3901      	subs	r1, #1
 800a256:	1884      	adds	r4, r0, r2
 800a258:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a25c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a260:	4293      	cmp	r3, r2
 800a262:	d103      	bne.n	800a26c <strncmp+0x1c>
 800a264:	42a0      	cmp	r0, r4
 800a266:	d001      	beq.n	800a26c <strncmp+0x1c>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1f5      	bne.n	800a258 <strncmp+0x8>
 800a26c:	1a98      	subs	r0, r3, r2
 800a26e:	bd10      	pop	{r4, pc}
 800a270:	4610      	mov	r0, r2
 800a272:	e7fc      	b.n	800a26e <strncmp+0x1e>

0800a274 <__ascii_wctomb>:
 800a274:	b149      	cbz	r1, 800a28a <__ascii_wctomb+0x16>
 800a276:	2aff      	cmp	r2, #255	; 0xff
 800a278:	bf85      	ittet	hi
 800a27a:	238a      	movhi	r3, #138	; 0x8a
 800a27c:	6003      	strhi	r3, [r0, #0]
 800a27e:	700a      	strbls	r2, [r1, #0]
 800a280:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a284:	bf98      	it	ls
 800a286:	2001      	movls	r0, #1
 800a288:	4770      	bx	lr
 800a28a:	4608      	mov	r0, r1
 800a28c:	4770      	bx	lr
	...

0800a290 <__assert_func>:
 800a290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a292:	4614      	mov	r4, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <__assert_func+0x2c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4605      	mov	r5, r0
 800a29c:	68d8      	ldr	r0, [r3, #12]
 800a29e:	b14c      	cbz	r4, 800a2b4 <__assert_func+0x24>
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <__assert_func+0x30>)
 800a2a2:	9100      	str	r1, [sp, #0]
 800a2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a8:	4906      	ldr	r1, [pc, #24]	; (800a2c4 <__assert_func+0x34>)
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	f000 f80e 	bl	800a2cc <fiprintf>
 800a2b0:	f000 fa84 	bl	800a7bc <abort>
 800a2b4:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <__assert_func+0x38>)
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	e7f3      	b.n	800a2a2 <__assert_func+0x12>
 800a2ba:	bf00      	nop
 800a2bc:	20000108 	.word	0x20000108
 800a2c0:	0800b245 	.word	0x0800b245
 800a2c4:	0800b252 	.word	0x0800b252
 800a2c8:	0800b280 	.word	0x0800b280

0800a2cc <fiprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	b503      	push	{r0, r1, lr}
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	ab03      	add	r3, sp, #12
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <fiprintf+0x20>)
 800a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	f000 f87d 	bl	800a3dc <_vfiprintf_r>
 800a2e2:	b002      	add	sp, #8
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	20000108 	.word	0x20000108

0800a2f0 <memmove>:
 800a2f0:	4288      	cmp	r0, r1
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	eb01 0402 	add.w	r4, r1, r2
 800a2f8:	d902      	bls.n	800a300 <memmove+0x10>
 800a2fa:	4284      	cmp	r4, r0
 800a2fc:	4623      	mov	r3, r4
 800a2fe:	d807      	bhi.n	800a310 <memmove+0x20>
 800a300:	1e43      	subs	r3, r0, #1
 800a302:	42a1      	cmp	r1, r4
 800a304:	d008      	beq.n	800a318 <memmove+0x28>
 800a306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a30e:	e7f8      	b.n	800a302 <memmove+0x12>
 800a310:	4402      	add	r2, r0
 800a312:	4601      	mov	r1, r0
 800a314:	428a      	cmp	r2, r1
 800a316:	d100      	bne.n	800a31a <memmove+0x2a>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a322:	e7f7      	b.n	800a314 <memmove+0x24>

0800a324 <__malloc_lock>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__malloc_lock+0x8>)
 800a326:	f000 bc09 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	20000510 	.word	0x20000510

0800a330 <__malloc_unlock>:
 800a330:	4801      	ldr	r0, [pc, #4]	; (800a338 <__malloc_unlock+0x8>)
 800a332:	f000 bc04 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	20000510 	.word	0x20000510

0800a33c <_realloc_r>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	4607      	mov	r7, r0
 800a340:	4614      	mov	r4, r2
 800a342:	460e      	mov	r6, r1
 800a344:	b921      	cbnz	r1, 800a350 <_realloc_r+0x14>
 800a346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a34a:	4611      	mov	r1, r2
 800a34c:	f7ff bdb2 	b.w	8009eb4 <_malloc_r>
 800a350:	b922      	cbnz	r2, 800a35c <_realloc_r+0x20>
 800a352:	f7ff fd5f 	bl	8009e14 <_free_r>
 800a356:	4625      	mov	r5, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	f000 fc54 	bl	800ac08 <_malloc_usable_size_r>
 800a360:	42a0      	cmp	r0, r4
 800a362:	d20f      	bcs.n	800a384 <_realloc_r+0x48>
 800a364:	4621      	mov	r1, r4
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff fda4 	bl	8009eb4 <_malloc_r>
 800a36c:	4605      	mov	r5, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d0f2      	beq.n	800a358 <_realloc_r+0x1c>
 800a372:	4631      	mov	r1, r6
 800a374:	4622      	mov	r2, r4
 800a376:	f7ff f875 	bl	8009464 <memcpy>
 800a37a:	4631      	mov	r1, r6
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fd49 	bl	8009e14 <_free_r>
 800a382:	e7e9      	b.n	800a358 <_realloc_r+0x1c>
 800a384:	4635      	mov	r5, r6
 800a386:	e7e7      	b.n	800a358 <_realloc_r+0x1c>

0800a388 <__sfputc_r>:
 800a388:	6893      	ldr	r3, [r2, #8]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	b410      	push	{r4}
 800a390:	6093      	str	r3, [r2, #8]
 800a392:	da08      	bge.n	800a3a6 <__sfputc_r+0x1e>
 800a394:	6994      	ldr	r4, [r2, #24]
 800a396:	42a3      	cmp	r3, r4
 800a398:	db01      	blt.n	800a39e <__sfputc_r+0x16>
 800a39a:	290a      	cmp	r1, #10
 800a39c:	d103      	bne.n	800a3a6 <__sfputc_r+0x1e>
 800a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a2:	f000 b94b 	b.w	800a63c <__swbuf_r>
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	1c58      	adds	r0, r3, #1
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	7019      	strb	r1, [r3, #0]
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <__sfputs_r>:
 800a3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	18d5      	adds	r5, r2, r3
 800a3c0:	42ac      	cmp	r4, r5
 800a3c2:	d101      	bne.n	800a3c8 <__sfputs_r+0x12>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e007      	b.n	800a3d8 <__sfputs_r+0x22>
 800a3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ffda 	bl	800a388 <__sfputc_r>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d1f3      	bne.n	800a3c0 <__sfputs_r+0xa>
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3dc <_vfiprintf_r>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	b09d      	sub	sp, #116	; 0x74
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	4698      	mov	r8, r3
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b118      	cbz	r0, 800a3f4 <_vfiprintf_r+0x18>
 800a3ec:	6983      	ldr	r3, [r0, #24]
 800a3ee:	b90b      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x18>
 800a3f0:	f000 fb06 	bl	800aa00 <__sinit>
 800a3f4:	4b89      	ldr	r3, [pc, #548]	; (800a61c <_vfiprintf_r+0x240>)
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	d11b      	bne.n	800a432 <_vfiprintf_r+0x56>
 800a3fa:	6875      	ldr	r5, [r6, #4]
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f000 fb97 	bl	800ab3c <__retarget_lock_acquire_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	071b      	lsls	r3, r3, #28
 800a412:	d501      	bpl.n	800a418 <_vfiprintf_r+0x3c>
 800a414:	692b      	ldr	r3, [r5, #16]
 800a416:	b9eb      	cbnz	r3, 800a454 <_vfiprintf_r+0x78>
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f960 	bl	800a6e0 <__swsetup_r>
 800a420:	b1c0      	cbz	r0, 800a454 <_vfiprintf_r+0x78>
 800a422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a424:	07dc      	lsls	r4, r3, #31
 800a426:	d50e      	bpl.n	800a446 <_vfiprintf_r+0x6a>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a42c:	b01d      	add	sp, #116	; 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	4b7b      	ldr	r3, [pc, #492]	; (800a620 <_vfiprintf_r+0x244>)
 800a434:	429d      	cmp	r5, r3
 800a436:	d101      	bne.n	800a43c <_vfiprintf_r+0x60>
 800a438:	68b5      	ldr	r5, [r6, #8]
 800a43a:	e7df      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a43c:	4b79      	ldr	r3, [pc, #484]	; (800a624 <_vfiprintf_r+0x248>)
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf08      	it	eq
 800a442:	68f5      	ldreq	r5, [r6, #12]
 800a444:	e7da      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	0598      	lsls	r0, r3, #22
 800a44a:	d4ed      	bmi.n	800a428 <_vfiprintf_r+0x4c>
 800a44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44e:	f000 fb76 	bl	800ab3e <__retarget_lock_release_recursive>
 800a452:	e7e9      	b.n	800a428 <_vfiprintf_r+0x4c>
 800a454:	2300      	movs	r3, #0
 800a456:	9309      	str	r3, [sp, #36]	; 0x24
 800a458:	2320      	movs	r3, #32
 800a45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a462:	2330      	movs	r3, #48	; 0x30
 800a464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a628 <_vfiprintf_r+0x24c>
 800a468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	4623      	mov	r3, r4
 800a472:	469a      	mov	sl, r3
 800a474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a478:	b10a      	cbz	r2, 800a47e <_vfiprintf_r+0xa2>
 800a47a:	2a25      	cmp	r2, #37	; 0x25
 800a47c:	d1f9      	bne.n	800a472 <_vfiprintf_r+0x96>
 800a47e:	ebba 0b04 	subs.w	fp, sl, r4
 800a482:	d00b      	beq.n	800a49c <_vfiprintf_r+0xc0>
 800a484:	465b      	mov	r3, fp
 800a486:	4622      	mov	r2, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff93 	bl	800a3b6 <__sfputs_r>
 800a490:	3001      	adds	r0, #1
 800a492:	f000 80aa 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a498:	445a      	add	r2, fp
 800a49a:	9209      	str	r2, [sp, #36]	; 0x24
 800a49c:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 80a2 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b0:	f10a 0a01 	add.w	sl, sl, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4be:	4654      	mov	r4, sl
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c6:	4858      	ldr	r0, [pc, #352]	; (800a628 <_vfiprintf_r+0x24c>)
 800a4c8:	f7f5 fe92 	bl	80001f0 <memchr>
 800a4cc:	9a04      	ldr	r2, [sp, #16]
 800a4ce:	b9d8      	cbnz	r0, 800a508 <_vfiprintf_r+0x12c>
 800a4d0:	06d1      	lsls	r1, r2, #27
 800a4d2:	bf44      	itt	mi
 800a4d4:	2320      	movmi	r3, #32
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	0713      	lsls	r3, r2, #28
 800a4dc:	bf44      	itt	mi
 800a4de:	232b      	movmi	r3, #43	; 0x2b
 800a4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ea:	d015      	beq.n	800a518 <_vfiprintf_r+0x13c>
 800a4ec:	9a07      	ldr	r2, [sp, #28]
 800a4ee:	4654      	mov	r4, sl
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f04f 0c0a 	mov.w	ip, #10
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fc:	3b30      	subs	r3, #48	; 0x30
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d94e      	bls.n	800a5a0 <_vfiprintf_r+0x1c4>
 800a502:	b1b0      	cbz	r0, 800a532 <_vfiprintf_r+0x156>
 800a504:	9207      	str	r2, [sp, #28]
 800a506:	e014      	b.n	800a532 <_vfiprintf_r+0x156>
 800a508:	eba0 0308 	sub.w	r3, r0, r8
 800a50c:	fa09 f303 	lsl.w	r3, r9, r3
 800a510:	4313      	orrs	r3, r2
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	46a2      	mov	sl, r4
 800a516:	e7d2      	b.n	800a4be <_vfiprintf_r+0xe2>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d19      	adds	r1, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9103      	str	r1, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfbb      	ittet	lt
 800a524:	425b      	neglt	r3, r3
 800a526:	f042 0202 	orrlt.w	r2, r2, #2
 800a52a:	9307      	strge	r3, [sp, #28]
 800a52c:	9307      	strlt	r3, [sp, #28]
 800a52e:	bfb8      	it	lt
 800a530:	9204      	strlt	r2, [sp, #16]
 800a532:	7823      	ldrb	r3, [r4, #0]
 800a534:	2b2e      	cmp	r3, #46	; 0x2e
 800a536:	d10c      	bne.n	800a552 <_vfiprintf_r+0x176>
 800a538:	7863      	ldrb	r3, [r4, #1]
 800a53a:	2b2a      	cmp	r3, #42	; 0x2a
 800a53c:	d135      	bne.n	800a5aa <_vfiprintf_r+0x1ce>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d1a      	adds	r2, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9203      	str	r2, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a54e:	3402      	adds	r4, #2
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a638 <_vfiprintf_r+0x25c>
 800a556:	7821      	ldrb	r1, [r4, #0]
 800a558:	2203      	movs	r2, #3
 800a55a:	4650      	mov	r0, sl
 800a55c:	f7f5 fe48 	bl	80001f0 <memchr>
 800a560:	b140      	cbz	r0, 800a574 <_vfiprintf_r+0x198>
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	eba0 000a 	sub.w	r0, r0, sl
 800a568:	fa03 f000 	lsl.w	r0, r3, r0
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	4303      	orrs	r3, r0
 800a570:	3401      	adds	r4, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	482c      	ldr	r0, [pc, #176]	; (800a62c <_vfiprintf_r+0x250>)
 800a57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57e:	2206      	movs	r2, #6
 800a580:	f7f5 fe36 	bl	80001f0 <memchr>
 800a584:	2800      	cmp	r0, #0
 800a586:	d03f      	beq.n	800a608 <_vfiprintf_r+0x22c>
 800a588:	4b29      	ldr	r3, [pc, #164]	; (800a630 <_vfiprintf_r+0x254>)
 800a58a:	bb1b      	cbnz	r3, 800a5d4 <_vfiprintf_r+0x1f8>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	3307      	adds	r3, #7
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	443b      	add	r3, r7
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	e767      	b.n	800a470 <_vfiprintf_r+0x94>
 800a5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7a5      	b.n	800a4f6 <_vfiprintf_r+0x11a>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0c0a 	mov.w	ip, #10
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5bc:	3a30      	subs	r2, #48	; 0x30
 800a5be:	2a09      	cmp	r2, #9
 800a5c0:	d903      	bls.n	800a5ca <_vfiprintf_r+0x1ee>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c5      	beq.n	800a552 <_vfiprintf_r+0x176>
 800a5c6:	9105      	str	r1, [sp, #20]
 800a5c8:	e7c3      	b.n	800a552 <_vfiprintf_r+0x176>
 800a5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7f0      	b.n	800a5b6 <_vfiprintf_r+0x1da>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <_vfiprintf_r+0x258>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7fc f850 	bl	8006684 <_printf_float>
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	1c78      	adds	r0, r7, #1
 800a5e8:	d1d6      	bne.n	800a598 <_vfiprintf_r+0x1bc>
 800a5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ec:	07d9      	lsls	r1, r3, #31
 800a5ee:	d405      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f0:	89ab      	ldrh	r3, [r5, #12]
 800a5f2:	059a      	lsls	r2, r3, #22
 800a5f4:	d402      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f8:	f000 faa1 	bl	800ab3e <__retarget_lock_release_recursive>
 800a5fc:	89ab      	ldrh	r3, [r5, #12]
 800a5fe:	065b      	lsls	r3, r3, #25
 800a600:	f53f af12 	bmi.w	800a428 <_vfiprintf_r+0x4c>
 800a604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a606:	e711      	b.n	800a42c <_vfiprintf_r+0x50>
 800a608:	ab03      	add	r3, sp, #12
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	462a      	mov	r2, r5
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_vfiprintf_r+0x258>)
 800a610:	a904      	add	r1, sp, #16
 800a612:	4630      	mov	r0, r6
 800a614:	f7fc fada 	bl	8006bcc <_printf_i>
 800a618:	e7e4      	b.n	800a5e4 <_vfiprintf_r+0x208>
 800a61a:	bf00      	nop
 800a61c:	0800b2a4 	.word	0x0800b2a4
 800a620:	0800b2c4 	.word	0x0800b2c4
 800a624:	0800b284 	.word	0x0800b284
 800a628:	0800b234 	.word	0x0800b234
 800a62c:	0800b23e 	.word	0x0800b23e
 800a630:	08006685 	.word	0x08006685
 800a634:	0800a3b7 	.word	0x0800a3b7
 800a638:	0800b23a 	.word	0x0800b23a

0800a63c <__swbuf_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	4614      	mov	r4, r2
 800a642:	4605      	mov	r5, r0
 800a644:	b118      	cbz	r0, 800a64e <__swbuf_r+0x12>
 800a646:	6983      	ldr	r3, [r0, #24]
 800a648:	b90b      	cbnz	r3, 800a64e <__swbuf_r+0x12>
 800a64a:	f000 f9d9 	bl	800aa00 <__sinit>
 800a64e:	4b21      	ldr	r3, [pc, #132]	; (800a6d4 <__swbuf_r+0x98>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d12b      	bne.n	800a6ac <__swbuf_r+0x70>
 800a654:	686c      	ldr	r4, [r5, #4]
 800a656:	69a3      	ldr	r3, [r4, #24]
 800a658:	60a3      	str	r3, [r4, #8]
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	071a      	lsls	r2, r3, #28
 800a65e:	d52f      	bpl.n	800a6c0 <__swbuf_r+0x84>
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	b36b      	cbz	r3, 800a6c0 <__swbuf_r+0x84>
 800a664:	6923      	ldr	r3, [r4, #16]
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	1ac0      	subs	r0, r0, r3
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	b2f6      	uxtb	r6, r6
 800a66e:	4283      	cmp	r3, r0
 800a670:	4637      	mov	r7, r6
 800a672:	dc04      	bgt.n	800a67e <__swbuf_r+0x42>
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f92e 	bl	800a8d8 <_fflush_r>
 800a67c:	bb30      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a67e:	68a3      	ldr	r3, [r4, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	701e      	strb	r6, [r3, #0]
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	3001      	adds	r0, #1
 800a690:	4283      	cmp	r3, r0
 800a692:	d004      	beq.n	800a69e <__swbuf_r+0x62>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	07db      	lsls	r3, r3, #31
 800a698:	d506      	bpl.n	800a6a8 <__swbuf_r+0x6c>
 800a69a:	2e0a      	cmp	r6, #10
 800a69c:	d104      	bne.n	800a6a8 <__swbuf_r+0x6c>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 f919 	bl	800a8d8 <_fflush_r>
 800a6a6:	b988      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <__swbuf_r+0x9c>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <__swbuf_r+0x7a>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7cf      	b.n	800a656 <__swbuf_r+0x1a>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <__swbuf_r+0xa0>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7ca      	b.n	800a656 <__swbuf_r+0x1a>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f80c 	bl	800a6e0 <__swsetup_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d0cb      	beq.n	800a664 <__swbuf_r+0x28>
 800a6cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6d0:	e7ea      	b.n	800a6a8 <__swbuf_r+0x6c>
 800a6d2:	bf00      	nop
 800a6d4:	0800b2a4 	.word	0x0800b2a4
 800a6d8:	0800b2c4 	.word	0x0800b2c4
 800a6dc:	0800b284 	.word	0x0800b284

0800a6e0 <__swsetup_r>:
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__swsetup_r+0xcc>)
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b125      	cbz	r5, 800a6f6 <__swsetup_r+0x16>
 800a6ec:	69ab      	ldr	r3, [r5, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__swsetup_r+0x16>
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f985 	bl	800aa00 <__sinit>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <__swsetup_r+0xd0>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d10f      	bne.n	800a71c <__swsetup_r+0x3c>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d42c      	bmi.n	800a762 <__swsetup_r+0x82>
 800a708:	06dd      	lsls	r5, r3, #27
 800a70a:	d411      	bmi.n	800a730 <__swsetup_r+0x50>
 800a70c:	2309      	movs	r3, #9
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a71a:	e03e      	b.n	800a79a <__swsetup_r+0xba>
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__swsetup_r+0xd4>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <__swsetup_r+0x46>
 800a722:	68ac      	ldr	r4, [r5, #8]
 800a724:	e7eb      	b.n	800a6fe <__swsetup_r+0x1e>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <__swsetup_r+0xd8>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	bf08      	it	eq
 800a72c:	68ec      	ldreq	r4, [r5, #12]
 800a72e:	e7e6      	b.n	800a6fe <__swsetup_r+0x1e>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x7a>
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x6a>
 800a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x66>
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff fb67 	bl	8009e14 <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	; 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x9a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x9a>
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f000 fa07 	bl	800ab88 <__smakebuf_r>
 800a77a:	89a0      	ldrh	r0, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	f010 0301 	ands.w	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <__swsetup_r+0xbc>
 800a786:	2300      	movs	r3, #0
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	425b      	negs	r3, r3
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b943      	cbnz	r3, 800a7a6 <__swsetup_r+0xc6>
 800a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a798:	d1ba      	bne.n	800a710 <__swsetup_r+0x30>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0781      	lsls	r1, r0, #30
 800a79e:	bf58      	it	pl
 800a7a0:	6963      	ldrpl	r3, [r4, #20]
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	e7f4      	b.n	800a790 <__swsetup_r+0xb0>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7f7      	b.n	800a79a <__swsetup_r+0xba>
 800a7aa:	bf00      	nop
 800a7ac:	20000108 	.word	0x20000108
 800a7b0:	0800b2a4 	.word	0x0800b2a4
 800a7b4:	0800b2c4 	.word	0x0800b2c4
 800a7b8:	0800b284 	.word	0x0800b284

0800a7bc <abort>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	2006      	movs	r0, #6
 800a7c0:	f000 fa52 	bl	800ac68 <raise>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f7f7 ffc3 	bl	8002750 <_exit>
	...

0800a7cc <__sflush_r>:
 800a7cc:	898a      	ldrh	r2, [r1, #12]
 800a7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	0710      	lsls	r0, r2, #28
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	d458      	bmi.n	800a88c <__sflush_r+0xc0>
 800a7da:	684b      	ldr	r3, [r1, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc05      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dc02      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	d0f9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f8:	682f      	ldr	r7, [r5, #0]
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	d032      	beq.n	800a864 <__sflush_r+0x98>
 800a7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	075a      	lsls	r2, r3, #29
 800a804:	d505      	bpl.n	800a812 <__sflush_r+0x46>
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	1ac0      	subs	r0, r0, r3
 800a80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a80c:	b10b      	cbz	r3, 800a812 <__sflush_r+0x46>
 800a80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a810:	1ac0      	subs	r0, r0, r3
 800a812:	2300      	movs	r3, #0
 800a814:	4602      	mov	r2, r0
 800a816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a818:	6a21      	ldr	r1, [r4, #32]
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b0      	blx	r6
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	d106      	bne.n	800a832 <__sflush_r+0x66>
 800a824:	6829      	ldr	r1, [r5, #0]
 800a826:	291d      	cmp	r1, #29
 800a828:	d82c      	bhi.n	800a884 <__sflush_r+0xb8>
 800a82a:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <__sflush_r+0x108>)
 800a82c:	40ca      	lsrs	r2, r1
 800a82e:	07d6      	lsls	r6, r2, #31
 800a830:	d528      	bpl.n	800a884 <__sflush_r+0xb8>
 800a832:	2200      	movs	r2, #0
 800a834:	6062      	str	r2, [r4, #4]
 800a836:	04d9      	lsls	r1, r3, #19
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	6022      	str	r2, [r4, #0]
 800a83c:	d504      	bpl.n	800a848 <__sflush_r+0x7c>
 800a83e:	1c42      	adds	r2, r0, #1
 800a840:	d101      	bne.n	800a846 <__sflush_r+0x7a>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b903      	cbnz	r3, 800a848 <__sflush_r+0x7c>
 800a846:	6560      	str	r0, [r4, #84]	; 0x54
 800a848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84a:	602f      	str	r7, [r5, #0]
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d0ca      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a854:	4299      	cmp	r1, r3
 800a856:	d002      	beq.n	800a85e <__sflush_r+0x92>
 800a858:	4628      	mov	r0, r5
 800a85a:	f7ff fadb 	bl	8009e14 <_free_r>
 800a85e:	2000      	movs	r0, #0
 800a860:	6360      	str	r0, [r4, #52]	; 0x34
 800a862:	e7c1      	b.n	800a7e8 <__sflush_r+0x1c>
 800a864:	6a21      	ldr	r1, [r4, #32]
 800a866:	2301      	movs	r3, #1
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	1c41      	adds	r1, r0, #1
 800a86e:	d1c7      	bne.n	800a800 <__sflush_r+0x34>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0c4      	beq.n	800a800 <__sflush_r+0x34>
 800a876:	2b1d      	cmp	r3, #29
 800a878:	d001      	beq.n	800a87e <__sflush_r+0xb2>
 800a87a:	2b16      	cmp	r3, #22
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0xb6>
 800a87e:	602f      	str	r7, [r5, #0]
 800a880:	e7b1      	b.n	800a7e6 <__sflush_r+0x1a>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	e7ad      	b.n	800a7e8 <__sflush_r+0x1c>
 800a88c:	690f      	ldr	r7, [r1, #16]
 800a88e:	2f00      	cmp	r7, #0
 800a890:	d0a9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a892:	0793      	lsls	r3, r2, #30
 800a894:	680e      	ldr	r6, [r1, #0]
 800a896:	bf08      	it	eq
 800a898:	694b      	ldreq	r3, [r1, #20]
 800a89a:	600f      	str	r7, [r1, #0]
 800a89c:	bf18      	it	ne
 800a89e:	2300      	movne	r3, #0
 800a8a0:	eba6 0807 	sub.w	r8, r6, r7
 800a8a4:	608b      	str	r3, [r1, #8]
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	dd9c      	ble.n	800a7e6 <__sflush_r+0x1a>
 800a8ac:	6a21      	ldr	r1, [r4, #32]
 800a8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8b0:	4643      	mov	r3, r8
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	dc06      	bgt.n	800a8ca <__sflush_r+0xfe>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c8:	e78e      	b.n	800a7e8 <__sflush_r+0x1c>
 800a8ca:	4407      	add	r7, r0
 800a8cc:	eba8 0800 	sub.w	r8, r8, r0
 800a8d0:	e7e9      	b.n	800a8a6 <__sflush_r+0xda>
 800a8d2:	bf00      	nop
 800a8d4:	20400001 	.word	0x20400001

0800a8d8 <_fflush_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	690b      	ldr	r3, [r1, #16]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	b913      	cbnz	r3, 800a8e8 <_fflush_r+0x10>
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	b118      	cbz	r0, 800a8f2 <_fflush_r+0x1a>
 800a8ea:	6983      	ldr	r3, [r0, #24]
 800a8ec:	b90b      	cbnz	r3, 800a8f2 <_fflush_r+0x1a>
 800a8ee:	f000 f887 	bl	800aa00 <__sinit>
 800a8f2:	4b14      	ldr	r3, [pc, #80]	; (800a944 <_fflush_r+0x6c>)
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d11b      	bne.n	800a930 <_fflush_r+0x58>
 800a8f8:	686c      	ldr	r4, [r5, #4]
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0ef      	beq.n	800a8e2 <_fflush_r+0xa>
 800a902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d404      	bmi.n	800a912 <_fflush_r+0x3a>
 800a908:	0599      	lsls	r1, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_fflush_r+0x3a>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 f915 	bl	800ab3c <__retarget_lock_acquire_recursive>
 800a912:	4628      	mov	r0, r5
 800a914:	4621      	mov	r1, r4
 800a916:	f7ff ff59 	bl	800a7cc <__sflush_r>
 800a91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91c:	07da      	lsls	r2, r3, #31
 800a91e:	4605      	mov	r5, r0
 800a920:	d4e0      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	059b      	lsls	r3, r3, #22
 800a926:	d4dd      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92a:	f000 f908 	bl	800ab3e <__retarget_lock_release_recursive>
 800a92e:	e7d9      	b.n	800a8e4 <_fflush_r+0xc>
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <_fflush_r+0x70>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <_fflush_r+0x62>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7df      	b.n	800a8fa <_fflush_r+0x22>
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <_fflush_r+0x74>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7da      	b.n	800a8fa <_fflush_r+0x22>
 800a944:	0800b2a4 	.word	0x0800b2a4
 800a948:	0800b2c4 	.word	0x0800b2c4
 800a94c:	0800b284 	.word	0x0800b284

0800a950 <std>:
 800a950:	2300      	movs	r3, #0
 800a952:	b510      	push	{r4, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	e9c0 3300 	strd	r3, r3, [r0]
 800a95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a95e:	6083      	str	r3, [r0, #8]
 800a960:	8181      	strh	r1, [r0, #12]
 800a962:	6643      	str	r3, [r0, #100]	; 0x64
 800a964:	81c2      	strh	r2, [r0, #14]
 800a966:	6183      	str	r3, [r0, #24]
 800a968:	4619      	mov	r1, r3
 800a96a:	2208      	movs	r2, #8
 800a96c:	305c      	adds	r0, #92	; 0x5c
 800a96e:	f7fb fde1 	bl	8006534 <memset>
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <std+0x38>)
 800a974:	6263      	str	r3, [r4, #36]	; 0x24
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <std+0x3c>)
 800a978:	62a3      	str	r3, [r4, #40]	; 0x28
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <std+0x40>)
 800a97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <std+0x44>)
 800a980:	6224      	str	r4, [r4, #32]
 800a982:	6323      	str	r3, [r4, #48]	; 0x30
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	0800aca1 	.word	0x0800aca1
 800a98c:	0800acc3 	.word	0x0800acc3
 800a990:	0800acfb 	.word	0x0800acfb
 800a994:	0800ad1f 	.word	0x0800ad1f

0800a998 <_cleanup_r>:
 800a998:	4901      	ldr	r1, [pc, #4]	; (800a9a0 <_cleanup_r+0x8>)
 800a99a:	f000 b8af 	b.w	800aafc <_fwalk_reent>
 800a99e:	bf00      	nop
 800a9a0:	0800a8d9 	.word	0x0800a8d9

0800a9a4 <__sfmoreglue>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	1e4a      	subs	r2, r1, #1
 800a9a8:	2568      	movs	r5, #104	; 0x68
 800a9aa:	4355      	muls	r5, r2
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9b2:	f7ff fa7f 	bl	8009eb4 <_malloc_r>
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	b140      	cbz	r0, 800a9cc <__sfmoreglue+0x28>
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a9c0:	300c      	adds	r0, #12
 800a9c2:	60a0      	str	r0, [r4, #8]
 800a9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9c8:	f7fb fdb4 	bl	8006534 <memset>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}

0800a9d0 <__sfp_lock_acquire>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__sfp_lock_acquire+0x8>)
 800a9d2:	f000 b8b3 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20000514 	.word	0x20000514

0800a9dc <__sfp_lock_release>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__sfp_lock_release+0x8>)
 800a9de:	f000 b8ae 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000514 	.word	0x20000514

0800a9e8 <__sinit_lock_acquire>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sinit_lock_acquire+0x8>)
 800a9ea:	f000 b8a7 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	2000050f 	.word	0x2000050f

0800a9f4 <__sinit_lock_release>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sinit_lock_release+0x8>)
 800a9f6:	f000 b8a2 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	2000050f 	.word	0x2000050f

0800aa00 <__sinit>:
 800aa00:	b510      	push	{r4, lr}
 800aa02:	4604      	mov	r4, r0
 800aa04:	f7ff fff0 	bl	800a9e8 <__sinit_lock_acquire>
 800aa08:	69a3      	ldr	r3, [r4, #24]
 800aa0a:	b11b      	cbz	r3, 800aa14 <__sinit+0x14>
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	f7ff bff0 	b.w	800a9f4 <__sinit_lock_release>
 800aa14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa18:	6523      	str	r3, [r4, #80]	; 0x50
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <__sinit+0x68>)
 800aa1c:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <__sinit+0x6c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	bf04      	itt	eq
 800aa26:	2301      	moveq	r3, #1
 800aa28:	61a3      	streq	r3, [r4, #24]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 f820 	bl	800aa70 <__sfp>
 800aa30:	6060      	str	r0, [r4, #4]
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f81c 	bl	800aa70 <__sfp>
 800aa38:	60a0      	str	r0, [r4, #8]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f818 	bl	800aa70 <__sfp>
 800aa40:	2200      	movs	r2, #0
 800aa42:	60e0      	str	r0, [r4, #12]
 800aa44:	2104      	movs	r1, #4
 800aa46:	6860      	ldr	r0, [r4, #4]
 800aa48:	f7ff ff82 	bl	800a950 <std>
 800aa4c:	68a0      	ldr	r0, [r4, #8]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	2109      	movs	r1, #9
 800aa52:	f7ff ff7d 	bl	800a950 <std>
 800aa56:	68e0      	ldr	r0, [r4, #12]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	2112      	movs	r1, #18
 800aa5c:	f7ff ff78 	bl	800a950 <std>
 800aa60:	2301      	movs	r3, #1
 800aa62:	61a3      	str	r3, [r4, #24]
 800aa64:	e7d2      	b.n	800aa0c <__sinit+0xc>
 800aa66:	bf00      	nop
 800aa68:	0800ae30 	.word	0x0800ae30
 800aa6c:	0800a999 	.word	0x0800a999

0800aa70 <__sfp>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	4607      	mov	r7, r0
 800aa74:	f7ff ffac 	bl	800a9d0 <__sfp_lock_acquire>
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <__sfp+0x84>)
 800aa7a:	681e      	ldr	r6, [r3, #0]
 800aa7c:	69b3      	ldr	r3, [r6, #24]
 800aa7e:	b913      	cbnz	r3, 800aa86 <__sfp+0x16>
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ffbd 	bl	800aa00 <__sinit>
 800aa86:	3648      	adds	r6, #72	; 0x48
 800aa88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	d503      	bpl.n	800aa98 <__sfp+0x28>
 800aa90:	6833      	ldr	r3, [r6, #0]
 800aa92:	b30b      	cbz	r3, 800aad8 <__sfp+0x68>
 800aa94:	6836      	ldr	r6, [r6, #0]
 800aa96:	e7f7      	b.n	800aa88 <__sfp+0x18>
 800aa98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa9c:	b9d5      	cbnz	r5, 800aad4 <__sfp+0x64>
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <__sfp+0x88>)
 800aaa0:	60e3      	str	r3, [r4, #12]
 800aaa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaa6:	6665      	str	r5, [r4, #100]	; 0x64
 800aaa8:	f000 f847 	bl	800ab3a <__retarget_lock_init_recursive>
 800aaac:	f7ff ff96 	bl	800a9dc <__sfp_lock_release>
 800aab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aab8:	6025      	str	r5, [r4, #0]
 800aaba:	61a5      	str	r5, [r4, #24]
 800aabc:	2208      	movs	r2, #8
 800aabe:	4629      	mov	r1, r5
 800aac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aac4:	f7fb fd36 	bl	8006534 <memset>
 800aac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aad0:	4620      	mov	r0, r4
 800aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad4:	3468      	adds	r4, #104	; 0x68
 800aad6:	e7d9      	b.n	800aa8c <__sfp+0x1c>
 800aad8:	2104      	movs	r1, #4
 800aada:	4638      	mov	r0, r7
 800aadc:	f7ff ff62 	bl	800a9a4 <__sfmoreglue>
 800aae0:	4604      	mov	r4, r0
 800aae2:	6030      	str	r0, [r6, #0]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d1d5      	bne.n	800aa94 <__sfp+0x24>
 800aae8:	f7ff ff78 	bl	800a9dc <__sfp_lock_release>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	e7ee      	b.n	800aad0 <__sfp+0x60>
 800aaf2:	bf00      	nop
 800aaf4:	0800ae30 	.word	0x0800ae30
 800aaf8:	ffff0001 	.word	0xffff0001

0800aafc <_fwalk_reent>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4606      	mov	r6, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab08:	2700      	movs	r7, #0
 800ab0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0e:	f1b9 0901 	subs.w	r9, r9, #1
 800ab12:	d505      	bpl.n	800ab20 <_fwalk_reent+0x24>
 800ab14:	6824      	ldr	r4, [r4, #0]
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d1f7      	bne.n	800ab0a <_fwalk_reent+0xe>
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab20:	89ab      	ldrh	r3, [r5, #12]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d907      	bls.n	800ab36 <_fwalk_reent+0x3a>
 800ab26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	d003      	beq.n	800ab36 <_fwalk_reent+0x3a>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4630      	mov	r0, r6
 800ab32:	47c0      	blx	r8
 800ab34:	4307      	orrs	r7, r0
 800ab36:	3568      	adds	r5, #104	; 0x68
 800ab38:	e7e9      	b.n	800ab0e <_fwalk_reent+0x12>

0800ab3a <__retarget_lock_init_recursive>:
 800ab3a:	4770      	bx	lr

0800ab3c <__retarget_lock_acquire_recursive>:
 800ab3c:	4770      	bx	lr

0800ab3e <__retarget_lock_release_recursive>:
 800ab3e:	4770      	bx	lr

0800ab40 <__swhatbuf_r>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	460e      	mov	r6, r1
 800ab44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	b096      	sub	sp, #88	; 0x58
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	461d      	mov	r5, r3
 800ab50:	da07      	bge.n	800ab62 <__swhatbuf_r+0x22>
 800ab52:	2300      	movs	r3, #0
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	89b3      	ldrh	r3, [r6, #12]
 800ab58:	061a      	lsls	r2, r3, #24
 800ab5a:	d410      	bmi.n	800ab7e <__swhatbuf_r+0x3e>
 800ab5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab60:	e00e      	b.n	800ab80 <__swhatbuf_r+0x40>
 800ab62:	466a      	mov	r2, sp
 800ab64:	f000 f902 	bl	800ad6c <_fstat_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dbf2      	blt.n	800ab52 <__swhatbuf_r+0x12>
 800ab6c:	9a01      	ldr	r2, [sp, #4]
 800ab6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab76:	425a      	negs	r2, r3
 800ab78:	415a      	adcs	r2, r3
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	e7ee      	b.n	800ab5c <__swhatbuf_r+0x1c>
 800ab7e:	2340      	movs	r3, #64	; 0x40
 800ab80:	2000      	movs	r0, #0
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	b016      	add	sp, #88	; 0x58
 800ab86:	bd70      	pop	{r4, r5, r6, pc}

0800ab88 <__smakebuf_r>:
 800ab88:	898b      	ldrh	r3, [r1, #12]
 800ab8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab8c:	079d      	lsls	r5, r3, #30
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460c      	mov	r4, r1
 800ab92:	d507      	bpl.n	800aba4 <__smakebuf_r+0x1c>
 800ab94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	6123      	str	r3, [r4, #16]
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	6163      	str	r3, [r4, #20]
 800aba0:	b002      	add	sp, #8
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	ab01      	add	r3, sp, #4
 800aba6:	466a      	mov	r2, sp
 800aba8:	f7ff ffca 	bl	800ab40 <__swhatbuf_r>
 800abac:	9900      	ldr	r1, [sp, #0]
 800abae:	4605      	mov	r5, r0
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff f97f 	bl	8009eb4 <_malloc_r>
 800abb6:	b948      	cbnz	r0, 800abcc <__smakebuf_r+0x44>
 800abb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbc:	059a      	lsls	r2, r3, #22
 800abbe:	d4ef      	bmi.n	800aba0 <__smakebuf_r+0x18>
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	f043 0302 	orr.w	r3, r3, #2
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	e7e3      	b.n	800ab94 <__smakebuf_r+0xc>
 800abcc:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <__smakebuf_r+0x7c>)
 800abce:	62b3      	str	r3, [r6, #40]	; 0x28
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	6020      	str	r0, [r4, #0]
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	9b00      	ldr	r3, [sp, #0]
 800abdc:	6163      	str	r3, [r4, #20]
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	6120      	str	r0, [r4, #16]
 800abe2:	b15b      	cbz	r3, 800abfc <__smakebuf_r+0x74>
 800abe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f8d1 	bl	800ad90 <_isatty_r>
 800abee:	b128      	cbz	r0, 800abfc <__smakebuf_r+0x74>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	f043 0301 	orr.w	r3, r3, #1
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	89a0      	ldrh	r0, [r4, #12]
 800abfe:	4305      	orrs	r5, r0
 800ac00:	81a5      	strh	r5, [r4, #12]
 800ac02:	e7cd      	b.n	800aba0 <__smakebuf_r+0x18>
 800ac04:	0800a999 	.word	0x0800a999

0800ac08 <_malloc_usable_size_r>:
 800ac08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0c:	1f18      	subs	r0, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfbc      	itt	lt
 800ac12:	580b      	ldrlt	r3, [r1, r0]
 800ac14:	18c0      	addlt	r0, r0, r3
 800ac16:	4770      	bx	lr

0800ac18 <_raise_r>:
 800ac18:	291f      	cmp	r1, #31
 800ac1a:	b538      	push	{r3, r4, r5, lr}
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	460d      	mov	r5, r1
 800ac20:	d904      	bls.n	800ac2c <_raise_r+0x14>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac2e:	b112      	cbz	r2, 800ac36 <_raise_r+0x1e>
 800ac30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac34:	b94b      	cbnz	r3, 800ac4a <_raise_r+0x32>
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 f830 	bl	800ac9c <_getpid_r>
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4601      	mov	r1, r0
 800ac40:	4620      	mov	r0, r4
 800ac42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac46:	f000 b817 	b.w	800ac78 <_kill_r>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d00a      	beq.n	800ac64 <_raise_r+0x4c>
 800ac4e:	1c59      	adds	r1, r3, #1
 800ac50:	d103      	bne.n	800ac5a <_raise_r+0x42>
 800ac52:	2316      	movs	r3, #22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	2001      	movs	r0, #1
 800ac58:	e7e7      	b.n	800ac2a <_raise_r+0x12>
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac60:	4628      	mov	r0, r5
 800ac62:	4798      	blx	r3
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7e0      	b.n	800ac2a <_raise_r+0x12>

0800ac68 <raise>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <raise+0xc>)
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7ff bfd3 	b.w	800ac18 <_raise_r>
 800ac72:	bf00      	nop
 800ac74:	20000108 	.word	0x20000108

0800ac78 <_kill_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d07      	ldr	r5, [pc, #28]	; (800ac98 <_kill_r+0x20>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	f7f7 fd53 	bl	8002730 <_kill>
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	d102      	bne.n	800ac94 <_kill_r+0x1c>
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	b103      	cbz	r3, 800ac94 <_kill_r+0x1c>
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	20000508 	.word	0x20000508

0800ac9c <_getpid_r>:
 800ac9c:	f7f7 bd40 	b.w	8002720 <_getpid>

0800aca0 <__sread>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	f000 f894 	bl	800add4 <_read_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	bfab      	itete	ge
 800acb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acb2:	89a3      	ldrhlt	r3, [r4, #12]
 800acb4:	181b      	addge	r3, r3, r0
 800acb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acba:	bfac      	ite	ge
 800acbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acbe:	81a3      	strhlt	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__swrite>:
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	461f      	mov	r7, r3
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4616      	mov	r6, r2
 800acd2:	d505      	bpl.n	800ace0 <__swrite+0x1e>
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	2302      	movs	r3, #2
 800acda:	2200      	movs	r2, #0
 800acdc:	f000 f868 	bl	800adb0 <_lseek_r>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	f000 b817 	b.w	800ad28 <_write_r>

0800acfa <__sseek>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 f855 	bl	800adb0 <_lseek_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	bf15      	itete	ne
 800ad0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad16:	81a3      	strheq	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	81a3      	strhne	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__sclose>:
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 b813 	b.w	800ad4c <_close_r>
	...

0800ad28 <_write_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	; (800ad48 <_write_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f7 fd31 	bl	800279e <_write>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_write_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_write_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000508 	.word	0x20000508

0800ad4c <_close_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d06      	ldr	r5, [pc, #24]	; (800ad68 <_close_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f7 fd3d 	bl	80027d6 <_close>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_close_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_close_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20000508 	.word	0x20000508

0800ad6c <_fstat_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_fstat_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f7 fd38 	bl	80027ee <_fstat>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_fstat_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_fstat_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000508 	.word	0x20000508

0800ad90 <_isatty_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d06      	ldr	r5, [pc, #24]	; (800adac <_isatty_r+0x1c>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	f7f7 fd37 	bl	800280e <_isatty>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_isatty_r+0x1a>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_isatty_r+0x1a>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20000508 	.word	0x20000508

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	; (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f7 fd30 	bl	8002824 <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000508 	.word	0x20000508

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f7 fcbe 	bl	8002764 <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000508 	.word	0x20000508

0800adf8 <_init>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr

0800ae04 <_fini>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr
