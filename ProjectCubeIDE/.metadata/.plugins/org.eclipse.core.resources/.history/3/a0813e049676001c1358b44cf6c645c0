/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "BH1750_Driver.h"
#include "TCA9548A_Driver.h"
#include "StepperDriver.h"
#include "PCA9685Driver.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define NUMBER_SENSORS 12
#define DESIRE_LUX 400
// The size of data transmits between PC and MicroController
#define SIZE_DATA 11

// MAX and MIN for STEPPER
#define STEP0_MAX 295
#define STEP0_MIN 55

#define STEP1_MAX 400
#define STEP1_MIN 160

#define STEP2_MAX 505
#define STEP2_MIN 265

#define SAFE_DISTANCE 105

// PCA9685
#define DELAY_LED 410

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
TIM_HandleTypeDef htim2;
UART_HandleTypeDef huart2;

const float32_t arrayFactor[NUMBER_SENSORS * NUMBER_SENSORS] = {
0.03757, 0.01759, 0.00530, 0.00240, 0.01820, 0.01053, 0.00435, 0.00227, 0.00581, 0.00471, 0.00278, 0.00184,
0.01799, 0.03400, 0.01666, 0.00544, 0.01094, 0.01653, 0.01001, 0.00436, 0.00471, 0.00563, 0.00436, 0.00284,
0.00544, 0.01666, 0.03400, 0.01799, 0.00436, 0.01001, 0.01653, 0.01094, 0.00284, 0.00436, 0.00563, 0.00471,
0.00240, 0.00530, 0.01759, 0.03757, 0.00227, 0.00435, 0.01053, 0.01820, 0.00184, 0.00278, 0.00471, 0.00581,
0.01840, 0.01073, 0.00435, 0.00236, 0.03671, 0.01760, 0.00563, 0.00270, 0.01960, 0.01160, 0.00471, 0.00244,
0.01107, 0.01673, 0.01020, 0.00436, 0.01800, 0.03357, 0.01653, 0.00567, 0.01159, 0.01800, 0.01073, 0.00494,
0.00436, 0.01020, 0.01673, 0.01107, 0.00567, 0.01653, 0.03357, 0.01800, 0.00494, 0.01073, 0.01800, 0.01159,
0.00236, 0.00435, 0.01073, 0.01840, 0.00270, 0.00563, 0.01760, 0.03671, 0.00244, 0.00471, 0.01160, 0.01960,
0.00581, 0.00456, 0.00273, 0.00175, 0.01934, 0.01160, 0.00457, 0.00253, 0.04043, 0.01906, 0.00602, 0.00264,
0.00471, 0.00563, 0.00436, 0.00290, 0.01160, 0.01760, 0.01053, 0.00471, 0.01947, 0.03671, 0.01800, 0.00600,
0.00290, 0.00436, 0.00563, 0.00471, 0.00471, 0.01053, 0.01760, 0.01160, 0.00600, 0.01800, 0.03671, 0.01947,
0.00175, 0.00273, 0.00456, 0.00581, 0.00253, 0.00457, 0.01160, 0.01934, 0.00264, 0.00602, 0.01906, 0.04043
};

float32_t arrNeedAddValue[NUMBER_SENSORS];
float32_t arrLastLedSupplied[NUMBER_SENSORS] = {};
float32_t arrLedValue[NUMBER_SENSORS];

// Messages for UART
uint8_t Hello[] = "Welcome to Project: Automatic light intensity balance\n";
uint8_t InitStepperMessage[] = "Setting Current Position of 3 Steppers: Done!\n";
uint8_t TargetStepperMessage[] = "Setting Target Position of 3 Steppers: Done!\n";
uint8_t ReInitSensorMessage[] = "Re-Initialzing Sensor: Done!\n";
uint8_t Done[] = "Running to Target Position: Done!!\n";
uint8_t controlLEDDone[] = "Send data to LED PWM: Done!\n";

// Variables for UART
uint8_t byteTest;
uint8_t dataReceived[SIZE_DATA];
uint16_t info[3];

// PROGRAM MODE
typedef enum {
	IDLE = 0,
	TEST_UART = 1,
	SET_INIT_COOR = 2,
	SET_TARGET_COOR = 3,
	RUN_STEPPER = 4,
	GET_SENSOR = 5,
	CONTROL_LED = 6,
	REINITSENSOR = 7,
	AUTO_CONTROL = 8
} PROGRAM_MODE;

PROGRAM_MODE program = IDLE;

// Variables for STEPPER
Stepper_HandleTypeDef Step0;
Stepper_HandleTypeDef Step1;
Stepper_HandleTypeDef Step2;

// Variables for Sensor and TCA
TCA9548A_HandleTypeDef i2cHub;
BH1750_HandleTypeDef sensor[NUMBER_SENSORS];
char dataSensorMessage[24] = {};
uint16_t dataSensor[NUMBER_SENSORS];
uint8_t ret;

// Variables for PCA and LED
PCA9685_HandleTypeDef pcaHub;
uint16_t intensity[NUMBER_SENSORS];
uint16_t channelON[NUMBER_SENSORS];
uint16_t channelOFF[NUMBER_SENSORS];


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Initialize Stepper, Sensor, TCA, PCA
void userStepperInit() {
	StepperInit(&Step0, GPIOA, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
	StepperInit(&Step1, GPIOC, GPIO_PIN_9, GPIO_PIN_8, 32, 0);
	StepperInit(&Step2, GPIOC, GPIO_PIN_7, GPIO_PIN_6, 32, 0);
}

void userSensorInit() {
	TCA9548A_Init(&i2cHub, &hi2c1, TCA_ADDRESS);
	for (uint8_t i = 0; i < NUMBER_SENSORS / 2; i++) {
		TCA9548A_SelectSingleChannel(&i2cHub, i);
		BH1750_Init(&sensor[2 * i], &hi2c1, BH1750_ADDRESS_LOW);
		BH1750_Init(&sensor[2 * i + 1], &hi2c1, BH1750_ADDRESS_HIGH);
		BH1750_PowerState(&sensor[2 * i], 1);
		BH1750_PowerState(&sensor[2 * i + 1], 1);
		BH1750_SetMode(&sensor[2 * i], CONTINUOUS_H_RES_MODE);
		BH1750_SetMode(&sensor[2 * i + 1], CONTINUOUS_H_RES_MODE);
	}
}

void userPCAInit() {
	PCA9685_Init(&pcaHub, &hi2c2, PCA9685_I2C_ADDRESS, 0);
	PCA9685_SetOscillatorFrequency(&pcaHub, 27000000);
	PCA9685_SetPWMFreq(&pcaHub, 1600);
}


// CHOOSE THE MANUAL CONTROL PROGRAM (It's still under UART interrupt function)
void ManualControl() {
	switch (dataReceived[1]) {
	case 'T':
		program = TEST_UART;
		break;
	case 'I':
		program = SET_INIT_COOR;
		break;
	case 'A':
		program = SET_TARGET_COOR;
		break;
	case 'G':
		program = GET_SENSOR;
		break;
	case 'L':
		program = CONTROL_LED;
		break;
	case 'R':
		program = REINITSENSOR;
		break;
	}
}

// CHOOSE THE AUTO CONTROL PROGRAM (It's still under UART interrupt function)
void AutoControl() {
	program = AUTO_CONTROL;
	// TODO: add function to turn off all led
}

// Select PROGRAM in UART interrupt function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == huart2.Instance) {
		switch (dataReceived[0]) {
		case 'M':
		  ManualControl();
		  break;
		case 'A':
		  AutoControl();
		  break;
		}
		HAL_UART_Receive_IT(huart, dataReceived, SIZE_DATA);
	}

}

// Additions function
void delay_us(uint16_t us)
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) < us);
}

void DecryptData() {
	info[0] = (dataReceived[2] - '0') * 100 + (dataReceived[3] - '0') * 10 + (dataReceived[4]  - '0');
	info[1] = (dataReceived[5] - '0') * 100 + (dataReceived[6] - '0') * 10 + (dataReceived[7]  - '0');
	info[2] = (dataReceived[8] - '0') * 100 + (dataReceived[9] - '0') * 10 + (dataReceived[10] - '0');
}

// Hold 3 board to avoid collision
void keepMotorSafe() {
	uint32_t X0, X1, X2;
	X0 = Step0.TargetPulse;
	X1 = Step1.TargetPulse;
	X2 = Step2.TargetPulse;

	// Step 1
	if (X1 > (STEP1_MAX * FACTOR))			X1 = STEP1_MAX * FACTOR;
	if (X1 < (STEP1_MIN * FACTOR))			X1 = STEP1_MIN * FACTOR;

	// Step 2
	if (X2 > (STEP2_MAX * FACTOR)) 			X2 = STEP2_MAX * FACTOR;
	if (X2 < (STEP2_MIN * FACTOR))			X2 = STEP2_MIN * FACTOR;
	if (X2 < (X1 + SAFE_DISTANCE * FACTOR)) X2 = X1 + SAFE_DISTANCE * FACTOR;

	// Step0
	if (X0 > (STEP0_MAX * FACTOR)) 			X0 = STEP0_MAX * FACTOR;
	if (X0 < (STEP0_MIN * FACTOR)) 			X0 = STEP0_MIN * FACTOR;
	if (X0 > (X1 - SAFE_DISTANCE * FACTOR)) X0 = X1 - SAFE_DISTANCE * FACTOR;

	Step0.TargetPulse = X0;
	Step1.TargetPulse = X1;
	Step2.TargetPulse = X2;
}

void sendUARTaInt(uint16_t num) {
	char result[4];
	sprintf(result, "%d", num);
	result[3] = '\n';
	HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 1000);
}

void sendInfoPWM() {
	uint16_t LEDOnTime;
	for (uint8_t channel = 0; channel < NUMBER_SENSORS; channel++) {
		channelON[channel] = DELAY_LED - 1;
		LEDOnTime = intensity[channel] * 4096 / 1000;
		channelOFF[channel]  = (LEDOnTime + DELAY_LED > 4096
								? LEDOnTime + DELAY_LED - 4096
								: LEDOnTime + DELAY_LED - 1);
		PCA9685_SetPWM(&pcaHub, channel, channelON[channel], channelOFF[channel]);
	}
}



// THE MAIN PROGRAMS
void TestUART() { // DONE
	HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
	program = IDLE;
}

void SetInitCoorStepper() {
	DecryptData();
	setCurrentPos(&Step0, info[0]);
	setCurrentPos(&Step1, info[1]);
	setCurrentPos(&Step2, info[2]);
	HAL_UART_Transmit(&huart2, InitStepperMessage, sizeof(InitStepperMessage), 1000);
	program = IDLE;
}

void SetTargetCoorStepper() {
	DecryptData();
	setTargetPos(&Step0, info[0]);
	setTargetPos(&Step1, info[1]);
	setTargetPos(&Step2, info[2]);
	keepMotorSafe();
	uint32_t locationStep0 = Step0.TargetPulse / FACTOR;
	uint32_t locationStep1 = Step1.TargetPulse / FACTOR;
	uint32_t locationStep2 = Step2.TargetPulse / FACTOR;
	uint8_t locationMessage[20];
	locationMessage[0] = 'T';
	locationMessage[1] = 'a';
	locationMessage[2] = 'r';
	locationMessage[3] = 'g';
	locationMessage[4] = 'e';
	locationMessage[5] = 't';
	locationMessage[6] = ':';
	locationMessage[7] = ' ';
	// Step0
	locationMessage[10] = locationStep0 % 10 + '0';
	locationMessage[9] = locationStep0 / 10 % 10 + '0';
	locationMessage[8] = locationStep0 / 100 % 10 + '0';
	locationMessage[11] = ' ';
	// Step1
	locationMessage[14] = locationStep1 % 10 + '0';
	locationMessage[13] = locationStep1 / 10 % 10 + '0';
	locationMessage[12] = locationStep1 / 100 % 10 + '0';
	locationMessage[15] = ' ';
	// Step2
	locationMessage[18] = locationStep2 % 10 + '0';
	locationMessage[17] = locationStep2 / 10 % 10 + '0';
	locationMessage[16] = locationStep2 / 100 % 10 + '0';
	locationMessage[19] = '\n';

	HAL_UART_Transmit(&huart2, locationMessage, sizeof(locationMessage), 1000);
	program = RUN_STEPPER;
}

void RunStepper() {
	uint8_t flag = 0;
	if (runToTarget(&Step0) == STEPPER_ERROR) flag = 1;
	if (runToTarget(&Step1) == STEPPER_ERROR) flag = 1;
	if (runToTarget(&Step2) == STEPPER_ERROR) flag = 1;
	if (flag == 0) {
		HAL_UART_Transmit(&huart2, Done, sizeof(Done), 1000);
		program = IDLE;
	}
}

void GetSensor() {
	for (uint8_t i = 0; i < NUMBER_SENSORS / 2; i++) {
		TCA9548A_SelectSingleChannel(&i2cHub, i);
		BH1750_ReadLight(&sensor[2 * i], &dataSensor[2 * i]);
		BH1750_ReadLight(&sensor[2 * i + 1], &dataSensor[2 * i + 1]);

		dataSensorMessage[i*6 + 5] = (i < 3) ? ' ' : '\n';
		dataSensorMessage[i*6 + 4] = dataSensor[i] % 10 + '0';
		dataSensorMessage[i*6 + 3] = dataSensor[i] / 10 % 10 + '0';
		dataSensorMessage[i*6 + 2] = dataSensor[i] / 100 % 10 + '0';
		dataSensorMessage[i*6 + 1] = dataSensor[i] / 1000 % 10 + '0';
		dataSensorMessage[i*6 + 0] = dataSensor[i] / 10000 % 10 + '0';
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)dataSensorMessage, 24, 24);
	program = IDLE;
}

void ControlLED() {
	DecryptData();
	for (int i = 0; i < NUMBER_SENSORS; i++) {
		intensity[i] = info[i];
	}
	sendInfoPWM();
	HAL_UART_Transmit(&huart2, controlLEDDone, sizeof(controlLEDDone), 10);
	program = IDLE;
}

void automation() {
	arm_matrix_instance_f32 *matrixFactor;
	arm_matrix_instance_f32 *needAddValue;
	arm_matrix_instance_f32 *lastLedSupplied;
	arm_matrix_instance_f32 *ledValue;

	arm_mat_init_f32(matrixFactor, NUMBER_SENSORS, NUMBER_SENSORS, (float32_t *)arrayFactor);
	arm_mat_init_f32(needAddValue, NUMBER_SENSORS, 1, (float32_t *)arrNeedAddValue);
	arm_mat_init_f32(lastLedSupplied, NUMBER_SENSORS, 1, (float32_t *)arrLastLedSupplied);
	arm_mat_init_f32(ledValue, NUMBER_SENSORS, 1, (float32_t *)arrLedValue);

	while (program == AUTO_CONTROL) {
		// GET INPUT
		for (int i = 0; i < NUMBER_SENSORS; i++) {
			float32_t natureValue = (dataSensor[i] > arrLastLedSupplied[i])
									? dataSensor[i] - arrLastLedSupplied[i] : 0;
			needAddValue[i] = (DESIRE_LUX > natureValue)
									? DESIRE_LUX - natureValue : 0;
		}
		float32_t copyArrFactor[NUMBER_SENSORS * NUMBER_SENSORS];
		memcpy(copyArrFactor, arrayFactor, NUMBER_SENSORS * NUMBER_SENSORS);

		calculateLampIntensity(needAddValue, lampValue);
		print_vector_contents(lampValue);

		gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, matrixFactor,
					   lampValue, 0.0, lastLampSupplied);
	}
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_TIM2_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);

  HAL_UART_Transmit(&huart2, Hello, sizeof(Hello), 1000);
  HAL_UART_Receive_IT(&huart2, dataReceived, SIZE_DATA);

  // User Init
  userStepperInit();
  userSensorInit();
  userPCAInit();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (program == TEST_UART) {
		  TestUART();
	  } else if (program == SET_INIT_COOR) {
		  SetInitCoorStepper();
	  } else if (program == SET_TARGET_COOR) {
		  SetTargetCoorStepper();
	  } else if (program == RUN_STEPPER) {
		  RunStepper();
	  } else if (program == GET_SENSOR) {
		  GetSensor();
	  } else if (program == CONTROL_LED) {
		  ControlLED();
	  } else if (program == REINITSENSOR) {
		  HAL_UART_Transmit(&huart2, ReInitSensorMessage, sizeof(ReInitSensorMessage), 10);
		  userSensorInit();
		  program = IDLE;
	  } else if (program == AUTO_CONTROL) {
		  automation();
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 50 - 1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xFFFF - 1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
